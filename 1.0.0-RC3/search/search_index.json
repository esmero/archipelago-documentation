{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Archipelago Commons Intro Archipelago Commons, or simply Archipelago, is an evolving Open Source Digital Objects Repository / DAM Server Architecture based on the popular CMS Drupal8/9 and released under GLP V.3 License . Archipelago is a mix of deeply integrated custom-coded Drupal modules (made with care by us) and a curated and well-configured Drupal instance, running under a discrete and well-planned set of service containers. Archipelago was dreamt as a multi-tenant, distributed, capable system (as its name suggests!) and can live isolated or in flocks of similar deployments, sharing storage, services, or -- even better -- just the discovery layer. Learn more about the different Software Services used by Archipelago. Archipelago's primary focus is to serve the greater GLAM community by providing a flexible, consistent, and unified way of describing, storing, linking, exposing metadata and media assets. We respect identities and existing workflows. We endeavor to design Archipelago in ways that empower communities of every size and shape. Finally, Archipelago tries to stay humble, slim, and nimble in nature with a small code base full of inline comments and @todos . All of our work is driven by a clear and concise but thoughtful planned technical roadmap --updated in tandem with new releases .","title":"Home"},{"location":"#archipelago-commons-intro","text":"Archipelago Commons, or simply Archipelago, is an evolving Open Source Digital Objects Repository / DAM Server Architecture based on the popular CMS Drupal8/9 and released under GLP V.3 License . Archipelago is a mix of deeply integrated custom-coded Drupal modules (made with care by us) and a curated and well-configured Drupal instance, running under a discrete and well-planned set of service containers. Archipelago was dreamt as a multi-tenant, distributed, capable system (as its name suggests!) and can live isolated or in flocks of similar deployments, sharing storage, services, or -- even better -- just the discovery layer. Learn more about the different Software Services used by Archipelago. Archipelago's primary focus is to serve the greater GLAM community by providing a flexible, consistent, and unified way of describing, storing, linking, exposing metadata and media assets. We respect identities and existing workflows. We endeavor to design Archipelago in ways that empower communities of every size and shape. Finally, Archipelago tries to stay humble, slim, and nimble in nature with a small code base full of inline comments and @todos . All of our work is driven by a clear and concise but thoughtful planned technical roadmap --updated in tandem with new releases .","title":"Archipelago Commons Intro"},{"location":"AMIviaSpreadsheets/","text":"Ingesting New Digital Objects and Collections using Spreadsheets or Google Sheets Ingesting Only Digital Objects or Both Digital Objects and Collections uses similar processes, with a few key differences. Click here to jump to the Ingesting Both New Digital Objects and Collections section of this guide page. Ingesting Only New Digital Objects From either the main Content page or the AMI Sets List page, select the 'Start an AMI set' button to begin. Step 1: Plugin Selection Select the Plugin type you will be using from the dropdown menu. Google Sheets Importer Spreadsheet Importer (if using local CSV file) *The Remote JSON API Importer and additional remote import source options (for other repository systems) will be covered in separate tutorials following future releases. Step 2: Operation and Spreadsheet Source Selection Select 'Create New ADOs' as the Operation you would like to perform. If using Google Sheets Importer: Enter the ID of your Google Sheet Enter the Cell Range for your Google Sheet If using Spreadsheet Importer: Select 'Choose File' to upload the CSV you will be using. Step 3: Data Transformation Selections Select the data transformation approach--how your source data will be transformed into ADO (Archipelago Digital Object) Metadata. You will have 3 options for your data transformation approach: Direct Columns from your spreadsheet source will be cast directly to ADO metadata (JSON), without transformation/further processing (only intended for use with simple data strings). Custom (Expert Mode) Provides very granular custom data transformation and mapping options Needs to be used if importing Digital Objects and Digital Object Collections at the same time/from same spreadsheet source (see separate instructions below). Template Columns from your spreadsheet source will be cast to ADO metadata (JSON) using a Twig template setup for JSON output. You will also need to Select which columns contain filenames, entities or URLS where files can be fetched from. Select what columns correspond to the Digital Object types found in your spreadsheet source. Lastly, for this step, you will need to select the destination Fields and Bundles for your New ADOs. If your spreadsheet source only contains Digital Objects, select Strawberry (Descriptive Metadata source) for Digital Object If using Sheet 1 of the Demo AMI Ingest set (found above): Select Template and use the AMI Ingest JSON template that corresponds with your metadata elements. Select images , documents , and audios for the file source/fetching. Step 4: Global ADO Mappings Select your global ADO mappings. Even if empty (no values), select node_uuid and any relationship predicate columns (such as ismemberof ). By default, the option to automatically assigns UUIDs is selected. If you have existing UUIds, unselect this option. Select the corresponding Columns for the Required ADO mappings. If using Sheet 1 of the Demo AMI Ingest set (found above): Select both ismemberof and node_uuid for ADO Parent columns Keep 'Automatically assign UUID' checked Do not select any column for 'Sequence' Select the label column for ADO Label Step 5: ZIP upload Provide an optional ZIP file containing your assets. You may choose to upload a ZIP file containing all or some of the corresponding files specified in your csv/spreadsheet. The file upload size restrictions specified in your Archipelago instance will apply here (512MB maximum by default). Please note, when creating your ZIP file (in particular, within an OSX environment): only select the folders and files needed, not the top/enclosing folder they are in. Info Step 6: AMI Set Confirmation You will now see a message letting you know that 'Your source data was saved and is available as a CSV at linktotheAMIgenerated.csv The message will also let you know that your New AMI Set was created and provide a link to the AMI Set page. Step 7: AMI Set Processing Your newly created AMI Set will now need to be Processed. If you clicked on the 'see it here' link in Step 6, you will be brought to the AMI Set page for review. From this page you can review the JSON configuration for your set (determined by your selections in the preceeding steps). To Process this set, navigate to the Process tab. You will have two options related to the Processing outcome for your AMI Set. - Option 1: Select the \"Desired ADOS Statuses After Process\" for both Digital Objects (and Digital Object Collections, if also part of your ingest). - The Statuses you have available will reflect the publication workflow/moderation states (such as Draft, Published, Archived/Unpublished) setup in your Archipelago instance, and the permissions associated your user account. - Option 2: You may choose to check the option to 'Enqueue but do not process Batch' to place the AMI set in the Queue to Process. For the AMI version shipped with Archipelago 1.0.0-RC2, the option to 'Enqueue' for scheduled/future Processing should only be used if the Queue operations for your Archipelago instance are configured. Please return to this page for updated Enqueueing instructions that will accompany future releases. - Select Confirm to continue. You may also select Process from the Operations menu for the AMI set from the main AMI sets page. If you chose to 'Confirm\" and Process your AMI Set immediately, proceed to Step 9: Processing and ADO Creation. Step 8: Queue Manager (if not Processing immediately) If you chose to place your AMI set in the Queue to Process in step 7, you may need to navigate to the Queue Manager found at /admin/config/system/queue-ui . (Be sure to select the Queue Manager under the System section, not the Queue Manager for Hydroponic Service under the Archipelago section). If the Queue operations for your Archipelago instance have been configured, you can simply leave your AMI Set in the Queue for Processing on the preconfigured schedule. To Process your AMI Set immediately from the Queue Manager page, select the checkbox next to the 'AMI Digital Object Ingester Queue Worker'. Keep the Action menu set to Batch Process and click the Apply to selected items button. Step 9: Processing and ADO Creation Your AMI set will now be Processed. You can follow the set's progress through the Processing queues loading screen. After your AMI set is Processed, you will receive confirmation messages letting you know your Digital Objects were successfully created. From this message, you can click on each ADO title to review the new created Digital Object (or Collection) if you wish. Or, you may proceed to step 10. Step 10: Review your newly created Digital Objects Return to the main Content page found at /admin/content and review your newly created Digital Objects. After ensuring that files and metadata elements were mapped correctly, you may choose to change the Status for your Digital Objects to 'Published'. Celebrate your AMI success with a fresh coffee, tea, or cookie! Ingesting Both New Digital Objects and Collections (in the same spreadsheet) From either the main Content page or the AMI Sets List page, select the 'Start an AMI set' button to begin. Steps 1: Plugin Selection & Step 2: Operation and Spreadsheet Source Selection Follow the same instructions found above for Ingesting New Digital Objects. Step 3: Data Transformation Selections To import Digital Objects and Digital Object Collections at the same time/from same spreadsheet source, you will need to select the Custom (Expert Mode) option for your data transformation approach. Custom (Expert Mode) Provides very granular custom data transformation and mapping options You will then need to 'Select your Custom Data Transformation and Mapping Options' for each of your Digital Object types. For Collection objects: Select either the Direct or Template (and corresponding JSON template) option for your data transformation approach. Select the destination Fields and Bundles for Strawberry (Descriptive Metadata source) for Digital Object Collection You may also wish to Select which columns contain filenames, entities or URLS where files can be fetched from. For most Collection objects, you will either leave unselected or choose images if you are uploading a thumbnail image for your Collection. For each Digital Object type in your spreadsheet source: You will also need to select either the Direct or Template (and corresponding JSON template) option for your data transformation approach. Then select which columns contain filenames, entities or URLS where files can be fetched from. Select what columns correspond to the Digital Object types found in your spreadsheet source. Then Select the destination Fields and Bundles for Strawberry (Descriptive Metadata source) for Digital Object For example, for Book type Digital Objects, you would select the following options (as depicted in this screenshot): If using Sheet 2 of the Demo AMI Ingest set (found above): Follow the instructions for mapping the Digital Object Collection (found in row 2), using the Template Data transformation approach with the AMI 1.0.0-RC1 JSON Template. Also select the destination Fields and Bundles for Strawberry (Descriptive Metadata source) for Digital Object Collection . Leave the file source fetching unselected. For the Book, Photograph, and Conversation (Oral History) Digital Object types, choose the same the Template Data transformation approach with the AMI 1.0.0-RC1 JSON Template. For Book object types, select images and documents for file source fetching. For Photograph object types, select images for file source fetching. For Conversation (Oral History) object types, select images , documents , and audio for file source fetching. Step 4: Global ADO Mappings Select your global ADO mappings. Even if empty (no values), select node_uuid . In order to make sure that Digital Objects containing the corresponding UUID or spreadsheet row number for any corresponding Collections, make sure ismemberof is also selected in the ADO Parent Columns. By default, the option to automatically assigns UUIDs is selected. If you have existing UUIds, unselect this option. Select the corresponding Columns for the Required ADO mappings. If using Sheet 2 of the Demo AMI Ingest set (found above): Select both ismemberof and node_uuid for ADO Parent columns Keep 'Automatically assign UUID' checked Do not select any column for 'Sequence' Select the label column for ADO Label Step 5-10: Follow the same instructions found in Steps 5-10 above. As part of step 10, make sure your Digital Objects were ingested into the corresponding Collections you mapped them to in your spreadsheet source. Please note, you will need to Publish the Digital Objects before the Objects will appear in the Collection's View page (whether accessed as a logged-in Admin user or Anonymous/Public user). Celebrate your next AMI success with another fresh coffee, tea, or cookie! Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Ingesting New Digital Objects and Collections using Spreadsheets or Google Sheets"},{"location":"AMIviaSpreadsheets/#ingesting-new-digital-objects-and-collections-using-spreadsheets-or-google-sheets","text":"Ingesting Only Digital Objects or Both Digital Objects and Collections uses similar processes, with a few key differences. Click here to jump to the Ingesting Both New Digital Objects and Collections section of this guide page.","title":"Ingesting New Digital Objects and Collections using Spreadsheets or Google Sheets"},{"location":"AMIviaSpreadsheets/#ingesting-only-new-digital-objects","text":"From either the main Content page or the AMI Sets List page, select the 'Start an AMI set' button to begin.","title":"Ingesting Only New Digital Objects"},{"location":"AMIviaSpreadsheets/#step-1-plugin-selection","text":"Select the Plugin type you will be using from the dropdown menu. Google Sheets Importer Spreadsheet Importer (if using local CSV file) *The Remote JSON API Importer and additional remote import source options (for other repository systems) will be covered in separate tutorials following future releases.","title":"Step 1: Plugin Selection"},{"location":"AMIviaSpreadsheets/#step-2-operation-and-spreadsheet-source-selection","text":"Select 'Create New ADOs' as the Operation you would like to perform. If using Google Sheets Importer: Enter the ID of your Google Sheet Enter the Cell Range for your Google Sheet If using Spreadsheet Importer: Select 'Choose File' to upload the CSV you will be using.","title":"Step 2: Operation and Spreadsheet Source Selection"},{"location":"AMIviaSpreadsheets/#step-3-data-transformation-selections","text":"Select the data transformation approach--how your source data will be transformed into ADO (Archipelago Digital Object) Metadata. You will have 3 options for your data transformation approach: Direct Columns from your spreadsheet source will be cast directly to ADO metadata (JSON), without transformation/further processing (only intended for use with simple data strings). Custom (Expert Mode) Provides very granular custom data transformation and mapping options Needs to be used if importing Digital Objects and Digital Object Collections at the same time/from same spreadsheet source (see separate instructions below). Template Columns from your spreadsheet source will be cast to ADO metadata (JSON) using a Twig template setup for JSON output. You will also need to Select which columns contain filenames, entities or URLS where files can be fetched from. Select what columns correspond to the Digital Object types found in your spreadsheet source. Lastly, for this step, you will need to select the destination Fields and Bundles for your New ADOs. If your spreadsheet source only contains Digital Objects, select Strawberry (Descriptive Metadata source) for Digital Object If using Sheet 1 of the Demo AMI Ingest set (found above): Select Template and use the AMI Ingest JSON template that corresponds with your metadata elements. Select images , documents , and audios for the file source/fetching.","title":"Step 3: Data Transformation Selections"},{"location":"AMIviaSpreadsheets/#step-4-global-ado-mappings","text":"Select your global ADO mappings. Even if empty (no values), select node_uuid and any relationship predicate columns (such as ismemberof ). By default, the option to automatically assigns UUIDs is selected. If you have existing UUIds, unselect this option. Select the corresponding Columns for the Required ADO mappings. If using Sheet 1 of the Demo AMI Ingest set (found above): Select both ismemberof and node_uuid for ADO Parent columns Keep 'Automatically assign UUID' checked Do not select any column for 'Sequence' Select the label column for ADO Label","title":"Step 4: Global ADO Mappings"},{"location":"AMIviaSpreadsheets/#step-5-zip-upload","text":"Provide an optional ZIP file containing your assets. You may choose to upload a ZIP file containing all or some of the corresponding files specified in your csv/spreadsheet. The file upload size restrictions specified in your Archipelago instance will apply here (512MB maximum by default). Please note, when creating your ZIP file (in particular, within an OSX environment): only select the folders and files needed, not the top/enclosing folder they are in. Info","title":"Step 5: ZIP upload"},{"location":"AMIviaSpreadsheets/#step-6-ami-set-confirmation","text":"You will now see a message letting you know that 'Your source data was saved and is available as a CSV at linktotheAMIgenerated.csv The message will also let you know that your New AMI Set was created and provide a link to the AMI Set page.","title":"Step 6: AMI Set Confirmation"},{"location":"AMIviaSpreadsheets/#step-7-ami-set-processing","text":"Your newly created AMI Set will now need to be Processed. If you clicked on the 'see it here' link in Step 6, you will be brought to the AMI Set page for review. From this page you can review the JSON configuration for your set (determined by your selections in the preceeding steps). To Process this set, navigate to the Process tab. You will have two options related to the Processing outcome for your AMI Set. - Option 1: Select the \"Desired ADOS Statuses After Process\" for both Digital Objects (and Digital Object Collections, if also part of your ingest). - The Statuses you have available will reflect the publication workflow/moderation states (such as Draft, Published, Archived/Unpublished) setup in your Archipelago instance, and the permissions associated your user account. - Option 2: You may choose to check the option to 'Enqueue but do not process Batch' to place the AMI set in the Queue to Process. For the AMI version shipped with Archipelago 1.0.0-RC2, the option to 'Enqueue' for scheduled/future Processing should only be used if the Queue operations for your Archipelago instance are configured. Please return to this page for updated Enqueueing instructions that will accompany future releases. - Select Confirm to continue. You may also select Process from the Operations menu for the AMI set from the main AMI sets page. If you chose to 'Confirm\" and Process your AMI Set immediately, proceed to Step 9: Processing and ADO Creation.","title":"Step 7: AMI Set Processing"},{"location":"AMIviaSpreadsheets/#step-8-queue-manager-if-not-processing-immediately","text":"If you chose to place your AMI set in the Queue to Process in step 7, you may need to navigate to the Queue Manager found at /admin/config/system/queue-ui . (Be sure to select the Queue Manager under the System section, not the Queue Manager for Hydroponic Service under the Archipelago section). If the Queue operations for your Archipelago instance have been configured, you can simply leave your AMI Set in the Queue for Processing on the preconfigured schedule. To Process your AMI Set immediately from the Queue Manager page, select the checkbox next to the 'AMI Digital Object Ingester Queue Worker'. Keep the Action menu set to Batch Process and click the Apply to selected items button.","title":"Step 8: Queue Manager (if not Processing immediately)"},{"location":"AMIviaSpreadsheets/#step-9-processing-and-ado-creation","text":"Your AMI set will now be Processed. You can follow the set's progress through the Processing queues loading screen. After your AMI set is Processed, you will receive confirmation messages letting you know your Digital Objects were successfully created. From this message, you can click on each ADO title to review the new created Digital Object (or Collection) if you wish. Or, you may proceed to step 10.","title":"Step 9: Processing and ADO Creation"},{"location":"AMIviaSpreadsheets/#step-10-review-your-newly-created-digital-objects","text":"Return to the main Content page found at /admin/content and review your newly created Digital Objects. After ensuring that files and metadata elements were mapped correctly, you may choose to change the Status for your Digital Objects to 'Published'. Celebrate your AMI success with a fresh coffee, tea, or cookie!","title":"Step 10: Review your newly created Digital Objects"},{"location":"AMIviaSpreadsheets/#ingesting-both-new-digital-objects-and-collections-in-the-same-spreadsheet","text":"From either the main Content page or the AMI Sets List page, select the 'Start an AMI set' button to begin.","title":"Ingesting Both New Digital Objects and Collections (in the same spreadsheet)"},{"location":"AMIviaSpreadsheets/#steps-1-plugin-selection-step-2-operation-and-spreadsheet-source-selection","text":"Follow the same instructions found above for Ingesting New Digital Objects.","title":"Steps 1: Plugin Selection &amp; Step 2: Operation and Spreadsheet Source Selection"},{"location":"AMIviaSpreadsheets/#step-3-data-transformation-selections_1","text":"To import Digital Objects and Digital Object Collections at the same time/from same spreadsheet source, you will need to select the Custom (Expert Mode) option for your data transformation approach. Custom (Expert Mode) Provides very granular custom data transformation and mapping options You will then need to 'Select your Custom Data Transformation and Mapping Options' for each of your Digital Object types. For Collection objects: Select either the Direct or Template (and corresponding JSON template) option for your data transformation approach. Select the destination Fields and Bundles for Strawberry (Descriptive Metadata source) for Digital Object Collection You may also wish to Select which columns contain filenames, entities or URLS where files can be fetched from. For most Collection objects, you will either leave unselected or choose images if you are uploading a thumbnail image for your Collection. For each Digital Object type in your spreadsheet source: You will also need to select either the Direct or Template (and corresponding JSON template) option for your data transformation approach. Then select which columns contain filenames, entities or URLS where files can be fetched from. Select what columns correspond to the Digital Object types found in your spreadsheet source. Then Select the destination Fields and Bundles for Strawberry (Descriptive Metadata source) for Digital Object For example, for Book type Digital Objects, you would select the following options (as depicted in this screenshot): If using Sheet 2 of the Demo AMI Ingest set (found above): Follow the instructions for mapping the Digital Object Collection (found in row 2), using the Template Data transformation approach with the AMI 1.0.0-RC1 JSON Template. Also select the destination Fields and Bundles for Strawberry (Descriptive Metadata source) for Digital Object Collection . Leave the file source fetching unselected. For the Book, Photograph, and Conversation (Oral History) Digital Object types, choose the same the Template Data transformation approach with the AMI 1.0.0-RC1 JSON Template. For Book object types, select images and documents for file source fetching. For Photograph object types, select images for file source fetching. For Conversation (Oral History) object types, select images , documents , and audio for file source fetching.","title":"Step 3: Data Transformation Selections"},{"location":"AMIviaSpreadsheets/#step-4-global-ado-mappings_1","text":"Select your global ADO mappings. Even if empty (no values), select node_uuid . In order to make sure that Digital Objects containing the corresponding UUID or spreadsheet row number for any corresponding Collections, make sure ismemberof is also selected in the ADO Parent Columns. By default, the option to automatically assigns UUIDs is selected. If you have existing UUIds, unselect this option. Select the corresponding Columns for the Required ADO mappings. If using Sheet 2 of the Demo AMI Ingest set (found above): Select both ismemberof and node_uuid for ADO Parent columns Keep 'Automatically assign UUID' checked Do not select any column for 'Sequence' Select the label column for ADO Label","title":"Step 4: Global ADO Mappings"},{"location":"AMIviaSpreadsheets/#step-5-10","text":"Follow the same instructions found in Steps 5-10 above. As part of step 10, make sure your Digital Objects were ingested into the corresponding Collections you mapped them to in your spreadsheet source. Please note, you will need to Publish the Digital Objects before the Objects will appear in the Collection's View page (whether accessed as a logged-in Admin user or Anonymous/Public user). Celebrate your next AMI success with another fresh coffee, tea, or cookie! Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Step 5-10:"},{"location":"CODE_OF_CONDUCT/","text":"Archipelago - code of conduct / anti-harassment policy The Archipelago Commons community and the Metropolitan New York Library Council (METRO) are dedicated to providing a welcoming and positive experience for all participants, whether they are at a formal gathering, in a social setting, or taking part in activities online. This includes any forum, mailing list, wiki, web site, IRC channel, public meeting, conference, workshop/training or private correspondence. The Archipelago community welcomes participation from people all over the world, and these community members bring with them a wide variety of professional, personal and social backgrounds; whatever these may be, we treat colleagues with dignity and respect. This Code of Conduct governs how we behave in public or in private. We expect it to be honored by everyone who represents the project officially or informally, claims affiliation with the project, or participates directly. We ask that all community members adhere to the following expectations: METRO and Archipelago have a zero-tolerance policy for verbal, physical, and sexual harassment. Anyone who is asked to stop a hostile or harassing behavior is expected to do so immediately. Here , for reference, are New York State\u2019s requirements. Harassment includes: Offensive verbal comments related to sex, gender, ethnicity, nationality, socioeconomic status, sexual orientation, disability, physical appearance, body size, age, race, religion; sexual or discriminatory images in public spaces; deliberate intimidation; stalking; harassing photography or recording; sustained disruption of talks or other events; inappropriate physical contact; and unwelcome sexual attention. Participation in discussions and activities should be respectful at all times. Please refrain from making inappropriate comments. Create opportunities for all people to speak, exercising tolerance of the perspectives and opinions of others. When we disagree, we do this in a polite and professional manner. We may not always agree. When frustrated, we back away and look for good intentions, not reasons to be more frustrated. When we see a flaw in a contribution, we offer guidance on how to fix it. METRO and Archipelago honor the ability to be anonymous. If a person is going by their handle, a pseudonym, or doesn\u2019t wish to use their name, please respect their wishes and privacy. This also includes \u2018outing\u2019 someone\u2019s workplace, their age, their gender, their real name, etc, without their consent. We take people\u2019s privacy and their comfort very seriously. Protocol for Conflict Resolution Participants in METRO and Archipelago communication channels violating this code of conduct may be sanctioned or expelled at the discretion of the organizers of the meeting (if the channel is an in-person event) or the Archipelago Advisory Board (if the channel is online). Initial Incident If you are being harassed, notice that someone else is being harassed, or have any other concerns, and you feel comfortable speaking with the offender, please inform the offender that he/she/they has affected you negatively. Oftentimes, the offending behavior is unintentional, and the accidental offender and offended will resolve the incident by having that initial discussion. Participants asked to stop any harassing behavior are expected to comply immediately. Escalation If the offender insists that they did not offend, if offender is actively harassing you, or if direct engagement is not a good option for you at this time, then you will need a third party to step in. To report any violation of the following code of conduct or if you have any questions or suggestions about this code of conduct, please contact archipelago-community@metro.org or fill out this form anonymously . This will be sent to leadership at METRO and the advisory board member currently acting as the Code of Conduct liaison. Our enforcement guidelines work in accordance with those published at the Contributor Covenant . Upon review, if METRO leadership and the Code of Conduct Liaison determine that the incident constitutes harassment they may take any action they deem appropriate, including warning the offender, expulsion from the meeting or other community channels, or contacting a higher authority such as a representative from the offender's institution. These policies draw from many other code of conduct documents, including but not limited to: code4lib , DLF , Islandora , ICG , Samvera , WikimediaNYC , and IDOCE","title":"Code of Conduct"},{"location":"CODE_OF_CONDUCT/#archipelago-code-of-conduct-anti-harassment-policy","text":"The Archipelago Commons community and the Metropolitan New York Library Council (METRO) are dedicated to providing a welcoming and positive experience for all participants, whether they are at a formal gathering, in a social setting, or taking part in activities online. This includes any forum, mailing list, wiki, web site, IRC channel, public meeting, conference, workshop/training or private correspondence. The Archipelago community welcomes participation from people all over the world, and these community members bring with them a wide variety of professional, personal and social backgrounds; whatever these may be, we treat colleagues with dignity and respect. This Code of Conduct governs how we behave in public or in private. We expect it to be honored by everyone who represents the project officially or informally, claims affiliation with the project, or participates directly. We ask that all community members adhere to the following expectations: METRO and Archipelago have a zero-tolerance policy for verbal, physical, and sexual harassment. Anyone who is asked to stop a hostile or harassing behavior is expected to do so immediately. Here , for reference, are New York State\u2019s requirements. Harassment includes: Offensive verbal comments related to sex, gender, ethnicity, nationality, socioeconomic status, sexual orientation, disability, physical appearance, body size, age, race, religion; sexual or discriminatory images in public spaces; deliberate intimidation; stalking; harassing photography or recording; sustained disruption of talks or other events; inappropriate physical contact; and unwelcome sexual attention. Participation in discussions and activities should be respectful at all times. Please refrain from making inappropriate comments. Create opportunities for all people to speak, exercising tolerance of the perspectives and opinions of others. When we disagree, we do this in a polite and professional manner. We may not always agree. When frustrated, we back away and look for good intentions, not reasons to be more frustrated. When we see a flaw in a contribution, we offer guidance on how to fix it. METRO and Archipelago honor the ability to be anonymous. If a person is going by their handle, a pseudonym, or doesn\u2019t wish to use their name, please respect their wishes and privacy. This also includes \u2018outing\u2019 someone\u2019s workplace, their age, their gender, their real name, etc, without their consent. We take people\u2019s privacy and their comfort very seriously.","title":"Archipelago - code of conduct / anti-harassment policy"},{"location":"CODE_OF_CONDUCT/#protocol-for-conflict-resolution","text":"Participants in METRO and Archipelago communication channels violating this code of conduct may be sanctioned or expelled at the discretion of the organizers of the meeting (if the channel is an in-person event) or the Archipelago Advisory Board (if the channel is online).","title":"Protocol for Conflict Resolution"},{"location":"CODE_OF_CONDUCT/#initial-incident","text":"If you are being harassed, notice that someone else is being harassed, or have any other concerns, and you feel comfortable speaking with the offender, please inform the offender that he/she/they has affected you negatively. Oftentimes, the offending behavior is unintentional, and the accidental offender and offended will resolve the incident by having that initial discussion. Participants asked to stop any harassing behavior are expected to comply immediately.","title":"Initial Incident"},{"location":"CODE_OF_CONDUCT/#escalation","text":"If the offender insists that they did not offend, if offender is actively harassing you, or if direct engagement is not a good option for you at this time, then you will need a third party to step in. To report any violation of the following code of conduct or if you have any questions or suggestions about this code of conduct, please contact archipelago-community@metro.org or fill out this form anonymously . This will be sent to leadership at METRO and the advisory board member currently acting as the Code of Conduct liaison. Our enforcement guidelines work in accordance with those published at the Contributor Covenant . Upon review, if METRO leadership and the Code of Conduct Liaison determine that the incident constitutes harassment they may take any action they deem appropriate, including warning the offender, expulsion from the meeting or other community channels, or contacting a higher authority such as a representative from the offender's institution. These policies draw from many other code of conduct documents, including but not limited to: code4lib , DLF , Islandora , ICG , Samvera , WikimediaNYC , and IDOCE","title":"Escalation"},{"location":"I7solrImporter/","text":"Using the Islandora 7 Solr Importer From either the main Content page or the AMI Sets List page, select the 'Start an AMI set' button to begin. Step 1: Plugin Selection Select the Islandora 7 Solr Importer from the dropdown menu. Step 2, section 1: Solr Server Configuration You will only have the option to select 'Create New ADOs' as the Operation you would like to perform. For the Solr Server Configuration section, you will need to provide all of the following information: PID of the Islandora Collection Members you want to fetch (example: islandora:root) Host of your Solr Server (example: repositorydomain.org) Port (example: 8080) Path (example: /) Type of Solr Deployment Either Single Solr Server (most common) or Solr Cloud Ensemble Core (example: islandora) You will also need to select Starting Row you would like to begin fetching results from, and the Number of Rows to fetch. The Starting Row is an offset and defaults to 0, which is the most common (and recommended) approach. For the Total Number of Rows to Fetch, setting this to empty or null will automatically (refresh when selecting 'Next' button at bottom of page) prefill with the real Number Rows found by the Solr Query invoked. If you set this number higher than the actual results we will only fetch what can be fetched. For larger collections, you may wish to create multiple/split AMI ingest sets by selecting a specified number of rows. As an example, for a collection of 1500 objects that you wanted to split into three AMI ingests of 500 objects, you would specify the Starting Row as 0 for the first set and Number of Rows as 500. For the second set, your Starting Row would be Row 501; for the third set, 1001). In this example, the Number of Rows would always be 500. Step 2, section 2: Islandora Mappings In this step you will need to make determinations on how you would like to map your Islandora 7 digital objects to your Archipelago repository. Selecting \"Collapse Multi Children Objects\" will collapse Children Datastreams into a single ADO with many attached files (single row in the generated AMI set .csv file). Book Pages will be fetched but also the Top Level PDF (if one exists in your Islandora instance). In the Required ADO mappings, you will need to specify which Archipelago type you want to map each Islandora Content Model found in your source collection. For example, for info:fedora/islandora:sp_large_image_cmodel you may want to use Photograph . If you had left \"Collapse Multi Children Objects\" unselected, you will also need to specify the Islandora Content Model to ADO types mapping for possible Children. You can also specify an ADO (Object or Collection) to be used the Parent of Imported Objects. By selecting an existing ADO (Object or Collection) here using the autocomplete/search, the generated AMI set .csv file will contain an 'ismemberof' column containing the UUID of the selected ADO for every row. Step 3: Data Transformation Selections Select the data transformation approach--how your source data will be transformed into ADO (Archipelago Digital Object) Metadata. As noted in the list below, 'Custom (Expert Mode)' is the recommended choice for AMI sets generated using the Islandora 7 Solr Impoter plugin. You will have 3 options for your data transformation approach: Direct Columns from your spreadsheet source will be cast directly to ADO metadata (JSON), without transformation/further processing (only intended for use with simple data strings). Custom (Expert Mode) Recommended choice for AMI sets generated using the Islandora 7 Solr Importer plugin Provides very granular custom data transformation and mapping options Needs to be used if importing Digital Objects and Digital Object Collections at the same time/from same spreadsheet source (see separate instructions below). Template Columns from your spreadsheet source will be cast to ADO metadata (JSON) using a Twig template setup for JSON output. You will also need to Select which columns contain filenames, entities or URLS where files can be fetched from. Select what columns correspond to the Digital Object types found in your spreadsheet source. Lastly, for this step, you will need to select the destination Fields and Bundles for your New ADOs. If your spreadsheet source only contains Digital Objects, select Strawberry (Descriptive Metadata source) for Digital Object If using Sheet 1 of the Demo AMI Ingest set (found above): Select Template and use the AMI Ingest JSON template that corresponds with your metadata elements. Select images , documents , and audios for the file source/fetching. Step 4: Global ADO Mappings Select your global ADO mappings. Even if empty (no values), select node_uuid and any relationship predicate columns (such as ismemberof ). By default, the option to automatically assigns UUIDs is selected. If you have existing UUIds, unselect this option. Select the corresponding Columns for the Required ADO mappings. If using Sheet 1 of the Demo AMI Ingest set (found above): Select both ismemberof and node_uuid for ADO Parent columns Keep 'Automatically assign UUID' checked Do not select any column for 'Sequence' Select the label column for ADO Label Step 5: ZIP upload For standard Spreadsheet or Google Sheets AMI ingests, you would use this step to provide an optional ZIP file containing your assets. For your Islandora 7 Solr Importer process, the generated AMI set .csv file will contain the necessary URLs to the corresponding Islandora 7 file datastreams for each object as needed. Select next to skip this ZIP upload step and proceed. Step 6: Batch fetching from Solr During this step, AMI will fetch the specified digital objects from the remote Solr source. This is generally a quick process, but be aware that settings in the remote Solr source can impact the response time. Step 7: AMI Set Confirmation You will now see a message letting your know your \"New AMI Set was created\". You will be able to review the generated .csv file directly from this page under Source Data File. While you may immediately select \"Process\" from this AMI Set Confirmation page to use the Islandora 7 Importer generated .csv file as-is to ingest the ADOs in your AMI set, it is strongly recommended that you review the .csv file first. AMI is configured to trim unecessary (for Archipelago) and de-duplicate redundant Solr source data, but you may wish to pare down the sourced data even further and/or conduct general metadata review and cleanup before migrating your content. You will also likely want to make adjustments to your AMI Ingest JSON Template based on your review, depending on the variation of metadata columns/keys found in your source repostiory. Step 8: AMI Set Processing Whether you have chosen to review your .csv file or not, your newly created AMI Set will now need to be Processed. On the main AMI set page, you can review the configurations and Source Data File for your set (determined by your selections in the preceeding steps). To Process this set, navigate to the Process tab. You will have two options related to the Processing outcome for your AMI Set. Option 1: Select the \"Desired ADOS Statuses After Process\" for both Digital Objects (and Digital Object Collections, if also part of your ingest). The Statuses you have available will reflect the publication workflow/moderation states (such as Draft, Published, Archived/Unpublished) setup in your Archipelago instance, and the permissions associated your user account. Option 2: You may choose to check the option to 'Enqueue but do not process Batch' to place the AMI set in the Queue to Process. For the AMI version shipped with Archipelago 1.0.0-RC2, the option to 'Enqueue' for scheduled/future Processing should only be used if the Queue operations for your Archipelago instance are configured. Please return to this page for updated Enqueueing instructions that will accompany future releases. Select Confirm to continue. You may also select Process from the Operations menu for the AMI set from the main AMI sets page. If you chose to 'Confirm\" and Process your AMI Set immediately, proceed to Step 9: Processing and ADO Creation. Step 9: Queue Manager (if not Processing immediately) If you chose to place your AMI set in the Queue to Process in step 7, you may need to navigate to the Queue Manager found at /admin/config/system/queue-ui . (Be sure to select the Queue Manager under the System section, not the Queue Manager for Hydroponic Service under the Archipelago section). If the Queue operations for your Archipelago instance have been configured, you can simply leave your AMI Set in the Queue for Processing on the preconfigured schedule. To Process your AMI Set immediately from the Queue Manager page, select the checkbox next to the 'AMI Digital Object Ingester Queue Worker'. Keep the Action menu set to Batch Process and click the Apply to selected items button. Step 10: Processing and ADO Creation Your AMI set will now be Processed. You can follow the set's progress through the Processing queues loading screen. After your AMI set is Processed, you will receive confirmation messages letting you know your Digital Objects were successfully created. From this message, you can click on each ADO title to review the new created Digital Object (or Collection) if you wish. Or, you may proceed to step 10. Step 11: Review your newly created Digital Objects Return to the main Content page found at /admin/content and review your newly created Digital Objects. After ensuring that files and metadata elements were mapped correctly, you may choose to change the Status for your Digital Objects to 'Published'. Celebrate your AMI success with a fresh coffee, tea, or cookie! Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Using the Islandora 7 Solr Importer"},{"location":"I7solrImporter/#using-the-islandora-7-solr-importer","text":"From either the main Content page or the AMI Sets List page, select the 'Start an AMI set' button to begin.","title":"Using the Islandora 7 Solr Importer"},{"location":"I7solrImporter/#step-1-plugin-selection","text":"Select the Islandora 7 Solr Importer from the dropdown menu.","title":"Step 1: Plugin Selection"},{"location":"I7solrImporter/#step-2-section-1-solr-server-configuration","text":"You will only have the option to select 'Create New ADOs' as the Operation you would like to perform. For the Solr Server Configuration section, you will need to provide all of the following information: PID of the Islandora Collection Members you want to fetch (example: islandora:root) Host of your Solr Server (example: repositorydomain.org) Port (example: 8080) Path (example: /) Type of Solr Deployment Either Single Solr Server (most common) or Solr Cloud Ensemble Core (example: islandora) You will also need to select Starting Row you would like to begin fetching results from, and the Number of Rows to fetch. The Starting Row is an offset and defaults to 0, which is the most common (and recommended) approach. For the Total Number of Rows to Fetch, setting this to empty or null will automatically (refresh when selecting 'Next' button at bottom of page) prefill with the real Number Rows found by the Solr Query invoked. If you set this number higher than the actual results we will only fetch what can be fetched. For larger collections, you may wish to create multiple/split AMI ingest sets by selecting a specified number of rows. As an example, for a collection of 1500 objects that you wanted to split into three AMI ingests of 500 objects, you would specify the Starting Row as 0 for the first set and Number of Rows as 500. For the second set, your Starting Row would be Row 501; for the third set, 1001). In this example, the Number of Rows would always be 500.","title":"Step 2, section 1: Solr Server Configuration"},{"location":"I7solrImporter/#step-2-section-2-islandora-mappings","text":"In this step you will need to make determinations on how you would like to map your Islandora 7 digital objects to your Archipelago repository. Selecting \"Collapse Multi Children Objects\" will collapse Children Datastreams into a single ADO with many attached files (single row in the generated AMI set .csv file). Book Pages will be fetched but also the Top Level PDF (if one exists in your Islandora instance). In the Required ADO mappings, you will need to specify which Archipelago type you want to map each Islandora Content Model found in your source collection. For example, for info:fedora/islandora:sp_large_image_cmodel you may want to use Photograph . If you had left \"Collapse Multi Children Objects\" unselected, you will also need to specify the Islandora Content Model to ADO types mapping for possible Children. You can also specify an ADO (Object or Collection) to be used the Parent of Imported Objects. By selecting an existing ADO (Object or Collection) here using the autocomplete/search, the generated AMI set .csv file will contain an 'ismemberof' column containing the UUID of the selected ADO for every row.","title":"Step 2, section 2: Islandora Mappings"},{"location":"I7solrImporter/#step-3-data-transformation-selections","text":"Select the data transformation approach--how your source data will be transformed into ADO (Archipelago Digital Object) Metadata. As noted in the list below, 'Custom (Expert Mode)' is the recommended choice for AMI sets generated using the Islandora 7 Solr Impoter plugin. You will have 3 options for your data transformation approach: Direct Columns from your spreadsheet source will be cast directly to ADO metadata (JSON), without transformation/further processing (only intended for use with simple data strings). Custom (Expert Mode) Recommended choice for AMI sets generated using the Islandora 7 Solr Importer plugin Provides very granular custom data transformation and mapping options Needs to be used if importing Digital Objects and Digital Object Collections at the same time/from same spreadsheet source (see separate instructions below). Template Columns from your spreadsheet source will be cast to ADO metadata (JSON) using a Twig template setup for JSON output. You will also need to Select which columns contain filenames, entities or URLS where files can be fetched from. Select what columns correspond to the Digital Object types found in your spreadsheet source. Lastly, for this step, you will need to select the destination Fields and Bundles for your New ADOs. If your spreadsheet source only contains Digital Objects, select Strawberry (Descriptive Metadata source) for Digital Object If using Sheet 1 of the Demo AMI Ingest set (found above): Select Template and use the AMI Ingest JSON template that corresponds with your metadata elements. Select images , documents , and audios for the file source/fetching.","title":"Step 3: Data Transformation Selections"},{"location":"I7solrImporter/#step-4-global-ado-mappings","text":"Select your global ADO mappings. Even if empty (no values), select node_uuid and any relationship predicate columns (such as ismemberof ). By default, the option to automatically assigns UUIDs is selected. If you have existing UUIds, unselect this option. Select the corresponding Columns for the Required ADO mappings. If using Sheet 1 of the Demo AMI Ingest set (found above): Select both ismemberof and node_uuid for ADO Parent columns Keep 'Automatically assign UUID' checked Do not select any column for 'Sequence' Select the label column for ADO Label","title":"Step 4: Global ADO Mappings"},{"location":"I7solrImporter/#step-5-zip-upload","text":"For standard Spreadsheet or Google Sheets AMI ingests, you would use this step to provide an optional ZIP file containing your assets. For your Islandora 7 Solr Importer process, the generated AMI set .csv file will contain the necessary URLs to the corresponding Islandora 7 file datastreams for each object as needed. Select next to skip this ZIP upload step and proceed.","title":"Step 5: ZIP upload"},{"location":"I7solrImporter/#step-6-batch-fetching-from-solr","text":"During this step, AMI will fetch the specified digital objects from the remote Solr source. This is generally a quick process, but be aware that settings in the remote Solr source can impact the response time.","title":"Step 6: Batch fetching from Solr"},{"location":"I7solrImporter/#step-7-ami-set-confirmation","text":"You will now see a message letting your know your \"New AMI Set was created\". You will be able to review the generated .csv file directly from this page under Source Data File. While you may immediately select \"Process\" from this AMI Set Confirmation page to use the Islandora 7 Importer generated .csv file as-is to ingest the ADOs in your AMI set, it is strongly recommended that you review the .csv file first. AMI is configured to trim unecessary (for Archipelago) and de-duplicate redundant Solr source data, but you may wish to pare down the sourced data even further and/or conduct general metadata review and cleanup before migrating your content. You will also likely want to make adjustments to your AMI Ingest JSON Template based on your review, depending on the variation of metadata columns/keys found in your source repostiory.","title":"Step 7: AMI Set Confirmation"},{"location":"I7solrImporter/#step-8-ami-set-processing","text":"Whether you have chosen to review your .csv file or not, your newly created AMI Set will now need to be Processed. On the main AMI set page, you can review the configurations and Source Data File for your set (determined by your selections in the preceeding steps). To Process this set, navigate to the Process tab. You will have two options related to the Processing outcome for your AMI Set. Option 1: Select the \"Desired ADOS Statuses After Process\" for both Digital Objects (and Digital Object Collections, if also part of your ingest). The Statuses you have available will reflect the publication workflow/moderation states (such as Draft, Published, Archived/Unpublished) setup in your Archipelago instance, and the permissions associated your user account. Option 2: You may choose to check the option to 'Enqueue but do not process Batch' to place the AMI set in the Queue to Process. For the AMI version shipped with Archipelago 1.0.0-RC2, the option to 'Enqueue' for scheduled/future Processing should only be used if the Queue operations for your Archipelago instance are configured. Please return to this page for updated Enqueueing instructions that will accompany future releases. Select Confirm to continue. You may also select Process from the Operations menu for the AMI set from the main AMI sets page. If you chose to 'Confirm\" and Process your AMI Set immediately, proceed to Step 9: Processing and ADO Creation.","title":"Step 8: AMI Set Processing"},{"location":"I7solrImporter/#step-9-queue-manager-if-not-processing-immediately","text":"If you chose to place your AMI set in the Queue to Process in step 7, you may need to navigate to the Queue Manager found at /admin/config/system/queue-ui . (Be sure to select the Queue Manager under the System section, not the Queue Manager for Hydroponic Service under the Archipelago section). If the Queue operations for your Archipelago instance have been configured, you can simply leave your AMI Set in the Queue for Processing on the preconfigured schedule. To Process your AMI Set immediately from the Queue Manager page, select the checkbox next to the 'AMI Digital Object Ingester Queue Worker'. Keep the Action menu set to Batch Process and click the Apply to selected items button.","title":"Step 9: Queue Manager (if not Processing immediately)"},{"location":"I7solrImporter/#step-10-processing-and-ado-creation","text":"Your AMI set will now be Processed. You can follow the set's progress through the Processing queues loading screen. After your AMI set is Processed, you will receive confirmation messages letting you know your Digital Objects were successfully created. From this message, you can click on each ADO title to review the new created Digital Object (or Collection) if you wish. Or, you may proceed to step 10.","title":"Step 10: Processing and ADO Creation"},{"location":"I7solrImporter/#step-11-review-your-newly-created-digital-objects","text":"Return to the main Content page found at /admin/content and review your newly created Digital Objects. After ensuring that files and metadata elements were mapped correctly, you may choose to change the Status for your Digital Objects to 'Published'. Celebrate your AMI success with a fresh coffee, tea, or cookie! Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Step 11: Review your newly created Digital Objects"},{"location":"about/","text":"About this Documentation This documentation was generated with Material for MkDocs . The repo/branch is at https://github.com/esmero/archipelago-documentation/tree/1.0.0-RC3 , and the site is built using the following Github workflow: https://github.com/esmero/archipelago-documentation/blob/1.0.0-RC3/.github/workflows/ci.yml . Contributing First, please see this guide to set up the repo and branch locally and to create an issue and corresponding pull request. Install mkdocs-material and mike: pip install mkdocs-material mike . Make changes to local Run mike delete --all && mike deploy 1.0.0-RC3 default && mike set-default 1.0.0-RC3 && mike serve to see and test changes. Follow the above guide to contribute the changes back.","title":"About This Documentation"},{"location":"about/#about-this-documentation","text":"This documentation was generated with Material for MkDocs . The repo/branch is at https://github.com/esmero/archipelago-documentation/tree/1.0.0-RC3 , and the site is built using the following Github workflow: https://github.com/esmero/archipelago-documentation/blob/1.0.0-RC3/.github/workflows/ci.yml .","title":"About this Documentation"},{"location":"about/#contributing","text":"First, please see this guide to set up the repo and branch locally and to create an issue and corresponding pull request. Install mkdocs-material and mike: pip install mkdocs-material mike . Make changes to local Run mike delete --all && mike deploy 1.0.0-RC3 default && mike set-default 1.0.0-RC3 && mike serve to see and test changes. Follow the above guide to contribute the changes back.","title":"Contributing"},{"location":"acknowledgments/","text":"Caring & Coding + Fixing Diego Pino Giancarlo Birello Allison Lund Albert Min Acknowledgments This software is a Metropolitan New York Library Council Open-Source initiative and part of the Archipelago Commons project. License GPLv3","title":"Care & Coding + Fixing / Acknowledgments / License"},{"location":"acknowledgments/#caring-coding-fixing","text":"Diego Pino Giancarlo Birello Allison Lund Albert Min","title":"Caring &amp; Coding + Fixing"},{"location":"acknowledgments/#acknowledgments","text":"This software is a Metropolitan New York Library Council Open-Source initiative and part of the Archipelago Commons project.","title":"Acknowledgments"},{"location":"acknowledgments/#license","text":"GPLv3","title":"License"},{"location":"ami_index/","text":"Archipelago Multi-Importer (AMI) Archipelago Multi-Importer (AMI) is a module for batch/bulk/mass ingests of Archipelago digital objects (ADOs) and collections. AMI also enables you to perform batch administrative actions, such as updating, patching/revising, or deleting digital objects and collections. AMI's Solr Importer plugin can be used to create AMI ingests and migrating content from existing Solr-sourcable digital repositories (such as Islandora 7). Getting started with AMI You can access AMI through the AMI Sets tab on the main Content page found at /admin/content or directly at /amiset/list . AMI Overview and Pre-Release Notes - AMI 0.1.0 (Archipelago - 1.0.0-RC3) From the desk of Diego Pino AMI provides Tabulated data ingest for ADOs with customizable input plugins. Each Spreadsheet (or Google Spreadsheet) goes through a Configuration Multi Step setup and generates at the end an AMI Set. AMI Sets then can be enqueued or directly ingested, its generated Objects purged and reingested again, its source data (generated and enriched with UUIDS) CSV replaced, improved and uploaded again and ingested. Click to read the full AMI 0.1.0 (Archipelago - 1.0.0-RC3) Pre-Release Notes. Setup Steps AMI has Ingest, Update and Patch capabilities. AMI has a plugin system to fetch data. The data can come from multiple sources and right now (RC2) CSV/EXCEL or Google Spreadsheets are the ones enabled. Direct from Solr/OAI/API is on the works too for RC3. AMI can read files locally from the server, remotely from URLs or remotely from Private Backend Storage (S3). It does parent/children validation, makes sure that parents are ingested first, cleans broken relationships, allows arbitrary multi relations to be generated in a single ROW (ismemberof, partOf, etc) pointing to other rows or existing ADOs (via UUIDs) and can process rows directly as JSON or preprocessed via a Metadata Display entity (twig template) capable of producing JSON output. These templates can be configured by \u201ctype\u201d, Articles v/s 3DModel can have different ones. Even which columns contain Files can be configured at that level. AMI Set Entity Ami Sets are special custom entities that hold an Ingest Strategy generated via the previous Setup steps (as JSON with all it's settings), a CSV with data imported from the original source (with UUIDs prepopulated if they were not provided by the user). These AMI sets are simpler and faster than \u201cbatch sets\u201d because they do not have a single entry per Object to be ingested. All data lives in a CSV. This means the CSV of an AMI set can be corrected and reuploaded. Users can then Process a Set either putting the to be ingested ADOs in the queue and let Hydroponics Service do the rest or directly via Batch on the UI. ADOs generated by a set can also be purged from there. These sets can also be created manually if needed of any of the chosen settings modified anytime. Which AMI set generated the Ingest is also tracked in a newly created ADO\u2019s JSON and any other extra data (or fixed data e.g common Rights statements, or LoD) can be provided by a Twig Template. Ingest is amazingly fast. We monitored Ingest with Remote URL(islandora Datastreams) files of 15Mbytes average at a speed of 2 seconds per Object (including all post processing) continuously for a set of 100+. Search and Replace This module also provides a simple search/replace text VBO action (handles JSON as text) and a full blown JSONPATCH VBO action to batch modify ADOs. The last one is extremely powerful permitting multiple operations at the same time with tests. E.g replace a certain value, add another value, remove another value only if a certain test (e.g \u201ctype\u201d:\u201dArticle\u201d and \u201cdate_of_digital\u201d: \u201c2020-09-09\u201d) matches. If any tests fail the whole operation will be canceled for that ADO. An incomplete \u201cWebform\u201d VBO action is present but not fully functional yet. This one allows you to choose a Webform, a certain element inside that Webform and then find and replace using the same Interface you would see while editing/adding a new ADO via the web form workflow. Should be ready by RC3. Please be aware that the version of AMI shipped with Archipelago 1.0.0-RC3 provides much of the core batch functions useful for getting started working with large amounts of content, but is not the full or final version of this module. This documentation page will be updated with successive AMI and Archipelago releases. Getting started with AMI You can access AMI through the AMI Sets tab on the main Content page found at /admin/content or directly at /amiset/list . Google Sheets API Congifuration If you plan on using the Google Sheets Importer option, you will need to Configure the Google Sheets API . Example Spreadsheet/CSV This spreadsheet can be used to import a small set of Digital Objects using the same assets part of the Two-Step Demo content ingest guide (these objects can also be found in the Archipelago Deployment repository ). https://docs.google.com/spreadsheets/d/10IAgDZ1_fGVd_2g1GyUYs0SrnkAfvVtTwukEaIEny5Y/edit?usp=sharing To use this spreadsheet, you can either download as a CSV file to use with the Spreadsheet Importer, or make a copy of this using your configured Google Sheets API account . Example JSON template This JSON template can be used during the Data Transformation (step 3) of your AMI Import. This particular template corresponds with the metadata elements found in the Default Descriptive Metadata and Default Digital Object Collection webforms shipped with Archipelago 1.0.0-RC3. Click to view the example 1.0.0-RC3 AMI JSON template To use this template, copy and paste the JSON below directly into a new Metadata Display, found here for a local http://localhost:8001/metadatadisplay/list or http://yoursite.org/metadatadisplay/list . Select JSON as the 'Primary mime type this Twig Template entity will generate as output' for this new Metadata Display. { \"type\": {{ data.type|json_encode|raw }}, \"label\": {{ data.label|json_encode|raw }}, \"issue_number\": {{ data.issue_number|json_encode|raw }}, \"interviewee\": {{ data.interviewee|json_encode|raw }}, \"interviewer\": {{ data.interviewer|json_encode|raw }}, \"duration\": {{ data.duration|json_encode|raw }}, \"website_url\": {{ data.website_url|json_encode|raw }}, \"description\": {{ data.description|json_encode|raw }}, \"date_created\": {{ data.date_created|json_encode|raw }}, \"creator\": {{ data.creator|json_encode|raw }}, \"creator_lod\": {{ data.creator_lod|json_encode|raw }}, \"publisher\": {{ data.publisher|json_encode|raw }}, \"language\": {{ data.language|json_encode|raw }}, \"ismemberof\": [], \"owner\": {{ data.owner|json_encode|raw }}, \"local_identifier\": {{ data.local_identifier|json_encode|raw }}, \"date_published\": {{ data.date_published|json_encode|raw }}, \"rights_statements\": {{ data.rights_statements|json_encode|raw }}, \"rights\": {{ data.rights|json_encode|raw }}, \"subject_loc\": {{ data.subject_loc|json_encode|raw }}, \"subject_lcnaf_personal_names\": {{ data.subject_lcnaf_personal_names|json_encode|raw }}, \"subject_lcnaf_corporate_names\": {{ data.subject_lcnaf_corporate_names|json_encode|raw }}, \"subject_lcnaf_geographic_names\": {{ data.subject_lcnaf_geographic_names|json_encode|raw }}, \"subject_lcgft_terms\": {{ data.subject_lcgft_terms|json_encode|raw }}, \"subject_wikidata\": {{ data.subject_wikidata|json_encode|raw }}, \"edm_agent\": {{ data.edm_agent|json_encode|raw }}, \"term_aat_getty\": {{ data.term_aat_getty|json_encode|raw }}, \"geographic_location\": {{ data.geographic_location|json_encode|raw }}, \"subjects_local_personal_names\": {{ data.subjects_local_personal_names|json_encode|raw }}, \"subjects_local\": {{ data.subjects_locals|json_encode|raw }}, \"audios\": [], \"images\": [], \"models\": [], \"videos\": [], \"documents\": [], \"as:generator\": { \"type\": \"Create\", \"actor\": { \"url\": {{ setURL|json_encode|raw }}, \"name\": \"ami\", \"type\": \"Service\" }, \"endTime\": \"{{\"now\"|date(\"c\")}}\", \"summary\": \"Generator\", \"@context\": \"https:\\/\\/www.w3.org\\/ns\\/activitystreams\" }, \"upload_associated_warcs\": [] } Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Archipelago Multi-Importer (AMI)"},{"location":"ami_index/#archipelago-multi-importer-ami","text":"Archipelago Multi-Importer (AMI) is a module for batch/bulk/mass ingests of Archipelago digital objects (ADOs) and collections. AMI also enables you to perform batch administrative actions, such as updating, patching/revising, or deleting digital objects and collections. AMI's Solr Importer plugin can be used to create AMI ingests and migrating content from existing Solr-sourcable digital repositories (such as Islandora 7).","title":"Archipelago Multi-Importer (AMI)"},{"location":"ami_index/#getting-started-with-ami","text":"You can access AMI through the AMI Sets tab on the main Content page found at /admin/content or directly at /amiset/list .","title":"Getting started with AMI"},{"location":"ami_index/#ami-overview-and-pre-release-notes-ami-010-archipelago-100-rc3","text":"From the desk of Diego Pino AMI provides Tabulated data ingest for ADOs with customizable input plugins. Each Spreadsheet (or Google Spreadsheet) goes through a Configuration Multi Step setup and generates at the end an AMI Set. AMI Sets then can be enqueued or directly ingested, its generated Objects purged and reingested again, its source data (generated and enriched with UUIDS) CSV replaced, improved and uploaded again and ingested. Click to read the full AMI 0.1.0 (Archipelago - 1.0.0-RC3) Pre-Release Notes.","title":"AMI Overview and Pre-Release Notes - AMI 0.1.0 (Archipelago - 1.0.0-RC3)"},{"location":"ami_index/#setup-steps","text":"AMI has Ingest, Update and Patch capabilities. AMI has a plugin system to fetch data. The data can come from multiple sources and right now (RC2) CSV/EXCEL or Google Spreadsheets are the ones enabled. Direct from Solr/OAI/API is on the works too for RC3. AMI can read files locally from the server, remotely from URLs or remotely from Private Backend Storage (S3). It does parent/children validation, makes sure that parents are ingested first, cleans broken relationships, allows arbitrary multi relations to be generated in a single ROW (ismemberof, partOf, etc) pointing to other rows or existing ADOs (via UUIDs) and can process rows directly as JSON or preprocessed via a Metadata Display entity (twig template) capable of producing JSON output. These templates can be configured by \u201ctype\u201d, Articles v/s 3DModel can have different ones. Even which columns contain Files can be configured at that level.","title":"Setup Steps"},{"location":"ami_index/#ami-set-entity","text":"Ami Sets are special custom entities that hold an Ingest Strategy generated via the previous Setup steps (as JSON with all it's settings), a CSV with data imported from the original source (with UUIDs prepopulated if they were not provided by the user). These AMI sets are simpler and faster than \u201cbatch sets\u201d because they do not have a single entry per Object to be ingested. All data lives in a CSV. This means the CSV of an AMI set can be corrected and reuploaded. Users can then Process a Set either putting the to be ingested ADOs in the queue and let Hydroponics Service do the rest or directly via Batch on the UI. ADOs generated by a set can also be purged from there. These sets can also be created manually if needed of any of the chosen settings modified anytime. Which AMI set generated the Ingest is also tracked in a newly created ADO\u2019s JSON and any other extra data (or fixed data e.g common Rights statements, or LoD) can be provided by a Twig Template. Ingest is amazingly fast. We monitored Ingest with Remote URL(islandora Datastreams) files of 15Mbytes average at a speed of 2 seconds per Object (including all post processing) continuously for a set of 100+.","title":"AMI Set Entity"},{"location":"ami_index/#search-and-replace","text":"This module also provides a simple search/replace text VBO action (handles JSON as text) and a full blown JSONPATCH VBO action to batch modify ADOs. The last one is extremely powerful permitting multiple operations at the same time with tests. E.g replace a certain value, add another value, remove another value only if a certain test (e.g \u201ctype\u201d:\u201dArticle\u201d and \u201cdate_of_digital\u201d: \u201c2020-09-09\u201d) matches. If any tests fail the whole operation will be canceled for that ADO. An incomplete \u201cWebform\u201d VBO action is present but not fully functional yet. This one allows you to choose a Webform, a certain element inside that Webform and then find and replace using the same Interface you would see while editing/adding a new ADO via the web form workflow. Should be ready by RC3. Please be aware that the version of AMI shipped with Archipelago 1.0.0-RC3 provides much of the core batch functions useful for getting started working with large amounts of content, but is not the full or final version of this module. This documentation page will be updated with successive AMI and Archipelago releases.","title":"Search and Replace"},{"location":"ami_index/#getting-started-with-ami_1","text":"You can access AMI through the AMI Sets tab on the main Content page found at /admin/content or directly at /amiset/list .","title":"Getting started with AMI"},{"location":"ami_index/#google-sheets-api-congifuration","text":"If you plan on using the Google Sheets Importer option, you will need to Configure the Google Sheets API .","title":"Google Sheets API Congifuration"},{"location":"ami_index/#example-spreadsheetcsv","text":"This spreadsheet can be used to import a small set of Digital Objects using the same assets part of the Two-Step Demo content ingest guide (these objects can also be found in the Archipelago Deployment repository ). https://docs.google.com/spreadsheets/d/10IAgDZ1_fGVd_2g1GyUYs0SrnkAfvVtTwukEaIEny5Y/edit?usp=sharing To use this spreadsheet, you can either download as a CSV file to use with the Spreadsheet Importer, or make a copy of this using your configured Google Sheets API account .","title":"Example Spreadsheet/CSV"},{"location":"ami_index/#example-json-template","text":"This JSON template can be used during the Data Transformation (step 3) of your AMI Import. This particular template corresponds with the metadata elements found in the Default Descriptive Metadata and Default Digital Object Collection webforms shipped with Archipelago 1.0.0-RC3. Click to view the example 1.0.0-RC3 AMI JSON template To use this template, copy and paste the JSON below directly into a new Metadata Display, found here for a local http://localhost:8001/metadatadisplay/list or http://yoursite.org/metadatadisplay/list . Select JSON as the 'Primary mime type this Twig Template entity will generate as output' for this new Metadata Display. { \"type\": {{ data.type|json_encode|raw }}, \"label\": {{ data.label|json_encode|raw }}, \"issue_number\": {{ data.issue_number|json_encode|raw }}, \"interviewee\": {{ data.interviewee|json_encode|raw }}, \"interviewer\": {{ data.interviewer|json_encode|raw }}, \"duration\": {{ data.duration|json_encode|raw }}, \"website_url\": {{ data.website_url|json_encode|raw }}, \"description\": {{ data.description|json_encode|raw }}, \"date_created\": {{ data.date_created|json_encode|raw }}, \"creator\": {{ data.creator|json_encode|raw }}, \"creator_lod\": {{ data.creator_lod|json_encode|raw }}, \"publisher\": {{ data.publisher|json_encode|raw }}, \"language\": {{ data.language|json_encode|raw }}, \"ismemberof\": [], \"owner\": {{ data.owner|json_encode|raw }}, \"local_identifier\": {{ data.local_identifier|json_encode|raw }}, \"date_published\": {{ data.date_published|json_encode|raw }}, \"rights_statements\": {{ data.rights_statements|json_encode|raw }}, \"rights\": {{ data.rights|json_encode|raw }}, \"subject_loc\": {{ data.subject_loc|json_encode|raw }}, \"subject_lcnaf_personal_names\": {{ data.subject_lcnaf_personal_names|json_encode|raw }}, \"subject_lcnaf_corporate_names\": {{ data.subject_lcnaf_corporate_names|json_encode|raw }}, \"subject_lcnaf_geographic_names\": {{ data.subject_lcnaf_geographic_names|json_encode|raw }}, \"subject_lcgft_terms\": {{ data.subject_lcgft_terms|json_encode|raw }}, \"subject_wikidata\": {{ data.subject_wikidata|json_encode|raw }}, \"edm_agent\": {{ data.edm_agent|json_encode|raw }}, \"term_aat_getty\": {{ data.term_aat_getty|json_encode|raw }}, \"geographic_location\": {{ data.geographic_location|json_encode|raw }}, \"subjects_local_personal_names\": {{ data.subjects_local_personal_names|json_encode|raw }}, \"subjects_local\": {{ data.subjects_locals|json_encode|raw }}, \"audios\": [], \"images\": [], \"models\": [], \"videos\": [], \"documents\": [], \"as:generator\": { \"type\": \"Create\", \"actor\": { \"url\": {{ setURL|json_encode|raw }}, \"name\": \"ami\", \"type\": \"Service\" }, \"endTime\": \"{{\"now\"|date(\"c\")}}\", \"summary\": \"Generator\", \"@context\": \"https:\\/\\/www.w3.org\\/ns\\/activitystreams\" }, \"upload_associated_warcs\": [] } Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Example JSON template"},{"location":"ami_spreadsheet_overview/","text":"Spreadsheet Formatting Overview There are multiple ways a spreadsheet/CSV file can be structured to work with AMI, depending on the data transformation and mapping you will be using. For most standard AMI ingests, each Row of your spreadsheet/CSV will correspond to a single Digital Object or Collection. Columns in your spreadsheet/CSV can be mapped to different data (files) and metadata elements (label, description, subjects, etc.). It is recommended that different types of files are placed into separate columns--\"images\", \"documents\", \"models\", \"videos\", \"audios\", \"text\". Filepaths can point to remote files, to existing files within your docker container, s3 (or other storage type/location that is accessible to Archipelago), and to paths within zip files. Example path for existing file within docker container: /var/www/html/d8content/myAMIimage.jpg Example s3 path: s3://myAMIuploads/myAMIdocument.pdf Example remote filepath: https://dogsaregreat.edu/dogs.tiff Multiple files (of the same type) can be placed in a single cell, separated by a semicolon ( ; ). For Digital Objects comprised of multiple types of files, such as an Oral History Interview with an audio file and a PDF transcript file, you can place different file types within different corresponding columns for the same Row. It is recommended that filepaths are copied/stored as plain (non hyperlinked) formatted text. Every spreadsheet/CSV file should contain the following Columns: type the Digital Object or Digital Object Collection Type, such as 'Photograph' or 'Collection' label the title of the Digital Object or Collection Soft-requirement node_uuid this can be empty if empty, Archipelago will automatically generate UUIDs can be used with existing UUIDs during migrations Recommended Columns: Files as defined above \"images\", \"documents\", \"models\", \"videos\", \"audios\", \"text\" .warc/.wacz files should be placed in a column \"upload_associated_warcs\" ismemberof and/or ispartof (and/or whatever predicate corresponds with the relationship you are mapping) these columns can be used to connect related objects using the object-to-object relationship that matches your needs these columns can hold 3 types of values empty (no value) an integer to connect an object to another object's corresponding row in the same spreadsheet/CSV Ex: Row 2 corresponds to a Digital Object Collection; for a Digital Object corresponding to Row 3, the 'ismemberof' column contains a value of '2'. The Digital Object in Row 3 would be ingested as a member of the Digital Object Collection in Row 2. a UUID to connect with an already ingested object Metadata - for all the rich, detailed information associated with your Digital Objects and Collections Every Column header will become a JSON Key and each cell a JSON value for that Key You can use direct JSON snippets such as: [{ \"uri\" : \"http://id.loc.gov/authorities/subjects/sh95008857\" , \"label\" : \"Digital libraries\" }] - If you have an advanced twig template with the necessary logic, you can place data in cells that can be parsed and structured in various ways (such as multiple values separated by semicolons split accordingly, capitalization of values based on defined patterns, etc.) Ingesting New Digital Objects using Spreadsheets or Google Sheets Click to view Instructions From either the main Content page or the AMI Sets List page, select the 'Start an AMI set' button to begin. Step 1: Plugin Selection Select the Plugin type you will be using from the dropdown menu. Google Sheets Importer Spreadsheet Importer (if using local CSV file) *The Remote JSON API Importer and additional remote import source options (for other repository systems) will be covered in separate tutorials following future releases. Step 2: Operation and Spreadsheet Source Selection Select 'Create New ADOs' as the Operation you would like to perform. If using Google Sheets Importer: Enter the ID of your Google Sheet Enter the Cell Range for your Google Sheet If using Spreadsheet Importer: Select 'Choose File' to upload the CSV you will be using. Step 3: Data Transformation Selections Select the data transformation approach--how your source data will be transformed into ADO (Archipelago Digital Object) Metadata. You will have 3 options for your data transformation approach: Direct Columns from your spreadsheet source will be cast directly to ADO metadata (JSON), without transformation/further processing (only intended for use with simple data strings). Custom (Expert Mode) Provides very granular custom data transformation and mapping options Needs to be used if importing Digital Objects and Digital Object Collections at the same time/from same spreadsheet source (see separate instructions below). Template Columns from your spreadsheet source will be cast to ADO metadata (JSON) using a Twig template setup for JSON output. You will also need to Select which columns contain filenames, entities or URLS where files can be fetched from. Select what columns correspond to the Digital Object types found in your spreadsheet source. Lastly, for this step, you will need to select the destination Fields and Bundles for your New ADOs. If your spreadsheet source only contains Digital Objects, select Strawberry (Descriptive Metadata source) for Digital Object If using Sheet 1 of the Demo AMI Ingest set (found above): Select Template and use the AMI Ingest JSON template that corresponds with your metadata elements. Select images , documents , and audios for the file source/fetching. Step 4: Global ADO Mappings Select your global ADO mappings. Even if empty (no values), select node_uuid and any relationship predicate columns (such as ismemberof ). By default, the option to automatically assigns UUIDs is selected. If you have existing UUIds, unselect this option. Select the corresponding Columns for the Required ADO mappings. If using Sheet 1 of the Demo AMI Ingest set (found above): Select both ismemberof and node_uuid for ADO Parent columns Keep 'Automatically assign UUID' checked Do not select any column for 'Sequence' Select the label column for ADO Label Step 5: ZIP upload Provide an optional ZIP file containing your assets. You may choose to upload a ZIP file containing all or some of the corresponding files specified in your csv/spreadsheet. The file upload size restrictions specified in your Archipelago instance will apply here (512MB maximum by default). Please note, when creating your ZIP file (in particular, within an OSX environment): only select the folders and files needed, not the top/enclosing folder they are in. Click to view screenshot of example ZIP file creation in OSX Step 6: AMI Set Confirmation You will now see a message letting you know that 'Your source data was saved and is available as a CSV at linktotheAMIgenerated.csv The message will also let you know that your New AMI Set was created and provide a link to the AMI Set page. Step 7: AMI Set Processing Your newly created AMI Set will now need to be Processed. If you clicked on the 'see it here' link in Step 6, you will be brought to the AMI Set page for review. From this page you can review the JSON configuration for your set (determined by your selections in the preceeding steps). To Process this set, navigate to the Process tab. You will have two options related to the Processing outcome for your AMI Set. Option 1: Select the \"Desired ADOS Statuses After Process\" for both Digital Objects (and Digital Object Collections, if also part of your ingest). The Statuses you have available will reflect the publication workflow/moderation states (such as Draft, Published, Archived/Unpublished) setup in your Archipelago instance, and the permissions associated your user account. Option 2: You may choose to check the option to 'Enqueue but do not process Batch' to place the AMI set in the Queue to Process. For the AMI version shipped with Archipelago 1.0.0-RC3, the option to 'Enqueue' for scheduled/future Processing should only be used if the Queue operations for your Archipelago instance are configured. Please return to this page for updated Enqueueing instructions that will accompany future releases. Select Confirm to continue. You may also select Process from the Operations menu for the AMI set from the main AMI sets page. If you chose to 'Confirm\" and Process your AMI Set immediately, proceed to Step 9: Processing and ADO Creation. Step 8: Queue Manager (if not Processing immediately) If you chose to place your AMI set in the Queue to Process in step 7, you may need to navigate to the Queue Manager found at /admin/config/system/queue-ui . (Be sure to select the Queue Manager under the System section, not the Queue Manager for Hydroponic Service under the Archipelago section). If the Queue operations for your Archipelago instance have been configured, you can simply leave your AMI Set in the Queue for Processing on the preconfigured schedule. To Process your AMI Set immediately from the Queue Manager page, select the checkbox next to the 'AMI Digital Object Ingester Queue Worker'. Keep the Action menu set to Batch Process and click the Apply to selected items button. Step 9: Processing and ADO Creation Your AMI set will now be Processed. You can follow the set's progress through the Processing queues loading screen. After your AMI set is Processed, you will receive confirmation messages letting you know your Digital Objects were successfully created. From this message, you can click on each ADO title to review the new created Digital Object (or Collection) if you wish. Or, you may proceed to step 10. Step 10: Review your newly created Digital Objects Return to the main Content page found at /admin/content and review your newly created Digital Objects. After ensuring that files and metadata elements were mapped correctly, you may choose to change the Status for your Digital Objects to 'Published'. Celebrate your AMI success with a fresh coffee, tea, or cookie! Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Spreadsheet Formatting Overview"},{"location":"ami_spreadsheet_overview/#spreadsheet-formatting-overview","text":"There are multiple ways a spreadsheet/CSV file can be structured to work with AMI, depending on the data transformation and mapping you will be using. For most standard AMI ingests, each Row of your spreadsheet/CSV will correspond to a single Digital Object or Collection. Columns in your spreadsheet/CSV can be mapped to different data (files) and metadata elements (label, description, subjects, etc.). It is recommended that different types of files are placed into separate columns--\"images\", \"documents\", \"models\", \"videos\", \"audios\", \"text\". Filepaths can point to remote files, to existing files within your docker container, s3 (or other storage type/location that is accessible to Archipelago), and to paths within zip files. Example path for existing file within docker container: /var/www/html/d8content/myAMIimage.jpg Example s3 path: s3://myAMIuploads/myAMIdocument.pdf Example remote filepath: https://dogsaregreat.edu/dogs.tiff Multiple files (of the same type) can be placed in a single cell, separated by a semicolon ( ; ). For Digital Objects comprised of multiple types of files, such as an Oral History Interview with an audio file and a PDF transcript file, you can place different file types within different corresponding columns for the same Row. It is recommended that filepaths are copied/stored as plain (non hyperlinked) formatted text. Every spreadsheet/CSV file should contain the following Columns: type the Digital Object or Digital Object Collection Type, such as 'Photograph' or 'Collection' label the title of the Digital Object or Collection Soft-requirement node_uuid this can be empty if empty, Archipelago will automatically generate UUIDs can be used with existing UUIDs during migrations Recommended Columns: Files as defined above \"images\", \"documents\", \"models\", \"videos\", \"audios\", \"text\" .warc/.wacz files should be placed in a column \"upload_associated_warcs\" ismemberof and/or ispartof (and/or whatever predicate corresponds with the relationship you are mapping) these columns can be used to connect related objects using the object-to-object relationship that matches your needs these columns can hold 3 types of values empty (no value) an integer to connect an object to another object's corresponding row in the same spreadsheet/CSV Ex: Row 2 corresponds to a Digital Object Collection; for a Digital Object corresponding to Row 3, the 'ismemberof' column contains a value of '2'. The Digital Object in Row 3 would be ingested as a member of the Digital Object Collection in Row 2. a UUID to connect with an already ingested object Metadata - for all the rich, detailed information associated with your Digital Objects and Collections Every Column header will become a JSON Key and each cell a JSON value for that Key You can use direct JSON snippets such as: [{ \"uri\" : \"http://id.loc.gov/authorities/subjects/sh95008857\" , \"label\" : \"Digital libraries\" }] - If you have an advanced twig template with the necessary logic, you can place data in cells that can be parsed and structured in various ways (such as multiple values separated by semicolons split accordingly, capitalization of values based on defined patterns, etc.)","title":"Spreadsheet Formatting Overview"},{"location":"ami_spreadsheet_overview/#ingesting-new-digital-objects-using-spreadsheets-or-google-sheets","text":"Click to view Instructions From either the main Content page or the AMI Sets List page, select the 'Start an AMI set' button to begin.","title":"Ingesting New Digital Objects using Spreadsheets or Google Sheets"},{"location":"ami_spreadsheet_overview/#step-1-plugin-selection","text":"Select the Plugin type you will be using from the dropdown menu. Google Sheets Importer Spreadsheet Importer (if using local CSV file) *The Remote JSON API Importer and additional remote import source options (for other repository systems) will be covered in separate tutorials following future releases.","title":"Step 1: Plugin Selection"},{"location":"ami_spreadsheet_overview/#step-2-operation-and-spreadsheet-source-selection","text":"Select 'Create New ADOs' as the Operation you would like to perform. If using Google Sheets Importer: Enter the ID of your Google Sheet Enter the Cell Range for your Google Sheet If using Spreadsheet Importer: Select 'Choose File' to upload the CSV you will be using.","title":"Step 2: Operation and Spreadsheet Source Selection"},{"location":"ami_spreadsheet_overview/#step-3-data-transformation-selections","text":"Select the data transformation approach--how your source data will be transformed into ADO (Archipelago Digital Object) Metadata. You will have 3 options for your data transformation approach: Direct Columns from your spreadsheet source will be cast directly to ADO metadata (JSON), without transformation/further processing (only intended for use with simple data strings). Custom (Expert Mode) Provides very granular custom data transformation and mapping options Needs to be used if importing Digital Objects and Digital Object Collections at the same time/from same spreadsheet source (see separate instructions below). Template Columns from your spreadsheet source will be cast to ADO metadata (JSON) using a Twig template setup for JSON output. You will also need to Select which columns contain filenames, entities or URLS where files can be fetched from. Select what columns correspond to the Digital Object types found in your spreadsheet source. Lastly, for this step, you will need to select the destination Fields and Bundles for your New ADOs. If your spreadsheet source only contains Digital Objects, select Strawberry (Descriptive Metadata source) for Digital Object If using Sheet 1 of the Demo AMI Ingest set (found above): Select Template and use the AMI Ingest JSON template that corresponds with your metadata elements. Select images , documents , and audios for the file source/fetching.","title":"Step 3: Data Transformation Selections"},{"location":"ami_spreadsheet_overview/#step-4-global-ado-mappings","text":"Select your global ADO mappings. Even if empty (no values), select node_uuid and any relationship predicate columns (such as ismemberof ). By default, the option to automatically assigns UUIDs is selected. If you have existing UUIds, unselect this option. Select the corresponding Columns for the Required ADO mappings. If using Sheet 1 of the Demo AMI Ingest set (found above): Select both ismemberof and node_uuid for ADO Parent columns Keep 'Automatically assign UUID' checked Do not select any column for 'Sequence' Select the label column for ADO Label","title":"Step 4: Global ADO Mappings"},{"location":"ami_spreadsheet_overview/#step-5-zip-upload","text":"Provide an optional ZIP file containing your assets. You may choose to upload a ZIP file containing all or some of the corresponding files specified in your csv/spreadsheet. The file upload size restrictions specified in your Archipelago instance will apply here (512MB maximum by default). Please note, when creating your ZIP file (in particular, within an OSX environment): only select the folders and files needed, not the top/enclosing folder they are in. Click to view screenshot of example ZIP file creation in OSX","title":"Step 5: ZIP upload"},{"location":"ami_spreadsheet_overview/#step-6-ami-set-confirmation","text":"You will now see a message letting you know that 'Your source data was saved and is available as a CSV at linktotheAMIgenerated.csv The message will also let you know that your New AMI Set was created and provide a link to the AMI Set page.","title":"Step 6: AMI Set Confirmation"},{"location":"ami_spreadsheet_overview/#step-7-ami-set-processing","text":"Your newly created AMI Set will now need to be Processed. If you clicked on the 'see it here' link in Step 6, you will be brought to the AMI Set page for review. From this page you can review the JSON configuration for your set (determined by your selections in the preceeding steps). To Process this set, navigate to the Process tab. You will have two options related to the Processing outcome for your AMI Set. Option 1: Select the \"Desired ADOS Statuses After Process\" for both Digital Objects (and Digital Object Collections, if also part of your ingest). The Statuses you have available will reflect the publication workflow/moderation states (such as Draft, Published, Archived/Unpublished) setup in your Archipelago instance, and the permissions associated your user account. Option 2: You may choose to check the option to 'Enqueue but do not process Batch' to place the AMI set in the Queue to Process. For the AMI version shipped with Archipelago 1.0.0-RC3, the option to 'Enqueue' for scheduled/future Processing should only be used if the Queue operations for your Archipelago instance are configured. Please return to this page for updated Enqueueing instructions that will accompany future releases. Select Confirm to continue. You may also select Process from the Operations menu for the AMI set from the main AMI sets page. If you chose to 'Confirm\" and Process your AMI Set immediately, proceed to Step 9: Processing and ADO Creation.","title":"Step 7: AMI Set Processing"},{"location":"ami_spreadsheet_overview/#step-8-queue-manager-if-not-processing-immediately","text":"If you chose to place your AMI set in the Queue to Process in step 7, you may need to navigate to the Queue Manager found at /admin/config/system/queue-ui . (Be sure to select the Queue Manager under the System section, not the Queue Manager for Hydroponic Service under the Archipelago section). If the Queue operations for your Archipelago instance have been configured, you can simply leave your AMI Set in the Queue for Processing on the preconfigured schedule. To Process your AMI Set immediately from the Queue Manager page, select the checkbox next to the 'AMI Digital Object Ingester Queue Worker'. Keep the Action menu set to Batch Process and click the Apply to selected items button.","title":"Step 8: Queue Manager (if not Processing immediately)"},{"location":"ami_spreadsheet_overview/#step-9-processing-and-ado-creation","text":"Your AMI set will now be Processed. You can follow the set's progress through the Processing queues loading screen. After your AMI set is Processed, you will receive confirmation messages letting you know your Digital Objects were successfully created. From this message, you can click on each ADO title to review the new created Digital Object (or Collection) if you wish. Or, you may proceed to step 10.","title":"Step 9: Processing and ADO Creation"},{"location":"ami_spreadsheet_overview/#step-10-review-your-newly-created-digital-objects","text":"Return to the main Content page found at /admin/content and review your newly created Digital Objects. After ensuring that files and metadata elements were mapped correctly, you may choose to change the Status for your Digital Objects to 'Published'. Celebrate your AMI success with a fresh coffee, tea, or cookie! Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Step 10: Review your newly created Digital Objects"},{"location":"annotations/","text":"Annotations in Archipelago Archipelago extends Annotorius to provide W3C-compliant Web Annotations for Digital Objects. These annotations can be added per image (when multiple), edited for text and shape adjustments, and saved/discarded using the regular Edit mode (bonus track 1: temp storage that persists when you log out and come back in to your session). Archipelago also exposes a full API for WebAnnotations, that keeps track of which Images (referenced in the Strawberryfield @ as:image ) were annotated and creates the W3C valid entries inside your Digital Object's JSON @ ap:annotationCollection (bonus track 2: multiple users can annotate the same resource, enabling digital scholarship collaboration opportunities). Important Note: For any image-based Digital Objects you would like to apply annotations to, the Digital Object type must be setup to display the image file(s) using the Open SeaDragon viewer. More information about about Managing Display Modes in Archipelago can be found here . Please stay tuned for updates announcing web annotation integration for Mirador 3. Enabling Annotations Navigate to Admin --> Structure --> Content types --> Digital Object --> Manage Display and select the \"Digital Object Full view\" mode. https://yoursite.org/admin/structure/types/manage/digital_object/display/digital_object_viewmode_fullitem On the \u201cFragola\u201d row, click on the small gear icon on the far right, which will be open the configurations for this display type. Select the \u201cEnable loading/editing of W3C webAnnotations\u201d option. Learn more about the JSON format of WebAnnotations here: https://www.w3.org/TR/annotation-model/#index-of-json-keys. Under \"What tool to enable\" , select either the Rectangular or Polygon (freehand drawing) tool for your annotation style. Select the 'Update' button. Also Save your settings using the button at the bottom of the page. You are now ready to get started adding annotations! Adding and Saving Annotations Navigate to the image-based Digital Object you would like to apply annotations to. To add a new annotation, select and hold the Shift key. Click and then drag to apply either a Rectangular box or multi-point Polygon shape. Double click to exit the annotation drawing mode. Enter the text for your annotation in the pop-up window. Click the \"Ok\" button when you are ready. To save your annotation (or annotations if you created multiple), navigate to the main Digital Object \"Edit\" tab, where you will see a message about Unsaved Web Annotation Changes. Select \"Save\" to preserve your Annotation(s). They will now become part of your Digital Object's JSON, found under the ap:annotationCollection key. Pressing the \"Discard\" button will discard only the unsaved Annotations, and will reload the page. Editing and Deleting Annotations Navigate to the image-based Digital Object you would whose annotation(s) you want to edit or delete. Click within the Annotation and select the downwards arrow in the upper right-hand corner of the pop-up window. Select either the \"Edit\" option and Edit the Annotation as desired; Or select the \"Delete\" option. To preserve your editing or deleting actions, navigate to the main Digital Object \"Edit\" tab, where you will see a message about Unsaved Web Annotation Changes. (See screenshot in Step 6 of Adding and saving Annotations above.) Select \"Save\" to preserve your Annotation(s) edits or deletions. Pressing the \"Discard\" button will discard only the unsaved Annotations changes, and will reload the page. Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Annotations"},{"location":"annotations/#annotations-in-archipelago","text":"Archipelago extends Annotorius to provide W3C-compliant Web Annotations for Digital Objects. These annotations can be added per image (when multiple), edited for text and shape adjustments, and saved/discarded using the regular Edit mode (bonus track 1: temp storage that persists when you log out and come back in to your session). Archipelago also exposes a full API for WebAnnotations, that keeps track of which Images (referenced in the Strawberryfield @ as:image ) were annotated and creates the W3C valid entries inside your Digital Object's JSON @ ap:annotationCollection (bonus track 2: multiple users can annotate the same resource, enabling digital scholarship collaboration opportunities). Important Note: For any image-based Digital Objects you would like to apply annotations to, the Digital Object type must be setup to display the image file(s) using the Open SeaDragon viewer. More information about about Managing Display Modes in Archipelago can be found here . Please stay tuned for updates announcing web annotation integration for Mirador 3.","title":"Annotations in Archipelago"},{"location":"annotations/#enabling-annotations","text":"Navigate to Admin --> Structure --> Content types --> Digital Object --> Manage Display and select the \"Digital Object Full view\" mode. https://yoursite.org/admin/structure/types/manage/digital_object/display/digital_object_viewmode_fullitem On the \u201cFragola\u201d row, click on the small gear icon on the far right, which will be open the configurations for this display type. Select the \u201cEnable loading/editing of W3C webAnnotations\u201d option. Learn more about the JSON format of WebAnnotations here: https://www.w3.org/TR/annotation-model/#index-of-json-keys. Under \"What tool to enable\" , select either the Rectangular or Polygon (freehand drawing) tool for your annotation style. Select the 'Update' button. Also Save your settings using the button at the bottom of the page. You are now ready to get started adding annotations!","title":"Enabling Annotations"},{"location":"annotations/#adding-and-saving-annotations","text":"Navigate to the image-based Digital Object you would like to apply annotations to. To add a new annotation, select and hold the Shift key. Click and then drag to apply either a Rectangular box or multi-point Polygon shape. Double click to exit the annotation drawing mode. Enter the text for your annotation in the pop-up window. Click the \"Ok\" button when you are ready. To save your annotation (or annotations if you created multiple), navigate to the main Digital Object \"Edit\" tab, where you will see a message about Unsaved Web Annotation Changes. Select \"Save\" to preserve your Annotation(s). They will now become part of your Digital Object's JSON, found under the ap:annotationCollection key. Pressing the \"Discard\" button will discard only the unsaved Annotations, and will reload the page.","title":"Adding and Saving Annotations"},{"location":"annotations/#editing-and-deleting-annotations","text":"Navigate to the image-based Digital Object you would whose annotation(s) you want to edit or delete. Click within the Annotation and select the downwards arrow in the upper right-hand corner of the pop-up window. Select either the \"Edit\" option and Edit the Annotation as desired; Or select the \"Delete\" option. To preserve your editing or deleting actions, navigate to the main Digital Object \"Edit\" tab, where you will see a message about Unsaved Web Annotation Changes. (See screenshot in Step 6 of Adding and saving Annotations above.) Select \"Save\" to preserve your Annotation(s) edits or deletions. Pressing the \"Discard\" button will discard only the unsaved Annotations changes, and will reload the page. Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Editing and Deleting Annotations"},{"location":"archifilepersistencestrategy/","text":"Archipelago's File Persistence Strategy How are files for Archipelago Digital Objects (ADOs) persisted? (What happens with those fishtanks?) A few Event Subscribers/Data describing logics happen in a certain order: User Uploads via a webform Element a new File or via Drush/Batch ingest that attaches (via JSONAPI) a file. If the webform is involved, Archipelago acts quickly and calls directly (before the Node even exists) the file classifier, that will: Add/complement a as:somefiletype JSON structure into the main ADO SBF JSON , with info about the file, checksums, size, Drupal fids, uuid, etc. This is a heavy function part of the StrawberryfieldFilePersisterService . It does a lot, making use of optimized logic, but may do more in the future to handle too-many/too-big files needs (FYI: solution will be simple, add to a queue and process later). The most (yes) important info added here is the desired future storage location of the file. The user finishes the form, saves and and confirms the ADO creation, and finally all the Node events fire. On presave StrawberryfieldEventPresaveSubscriberAsFileStructureGenerator runs and checks if 2.1 already was processed. This is needed since the user could have triggered an ingest via drush/JSONAPI/Webhooks etc. If all is well (this is a less expensive check) Archipelago continues. On presave (next) StrawberryfieldEventPresaveSubscriberFilePersister runs, checking all TEMPORARY files described in as:somefiletype and actually copying them to the right \"desired\" location. And on Save StrawberryfieldEventInsertFileUsageUpdater also marking the file as \"being\" used by a Strawberry driven Node (different Event). Note: Anytime we remove directly from the raw JSON a full as:somefiletype structure of a sub-element from an as:structure we force Archipelago to do all the above again, and Archipelago can regenerate technical metadata. This has been used when updating EXIF binaries or even when something went wrong (while testing, but this stuff is safe no worries). Eventually, there will be a BIG red button that does that if you do not like JSON editing. Discussions related to Archipelago's file persistence strategy and planned potential strategies can be be found here: Strawberryfield Issues: 107 , and here: Strawberryfield Issues: 76 . This page will be updated with additional information following future developments. Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Archipelago's File Persistence Strategy"},{"location":"archifilepersistencestrategy/#archipelagos-file-persistence-strategy","text":"","title":"Archipelago's File Persistence Strategy"},{"location":"archifilepersistencestrategy/#how-are-files-for-archipelago-digital-objects-ados-persisted-what-happens-with-those-fishtanks","text":"A few Event Subscribers/Data describing logics happen in a certain order: User Uploads via a webform Element a new File or via Drush/Batch ingest that attaches (via JSONAPI) a file. If the webform is involved, Archipelago acts quickly and calls directly (before the Node even exists) the file classifier, that will: Add/complement a as:somefiletype JSON structure into the main ADO SBF JSON , with info about the file, checksums, size, Drupal fids, uuid, etc. This is a heavy function part of the StrawberryfieldFilePersisterService . It does a lot, making use of optimized logic, but may do more in the future to handle too-many/too-big files needs (FYI: solution will be simple, add to a queue and process later). The most (yes) important info added here is the desired future storage location of the file. The user finishes the form, saves and and confirms the ADO creation, and finally all the Node events fire. On presave StrawberryfieldEventPresaveSubscriberAsFileStructureGenerator runs and checks if 2.1 already was processed. This is needed since the user could have triggered an ingest via drush/JSONAPI/Webhooks etc. If all is well (this is a less expensive check) Archipelago continues. On presave (next) StrawberryfieldEventPresaveSubscriberFilePersister runs, checking all TEMPORARY files described in as:somefiletype and actually copying them to the right \"desired\" location. And on Save StrawberryfieldEventInsertFileUsageUpdater also marking the file as \"being\" used by a Strawberry driven Node (different Event). Note: Anytime we remove directly from the raw JSON a full as:somefiletype structure of a sub-element from an as:structure we force Archipelago to do all the above again, and Archipelago can regenerate technical metadata. This has been used when updating EXIF binaries or even when something went wrong (while testing, but this stuff is safe no worries). Eventually, there will be a BIG red button that does that if you do not like JSON editing. Discussions related to Archipelago's file persistence strategy and planned potential strategies can be be found here: Strawberryfield Issues: 107 , and here: Strawberryfield Issues: 76 . This page will be updated with additional information following future developments. Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"How are files for Archipelago Digital Objects (ADOs) persisted? (What happens with those fishtanks?)"},{"location":"archipelago-deployment-live/","text":"archipelago-deployment-live https://github.com/esmero/archipelago-deployment-live A Cloud / Local production ready Archipelago Deployment using Docker and soon Kubernetes. What is this repo for? Running Archipelago Commons on a live public instance using SSL with Blob/Object Storage backend Cloud based deployment. E.g AWS/Azure under Linux Self managed servers running Linux x86/AMD86 or ARM64/v8 CPU architectures What is this repo not for? Running your own local/development Archipelago. For that we suggest using https://github.com/esmero/archipelago-deployment Requirements Minimal 4 Gbytes of RAM (e.g AWS EC2 t3.medium) 2 CPUs, Single SSD Drive of 100 Gbytes Recommend base line 8 Gbytes of RAM (AWS EC2 t3.medium) 2 CPUs, Single SSD Drive of 100 Gbytes, optional: one magnetic Drive of 500 Gbytes for Caches/Temp files/Backups. Good for all large repository 16 Gbytes of RAM (AWS EC2 m6g.xlarge - Graviton) 4 CPUs, Single SSD Drive of 200 Gbytes, optional: one magnetic Drive of 1TB for Caches/Temp files/Backups. OS: Ubuntu 20.04 /Amazon Linux 2/Debian 10.9 / AlmaLinux (Centos replacement) matching your CPU archicture (of course) Most recent Docker running as a service and docker-compose Basic Unix/Linux terminal skills and a root/sudo account Deployment on Linux/X86/AMD system Step 1: Deploy your base system Make sure your Firewall/AWS Security group has these ports open for everyone to access 443 (NGINX SSL) 80 (NGINX HTTP) And protected/modally open for your own development/testing/administration 8183 (Cantaloupe) 8983 (Solr) 6400 (NLP64) 9000 (Minio) 22 (so you can ssh into your machine) Setup your system using your favorite package manager with Docker git htop tree docker-compose e.g for Amazon Linux 2 (x86/amd64)these steps are tested: sudo yum update -y sudo amazon-linux-extras install docker sudo yum install -y docker sudo service docker start sudo usermod -a -G docker ec2-user sudo chkconfig docker on sudo systemctl enable docker sudo yum install -y git htop tree sudo curl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose- $( uname -s ) - $( uname -m ) \" -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose sudo reboot Note: To install docker-compose on AWS Linux 2 on arm64 architecture execute sudo curl -L --fail https://raw.githubusercontent.com/linuxserver/docker-docker-compose/master/run.sh -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose Reboot is needed to allow Docker to take full control over your OS resources. Step 2: In your location of choice clone this repo git clone https://github.com/esmero/archipelago-deployment-live cd archipelago-deployment-live git checkout 1 .0.0-RC3 Step 3. Setup your enviromental variables for Docker/Services Setup Enviromentals Setup your deployment enviromental variables by copying the template cp deploy/ec2-docker/.env.template deploy/ec2-docker/.env and editing it nano deploy/ec2-docker/.env The content of that file would be similar to this. ARCHIPELAGO_ROOT=/home/ec2-user/archipelago-deployment-live ARCHIPELAGO_EMAIL=your@validemail.org ARCHIPELAGO_DOMAIN=your.domain.org MINIO_ACCESS_KEY=THE_S3_AZURE_OR_LOCAL_MINIO_KEY MINIO_SECRET_KEY=THE_S3_AZURE_OR_LOCAL_MINIO_SECRET MYSQL_ROOT_PASSWORD=YOUR_MYSQL_PASSWORD_FOR_ARCHIPELAGO MINIO_BUCKET_MEDIA=THE_NAME_OF_YOUR_S3_BUCKET_FOR_PERSISTEN_STORAGE MINIO_FOLDER_PREFIX_MEDIA=media/ MINIO_BUCKET_CACHE=THE_NAME_OF_YOUR_S3_BUCKET_FOR_IIIF_STORAGE MINIO_FOLDER_PREFIX_CACHE=iiifcache/ What does each key mean? ARCHIPELAGO_ROOT : the absolute path to your archipelago-deployment-live git repo in your host machine. ARCHIPELAGO_EMAIL : a valid email , will be used to register your SSL Certificate via Certbot. ARCHIPELAGO_DOMAIN : a valid domain name for your repository. If not using your own it may be one provided by your Cloud provider. e.g http://ec2-xx-xxx-xxx-xx.compute-1.amazonaws.com. This domain will be also used to request your SSL Certificate via Certbot. MINIO_ACCESS_KEY : If you are running a Cloud Service backed S3/Azure Storage this needs to be generated there. The user/IAM owner of this ACCESS KEY needs to have access to read/write the bucket you will configure in this same .env . If running local min.io whatever you set will be used. MINIO_SECRET_KEY : If you are running a Cloud Service backed S3/Azure Storage this needs to generated there. The user/IAM owner of the matching SECRET_KEY needs to have access to read/write the bucket you will configure in this same .env file. If running local min.io whatever you set will be used. MYSQL_ROOT_PASSWORD : The MYSQL 8 or Mariadb 15 password. This password will be used later also during Drupal deployment via drush MINIO_BUCKET_MEDIA : The name of your Persistant Storage Bucket. If using mini.io local we recommend keeping it simple. E.g archipelago MINIO_FOLDER_PREFIX_MEDIA : The folder (a prefix really) where your DO Storage and File storage will go inside the MINIO_BUCKET_MEDIA Bucket. media/ is a fine name for this one and common in archipelago deployments. MINIO_BUCKET_CACHE : The name of your IIIF Cache storage Bucket. May be the same as MINIO_BUCKET_MEDIA . If different make sure your your MINIO_ACCESS_KEY and/or IAM role ACL have permission to read write to this one too. MINIO_FOLDER_PREFIX_CACHE : The folder (a prefix really) where Cantaloupe will/can write its iiif caches. iiifcache/ is a lovely name we use a lot. IMPORTANT NOTE : For AWS EC2. If your selected an IAM role for your server when setting it up/deploying it, min.io will use the AWS EC2 backed internal API to request access to your S3. This means the ROLE itself needs to have read/write access (ACL) to the given Bucket(s) and your key/secrets won't be able to override that. Please do not ignore this note. It will save you a LOT of frustration and coffee. You can also run an EC2 instace without a given IAM and in that case just the ACCESS_KEY/SECRET will matter. Now that you know, you also know that these values should be not shared and this .env file should not commited/kept in version control. Please be careful. docker-compose will read this .env and start all services for you based on its content. Once you have modified this you are ready for your first big decision. Running a fully qualified domain you wish a valid/signed certificate for AMD/INTEL Architecture? This means you will use the docker-compose-aws-s3.yml . Do the following cp deploy/ec2-docker/docker-compose-aws-s3.yml deploy/ec2-docker/docker-compose.yml Running a fully qualified domain you wish a valid/signed certificate for ARM64/Apple M1 Architecture? This means you will use the docker-compose-aws-s3-arm64.yml . Do the following cp deploy/ec2-docker/docker-compose-aws-s3-arm64.yml deploy/ec2-docker/docker-compose.yml Optional (expert) extra domains (does not apply to ARM64/Apple M1 Architecture): If you have more than a single domain you may create a text file inside config_storage/nginxconfig/certbot_extra_domains/your.domain.org and write for each subdomain there an entry/line. OR Running self-signed? (optional and does not apply to ARM64/Apple M1 Architecture): Only if you are not running a fully qualified domain you wish a valid/signed Generate a self signed Cert sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout data_storage/selfcert/private/nginx.key -out data_storage/selfcert/certs/nginx.crt sudo openssl dhparam -out data_storage/selfcert/dhparam.pem 4096 cp deploy/ec2-docker/docker-compose-selfsigned.yml deploy/ec2-docker/docker-compose.yml Note: Self signed docker-compose.yml file is setup to use min.io with local storage volumes : - ${ARCHIPELAGO_ROOT}/data_storage/minio-data:/data:cached This folder will be created by min.io. If you are using a secondary Drive (e.g magnetic) you can modify your deploy/ec2-docker/docker-compose.yml to use a folder there e.g . volumes : - /persistentinotherdrive/data_storage/minio-data:/data:cached Make sure your logged in user can read/write to it. NOTE: If you want to use AWS S3 storage for the self signed version replace the minio Service YAML block with this Service Block in your new deploy/ec2-docker/docker-compose.yml . You can mix and match services and even remove all :cached statements for improved R/W volumen performance. Step 4. First Run First Permissions sudo chown -R 100 :100 data_storage/iiifcache sudo chown -R 8983 :8983 data_storage/solrcore Actual first run Time to spin our docker containers for the first time. We will start all without going into background so log/error checking is easier. Specially if you have selected a Valid/Signed Cert choice and also want to be sure S3 keys/access are working cd deploy/ec2-docker docker-compose up You will see a lot of things happening. Check for errors/problems/clear alerts and give all a minute or so to start. Ok, let's assume your setup managed to request a valid signed SSL cert, you will see a nice message! - Congratulations! Your certificate and chain have been saved at:XXXXX Your certificate will expire on 20XX-XX-XX. To obtain a new or tweaked version of this certificate in the future, simply run certbot again. To non-interactively renew *all* of your certificates, run \"certbot renew\" Archipelago will do that for you whenever its about to expire so no need to deal with this manually. Even when docker-compose restarts Now press CTRL+C. docker-compose will shutdown gracefully. Good! Step 5. Deploy Drupal Composer and Drupal Copy the shipped default composer.default.json to composer.json (ONLY if you are installing from scratch) cp ../../drupal/composer.default.json ../../drupal/composer.json Start Docker again docker-compose up -d Wait a few seconds and run docker exec -ti esmero-php bash -c \"chown -R www-data:www-data private\" docker exec -ti esmero-php bash -c \"composer install\" Composer install will take a little while and bring all your PHP libraries. Once done, execute our setup script that will prepare your Drupal settings.php and bring some of the .env enviromental variables to the Drupal environment. docker exec -ti esmero-php bash -c 'scripts/archipelago/setup.sh' And now you can deploy Drupal! IMPORTANT: Make sure you replace in the following command inside root:MYSQL_ROOT_PASSWORD the MYSQL_ROOT_PASSWORD string with the value you used/assigned in your .env file for MYSQL_ROOT_PASSWORD . And replace ADMIN_PASSWORD with a password that is safe and you won't forget! That passwords is for your Drupal super user (uid:0). docker exec -ti esmero-php bash -c \"cd web;../vendor/bin/drush -y si --verbose config_installer config_installer_sync_configure_form.sync_directory=/var/www/html/config/sync/ --db-url=mysql://root:MYSQL_ROOT_PASSWORD@esmero-db/drupal8 --account-name=admin --account-pass=ADMIN_PASSWORD -r=/var/www/html/web --sites-subdir=default --notify=false install_configure_form.enable_update_status_module=NULL install_configure_form.enable_update_status_emails=NULL;drush cr;chown -R www-data:www-data sites;\" Step 6. Users and initial Content. After installation is done (may take a few) you can install initial users and assign them roles: docker exec -ti esmero-php bash -c 'drush ucrt demo --password=\"demo\"; drush urol metadata_pro \"demo\"' docker exec -ti esmero-php bash -c 'drush ucrt jsonapi --password=\"jsonapi\"; drush urol metadata_api \"jsonapi\"' Before ingesting the base content we need to make sure we can access your JSON-API on for your new domain. That means we need to change internal urls ( https://esmero-web ) to the new valid SSL driven ones. This is easy: On your host machine (no need to docker exec these ones), replace first in the following command your.domain.org with the domain you setup in your .env file. Go to your base git clone folder and then run sed -i 's/http:\\/\\/esmero-web/https:\\/\\/your.domain.org/g' drupal/scripts/archipelago/deploy.sh sed -i 's/http:\\/\\/esmero-web/https:\\/\\/your.domain.org/g' drupal/scripts/archipelago/update_deployed.sh Now your deploy.sh and update_deployed.sh are update and ready. Let's ingest some Twig Templates, an AMI Set, menus and a Blocks. docker exec -ti esmero-php bash -c 'scripts/archipelago/deploy.sh' NOTE: update_deployed.sh is not needed when deploying for the first time and totally discouraged on a customized Archipelago. If you make modifications to your Twig templates , that command will replace the ones shipped by us with fresh copies overwriting all your modifications. Only run to restore larger errors or when needing to update non-customized ones with newer versions. Step 7. Set your public IIIF server URL to your actual domain By default archipelago ships with a public facing and an internal facing IIIF Server URLs configured. These urls are used by a number of IIIF enabled viewers and need to be changed to reflect your new reality (a real Domain name and a proxied path!). These settings belong to the strawberryfield/format_strawberryfield module. First check your current settings: docker exec -ti esmero-php bash -c \"drush config-get format_strawberryfield.iiif_settings\" You will see the following: pub_server_url: 'http://localhost:8183/iiif/2' int_server_url: 'http://esmero-cantaloupe:8182/iiif/2' Let's modify pub_server_url . Replace in the following command your.domain.org with the domain you defined in your .env file. NOTE: We are passing the -y flag to drush avoid that way having to answer \"yes\". docker exec -ti esmero-php bash -c \"drush -y config-set format_strawberryfield.iiif_settings pub_server_url https://your.domain.org/cantaloupe/iiif/2\" Finally Done! Now you can log into your new Archipelago using https and start exploring. Thank you for following this guide! Deployment on ARM64/v8(Graviton, Apple M1) system: This applies to AWS m6g and t3g Instances and is documented inline in this guide. Please open an ISSUE in this repository if you run into any problems. Please review https://github.com/esmero/archipelago-deployment-live/blob/1.0.0-RC3/deploy/ec2-docker/docker-compose-aws-s3-arm64.yml for more info How do I know my Architecture? Run uname -m For an x86(64 bit) processor system output will be x86_64 For an ARM(64 bit) processor system output will be aarch64 Caring & Coding + Fixing + Testing Diego Pino Giancarlo Birello Allison Lund Albert Min Acknowledgments This software is a Metropolitan New York Library Council Open-Source initiative and part of the Archipelago Commons project. License GPLv3","title":"Deployment"},{"location":"archipelago-deployment-live/#archipelago-deployment-live","text":"https://github.com/esmero/archipelago-deployment-live A Cloud / Local production ready Archipelago Deployment using Docker and soon Kubernetes.","title":"archipelago-deployment-live"},{"location":"archipelago-deployment-live/#what-is-this-repo-for","text":"Running Archipelago Commons on a live public instance using SSL with Blob/Object Storage backend Cloud based deployment. E.g AWS/Azure under Linux Self managed servers running Linux x86/AMD86 or ARM64/v8 CPU architectures","title":"What is this repo for?"},{"location":"archipelago-deployment-live/#what-is-this-repo-not-for","text":"Running your own local/development Archipelago. For that we suggest using https://github.com/esmero/archipelago-deployment","title":"What is this repo not for?"},{"location":"archipelago-deployment-live/#requirements","text":"","title":"Requirements"},{"location":"archipelago-deployment-live/#minimal","text":"4 Gbytes of RAM (e.g AWS EC2 t3.medium) 2 CPUs, Single SSD Drive of 100 Gbytes","title":"Minimal"},{"location":"archipelago-deployment-live/#recommend-base-line","text":"8 Gbytes of RAM (AWS EC2 t3.medium) 2 CPUs, Single SSD Drive of 100 Gbytes, optional: one magnetic Drive of 500 Gbytes for Caches/Temp files/Backups.","title":"Recommend base line"},{"location":"archipelago-deployment-live/#good-for-all-large-repository","text":"16 Gbytes of RAM (AWS EC2 m6g.xlarge - Graviton) 4 CPUs, Single SSD Drive of 200 Gbytes, optional: one magnetic Drive of 1TB for Caches/Temp files/Backups.","title":"Good for all large repository"},{"location":"archipelago-deployment-live/#os","text":"Ubuntu 20.04 /Amazon Linux 2/Debian 10.9 / AlmaLinux (Centos replacement) matching your CPU archicture (of course) Most recent Docker running as a service and docker-compose Basic Unix/Linux terminal skills and a root/sudo account","title":"OS:"},{"location":"archipelago-deployment-live/#deployment-on-linuxx86amd-system","text":"","title":"Deployment on Linux/X86/AMD system"},{"location":"archipelago-deployment-live/#step-1","text":"Deploy your base system Make sure your Firewall/AWS Security group has these ports open for everyone to access 443 (NGINX SSL) 80 (NGINX HTTP) And protected/modally open for your own development/testing/administration 8183 (Cantaloupe) 8983 (Solr) 6400 (NLP64) 9000 (Minio) 22 (so you can ssh into your machine) Setup your system using your favorite package manager with Docker git htop tree docker-compose e.g for Amazon Linux 2 (x86/amd64)these steps are tested: sudo yum update -y sudo amazon-linux-extras install docker sudo yum install -y docker sudo service docker start sudo usermod -a -G docker ec2-user sudo chkconfig docker on sudo systemctl enable docker sudo yum install -y git htop tree sudo curl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose- $( uname -s ) - $( uname -m ) \" -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose sudo reboot Note: To install docker-compose on AWS Linux 2 on arm64 architecture execute sudo curl -L --fail https://raw.githubusercontent.com/linuxserver/docker-docker-compose/master/run.sh -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose Reboot is needed to allow Docker to take full control over your OS resources.","title":"Step 1:"},{"location":"archipelago-deployment-live/#step-2","text":"In your location of choice clone this repo git clone https://github.com/esmero/archipelago-deployment-live cd archipelago-deployment-live git checkout 1 .0.0-RC3","title":"Step 2:"},{"location":"archipelago-deployment-live/#step-3-setup-your-enviromental-variables-for-dockerservices","text":"","title":"Step 3. Setup your enviromental variables for Docker/Services"},{"location":"archipelago-deployment-live/#setup-enviromentals","text":"Setup your deployment enviromental variables by copying the template cp deploy/ec2-docker/.env.template deploy/ec2-docker/.env and editing it nano deploy/ec2-docker/.env The content of that file would be similar to this. ARCHIPELAGO_ROOT=/home/ec2-user/archipelago-deployment-live ARCHIPELAGO_EMAIL=your@validemail.org ARCHIPELAGO_DOMAIN=your.domain.org MINIO_ACCESS_KEY=THE_S3_AZURE_OR_LOCAL_MINIO_KEY MINIO_SECRET_KEY=THE_S3_AZURE_OR_LOCAL_MINIO_SECRET MYSQL_ROOT_PASSWORD=YOUR_MYSQL_PASSWORD_FOR_ARCHIPELAGO MINIO_BUCKET_MEDIA=THE_NAME_OF_YOUR_S3_BUCKET_FOR_PERSISTEN_STORAGE MINIO_FOLDER_PREFIX_MEDIA=media/ MINIO_BUCKET_CACHE=THE_NAME_OF_YOUR_S3_BUCKET_FOR_IIIF_STORAGE MINIO_FOLDER_PREFIX_CACHE=iiifcache/ What does each key mean? ARCHIPELAGO_ROOT : the absolute path to your archipelago-deployment-live git repo in your host machine. ARCHIPELAGO_EMAIL : a valid email , will be used to register your SSL Certificate via Certbot. ARCHIPELAGO_DOMAIN : a valid domain name for your repository. If not using your own it may be one provided by your Cloud provider. e.g http://ec2-xx-xxx-xxx-xx.compute-1.amazonaws.com. This domain will be also used to request your SSL Certificate via Certbot. MINIO_ACCESS_KEY : If you are running a Cloud Service backed S3/Azure Storage this needs to be generated there. The user/IAM owner of this ACCESS KEY needs to have access to read/write the bucket you will configure in this same .env . If running local min.io whatever you set will be used. MINIO_SECRET_KEY : If you are running a Cloud Service backed S3/Azure Storage this needs to generated there. The user/IAM owner of the matching SECRET_KEY needs to have access to read/write the bucket you will configure in this same .env file. If running local min.io whatever you set will be used. MYSQL_ROOT_PASSWORD : The MYSQL 8 or Mariadb 15 password. This password will be used later also during Drupal deployment via drush MINIO_BUCKET_MEDIA : The name of your Persistant Storage Bucket. If using mini.io local we recommend keeping it simple. E.g archipelago MINIO_FOLDER_PREFIX_MEDIA : The folder (a prefix really) where your DO Storage and File storage will go inside the MINIO_BUCKET_MEDIA Bucket. media/ is a fine name for this one and common in archipelago deployments. MINIO_BUCKET_CACHE : The name of your IIIF Cache storage Bucket. May be the same as MINIO_BUCKET_MEDIA . If different make sure your your MINIO_ACCESS_KEY and/or IAM role ACL have permission to read write to this one too. MINIO_FOLDER_PREFIX_CACHE : The folder (a prefix really) where Cantaloupe will/can write its iiif caches. iiifcache/ is a lovely name we use a lot. IMPORTANT NOTE : For AWS EC2. If your selected an IAM role for your server when setting it up/deploying it, min.io will use the AWS EC2 backed internal API to request access to your S3. This means the ROLE itself needs to have read/write access (ACL) to the given Bucket(s) and your key/secrets won't be able to override that. Please do not ignore this note. It will save you a LOT of frustration and coffee. You can also run an EC2 instace without a given IAM and in that case just the ACCESS_KEY/SECRET will matter. Now that you know, you also know that these values should be not shared and this .env file should not commited/kept in version control. Please be careful. docker-compose will read this .env and start all services for you based on its content. Once you have modified this you are ready for your first big decision.","title":"Setup Enviromentals"},{"location":"archipelago-deployment-live/#running-a-fully-qualified-domain-you-wish-a-validsigned-certificate-for-amdintel-architecture","text":"This means you will use the docker-compose-aws-s3.yml . Do the following cp deploy/ec2-docker/docker-compose-aws-s3.yml deploy/ec2-docker/docker-compose.yml","title":"Running a fully qualified domain you wish a valid/signed certificate for AMD/INTEL Architecture?"},{"location":"archipelago-deployment-live/#running-a-fully-qualified-domain-you-wish-a-validsigned-certificate-for-arm64apple-m1-architecture","text":"This means you will use the docker-compose-aws-s3-arm64.yml . Do the following cp deploy/ec2-docker/docker-compose-aws-s3-arm64.yml deploy/ec2-docker/docker-compose.yml","title":"Running a fully qualified domain you wish a valid/signed certificate for ARM64/Apple M1 Architecture?"},{"location":"archipelago-deployment-live/#optional-expert-extra-domains-does-not-apply-to-arm64apple-m1-architecture","text":"If you have more than a single domain you may create a text file inside config_storage/nginxconfig/certbot_extra_domains/your.domain.org and write for each subdomain there an entry/line.","title":"Optional (expert) extra domains (does not apply to ARM64/Apple M1 Architecture):"},{"location":"archipelago-deployment-live/#or-running-self-signed-optional-and-does-not-apply-to-arm64apple-m1-architecture","text":"Only if you are not running a fully qualified domain you wish a valid/signed Generate a self signed Cert sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout data_storage/selfcert/private/nginx.key -out data_storage/selfcert/certs/nginx.crt sudo openssl dhparam -out data_storage/selfcert/dhparam.pem 4096 cp deploy/ec2-docker/docker-compose-selfsigned.yml deploy/ec2-docker/docker-compose.yml Note: Self signed docker-compose.yml file is setup to use min.io with local storage volumes : - ${ARCHIPELAGO_ROOT}/data_storage/minio-data:/data:cached This folder will be created by min.io. If you are using a secondary Drive (e.g magnetic) you can modify your deploy/ec2-docker/docker-compose.yml to use a folder there e.g . volumes : - /persistentinotherdrive/data_storage/minio-data:/data:cached Make sure your logged in user can read/write to it. NOTE: If you want to use AWS S3 storage for the self signed version replace the minio Service YAML block with this Service Block in your new deploy/ec2-docker/docker-compose.yml . You can mix and match services and even remove all :cached statements for improved R/W volumen performance.","title":"OR Running self-signed? (optional and does not apply to ARM64/Apple M1 Architecture):"},{"location":"archipelago-deployment-live/#step-4-first-run","text":"","title":"Step 4. First Run"},{"location":"archipelago-deployment-live/#first-permissions","text":"sudo chown -R 100 :100 data_storage/iiifcache sudo chown -R 8983 :8983 data_storage/solrcore","title":"First Permissions"},{"location":"archipelago-deployment-live/#actual-first-run","text":"Time to spin our docker containers for the first time. We will start all without going into background so log/error checking is easier. Specially if you have selected a Valid/Signed Cert choice and also want to be sure S3 keys/access are working cd deploy/ec2-docker docker-compose up You will see a lot of things happening. Check for errors/problems/clear alerts and give all a minute or so to start. Ok, let's assume your setup managed to request a valid signed SSL cert, you will see a nice message! - Congratulations! Your certificate and chain have been saved at:XXXXX Your certificate will expire on 20XX-XX-XX. To obtain a new or tweaked version of this certificate in the future, simply run certbot again. To non-interactively renew *all* of your certificates, run \"certbot renew\" Archipelago will do that for you whenever its about to expire so no need to deal with this manually. Even when docker-compose restarts Now press CTRL+C. docker-compose will shutdown gracefully. Good!","title":"Actual first run"},{"location":"archipelago-deployment-live/#step-5-deploy-drupal","text":"","title":"Step 5. Deploy Drupal"},{"location":"archipelago-deployment-live/#composer-and-drupal","text":"Copy the shipped default composer.default.json to composer.json (ONLY if you are installing from scratch) cp ../../drupal/composer.default.json ../../drupal/composer.json Start Docker again docker-compose up -d Wait a few seconds and run docker exec -ti esmero-php bash -c \"chown -R www-data:www-data private\" docker exec -ti esmero-php bash -c \"composer install\" Composer install will take a little while and bring all your PHP libraries. Once done, execute our setup script that will prepare your Drupal settings.php and bring some of the .env enviromental variables to the Drupal environment. docker exec -ti esmero-php bash -c 'scripts/archipelago/setup.sh' And now you can deploy Drupal! IMPORTANT: Make sure you replace in the following command inside root:MYSQL_ROOT_PASSWORD the MYSQL_ROOT_PASSWORD string with the value you used/assigned in your .env file for MYSQL_ROOT_PASSWORD . And replace ADMIN_PASSWORD with a password that is safe and you won't forget! That passwords is for your Drupal super user (uid:0). docker exec -ti esmero-php bash -c \"cd web;../vendor/bin/drush -y si --verbose config_installer config_installer_sync_configure_form.sync_directory=/var/www/html/config/sync/ --db-url=mysql://root:MYSQL_ROOT_PASSWORD@esmero-db/drupal8 --account-name=admin --account-pass=ADMIN_PASSWORD -r=/var/www/html/web --sites-subdir=default --notify=false install_configure_form.enable_update_status_module=NULL install_configure_form.enable_update_status_emails=NULL;drush cr;chown -R www-data:www-data sites;\"","title":"Composer and Drupal"},{"location":"archipelago-deployment-live/#step-6-users-and-initial-content","text":"After installation is done (may take a few) you can install initial users and assign them roles: docker exec -ti esmero-php bash -c 'drush ucrt demo --password=\"demo\"; drush urol metadata_pro \"demo\"' docker exec -ti esmero-php bash -c 'drush ucrt jsonapi --password=\"jsonapi\"; drush urol metadata_api \"jsonapi\"' Before ingesting the base content we need to make sure we can access your JSON-API on for your new domain. That means we need to change internal urls ( https://esmero-web ) to the new valid SSL driven ones. This is easy: On your host machine (no need to docker exec these ones), replace first in the following command your.domain.org with the domain you setup in your .env file. Go to your base git clone folder and then run sed -i 's/http:\\/\\/esmero-web/https:\\/\\/your.domain.org/g' drupal/scripts/archipelago/deploy.sh sed -i 's/http:\\/\\/esmero-web/https:\\/\\/your.domain.org/g' drupal/scripts/archipelago/update_deployed.sh Now your deploy.sh and update_deployed.sh are update and ready. Let's ingest some Twig Templates, an AMI Set, menus and a Blocks. docker exec -ti esmero-php bash -c 'scripts/archipelago/deploy.sh' NOTE: update_deployed.sh is not needed when deploying for the first time and totally discouraged on a customized Archipelago. If you make modifications to your Twig templates , that command will replace the ones shipped by us with fresh copies overwriting all your modifications. Only run to restore larger errors or when needing to update non-customized ones with newer versions.","title":"Step 6. Users and initial Content."},{"location":"archipelago-deployment-live/#step-7-set-your-public-iiif-server-url-to-your-actual-domain","text":"By default archipelago ships with a public facing and an internal facing IIIF Server URLs configured. These urls are used by a number of IIIF enabled viewers and need to be changed to reflect your new reality (a real Domain name and a proxied path!). These settings belong to the strawberryfield/format_strawberryfield module. First check your current settings: docker exec -ti esmero-php bash -c \"drush config-get format_strawberryfield.iiif_settings\" You will see the following: pub_server_url: 'http://localhost:8183/iiif/2' int_server_url: 'http://esmero-cantaloupe:8182/iiif/2' Let's modify pub_server_url . Replace in the following command your.domain.org with the domain you defined in your .env file. NOTE: We are passing the -y flag to drush avoid that way having to answer \"yes\". docker exec -ti esmero-php bash -c \"drush -y config-set format_strawberryfield.iiif_settings pub_server_url https://your.domain.org/cantaloupe/iiif/2\" Finally Done! Now you can log into your new Archipelago using https and start exploring. Thank you for following this guide!","title":"Step 7. Set your public IIIF server URL to your actual domain"},{"location":"archipelago-deployment-live/#deployment-on-arm64v8graviton-apple-m1-system","text":"This applies to AWS m6g and t3g Instances and is documented inline in this guide. Please open an ISSUE in this repository if you run into any problems. Please review https://github.com/esmero/archipelago-deployment-live/blob/1.0.0-RC3/deploy/ec2-docker/docker-compose-aws-s3-arm64.yml for more info","title":"Deployment on ARM64/v8(Graviton, Apple M1) system:"},{"location":"archipelago-deployment-live/#how-do-i-know-my-architecture","text":"Run uname -m For an x86(64 bit) processor system output will be x86_64 For an ARM(64 bit) processor system output will be aarch64","title":"How do I know my Architecture?"},{"location":"archipelago-deployment-live/#caring-coding-fixing-testing","text":"Diego Pino Giancarlo Birello Allison Lund Albert Min","title":"Caring &amp; Coding + Fixing + Testing"},{"location":"archipelago-deployment-live/#acknowledgments","text":"This software is a Metropolitan New York Library Council Open-Source initiative and part of the Archipelago Commons project.","title":"Acknowledgments"},{"location":"archipelago-deployment-live/#license","text":"GPLv3","title":"License"},{"location":"communityshowcase/","text":"Archipelago Community Archipelago Playground METRO's public Archipelago playground to experiment, try things out, break and reconstruct. Consider this a blank piece of paper to start a discussion. Empire Immersive Experiences Supported by the Western New York Library Resources Council (WNYLRC) Olin College Library Pheonix Files Oral History Association Metadata Task Force Repository New York State COVID-19 Personal History Initiative Web Archives Interest Group Still Brewing The following Archipelago instances are still brewing. Please be aware that the following links may change, and stay tuned for future updates. Digital Culture of Metropolitan New York (DCMNY) * migration to Archipelago began Spring 2021 Empire Archival Discovery Cooperative (EADC) Finding Aid Toolkit Supported by the Southeastern New York Library Resources Council (SENYLRC) *Please reach out to Allison Lund if you have a public Archipelago instance you'd like to share here. Thank you! Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Archipelago Community"},{"location":"communityshowcase/#archipelago-community","text":"Archipelago Playground METRO's public Archipelago playground to experiment, try things out, break and reconstruct. Consider this a blank piece of paper to start a discussion. Empire Immersive Experiences Supported by the Western New York Library Resources Council (WNYLRC) Olin College Library Pheonix Files Oral History Association Metadata Task Force Repository New York State COVID-19 Personal History Initiative Web Archives Interest Group","title":"Archipelago Community"},{"location":"communityshowcase/#still-brewing","text":"The following Archipelago instances are still brewing. Please be aware that the following links may change, and stay tuned for future updates. Digital Culture of Metropolitan New York (DCMNY) * migration to Archipelago began Spring 2021 Empire Archival Discovery Cooperative (EADC) Finding Aid Toolkit Supported by the Southeastern New York Library Resources Council (SENYLRC) *Please reach out to Allison Lund if you have a public Archipelago instance you'd like to share here. Thank you! Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Still Brewing"},{"location":"createdisplaymodes/","text":"Creating Display Modes for Archipelago Digital Objects We recommend checking out our primer on Display Modes for a broader overview on Form Modes and View Modes for Archipelago Digital Objects (ADOs). But how do you create and enable these Display Modes in the first place? Let's find out. Adding a new Form Mode Why would you want to create a new form mode? One common reason is to create different data entry experiences for users with different roles. Let's create an example form mode called \"Student Webform\" -- we can imagine a deployment where Students need a simplified form for ADO creation. We are going to create a form mode, enable it for Digital Objects, and give it some custom settings that differentiate it from existing form modes. Navigate to yoursite/admin/structure/display-modes Click on Form modes. This image shows the basic Form Modes shipped with Archipelago Click the \"Add Form mode\" button at the top of the page. Then select the \"Content\" entity type from the list. In this example, we ultimately want the form mode to be applied to Archipelago Digital Objects, which is a Content entity type. Enter the name of your Form Mode and hit save. Here we are entering \"Student Webform\". Great. Now you will see your new Form mode in the list! Let's put it to use. Head to yoursite/admin/structure/types/manage/digital_object and click the \"Manage Form Display\" tab. As mentioned above, in this example we want to add a new Form Mode for ADOs, so we are dealing with the Digital Object content type. Scroll to the bottom of this page and look for the \"Custom Display Settings\" area, which is collapsed by default. Expand it, and you should see this. Enable \"Student Webform\" and hit save! Now scroll back up the page. You'll see it enabled like so. Now select our new \"Student Webform\" tab. From here, you have many options and can configure input fields as you see fit! To finish out our specific example though, let's finally add our Student Webform to the display. Click on the settings gear icon next to the Descriptive Metadata field. You'll see that the default webform named \"Descriptive Metadata\" is entered. To add custom content to this Field Widget, start typing in the autocomplete. This example assumes you've created a webform called Student Webform in yoursite/admin/structure/webform . For info on how to create a new Webform with proper settings, see our Webforms as input guide . After you've selected your \"Student Webform\" in the Field Widget setting, hit Update, and then Save at the bottom of the page. All done! So let's recap. We created a new form mode. We added this form mode to the Manage Form Display > Custom Display Settings options for Digital Objects. And finally we configured the Field Widget for Descriptive Metadata in our new Form Mode to use a new Webform. This last step is arbitrary to this example. We could have enabled or disabled fields, or changed other field widget settings depending on our needs. But configuring different Webforms as Field Widgets for Descriptive Metadata is a common use case in Archipelago. Thanks for reading this far! But there is more. We might want to display, in addition to ingest, our ADOs in custom ways. The process for creating new View Modes (the other type of Display Mode) is quite similar to creating new Form Modes, but let's walk through it with another example case. Adding a new View Mode Why would you want to create a new View Mode? Maybe there is a new type of media you are attaching to ADOs that you want to display using the proper player or tool. Or maybe you want to simplify the ADO display, removing fields from the display page. In this example let's create a new View Mode for ADOs that adds some fields to the display to show the Author and Published date of the object. Navigate to yoursite/admin/structure/display-modes Select View modes, and click the \"Add View mode\" at the top of the page. Select Content as your entity type. Enter the name of your new View Mode and save. Ours is \"Digital Object with Publishing Information\" Now let's enable this View mode. Go to yoursite/admin/structure/types/manage/digital_object and click the \"Manage Display\" tab. Scroll to the bottom of the page and expand the \"Custom Display Settings\" area. You will see our newly created View Mode. Enable it and hit save. Now scroll back to the page top. You will see \"Digital Object with Publishing Information\" in the list of View Modes, so go ahead and select it. Scroll down until you see the \"Disabled\" section. This section contains fields that are available to the ADO content type, but are not enabled in this display mode. Let's enable Author and Post date by changing the \"Region\" column dropdown from \"Disabled\" to \"Content\". (To learn more about Regions in Drupal, see here). Basically, this ensures that this field has a home in the page layout. Hit save. Now, if you want ADOs to use this View Mode for display, there is one last step. You need to select \"Digital Object with Publishing Info\" as the view mode Display Settings when adding new content. This area is located on the right side of the page. See below: Now, when we view the individual ADO, these new fields have been added to the display. All done! This was quite a simple example, but now you are aware of how to customize your own ADO display. It can only get more complex and exciting from here. Let's recap. We created a new View Mode. We enabled this View Mode in Manage Display > Custom Display Settings for Digital Objects. We enabled new fields (in this case, just for instruction, the Author and Post date fields) to make our new View Mode unique, and learned about Disabled fields in the process. We selected our new View Mode in the Display Settings area (slightly confusing wording because yes, this is a View Mode, subset of Display Mode) during ADO creation (for more on creating new objects, see this guide ). Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Creating Display Modes"},{"location":"createdisplaymodes/#creating-display-modes-for-archipelago-digital-objects","text":"We recommend checking out our primer on Display Modes for a broader overview on Form Modes and View Modes for Archipelago Digital Objects (ADOs). But how do you create and enable these Display Modes in the first place? Let's find out.","title":"Creating Display Modes for Archipelago Digital Objects"},{"location":"createdisplaymodes/#adding-a-new-form-mode","text":"Why would you want to create a new form mode? One common reason is to create different data entry experiences for users with different roles. Let's create an example form mode called \"Student Webform\" -- we can imagine a deployment where Students need a simplified form for ADO creation. We are going to create a form mode, enable it for Digital Objects, and give it some custom settings that differentiate it from existing form modes. Navigate to yoursite/admin/structure/display-modes Click on Form modes. This image shows the basic Form Modes shipped with Archipelago Click the \"Add Form mode\" button at the top of the page. Then select the \"Content\" entity type from the list. In this example, we ultimately want the form mode to be applied to Archipelago Digital Objects, which is a Content entity type. Enter the name of your Form Mode and hit save. Here we are entering \"Student Webform\". Great. Now you will see your new Form mode in the list! Let's put it to use. Head to yoursite/admin/structure/types/manage/digital_object and click the \"Manage Form Display\" tab. As mentioned above, in this example we want to add a new Form Mode for ADOs, so we are dealing with the Digital Object content type. Scroll to the bottom of this page and look for the \"Custom Display Settings\" area, which is collapsed by default. Expand it, and you should see this. Enable \"Student Webform\" and hit save! Now scroll back up the page. You'll see it enabled like so. Now select our new \"Student Webform\" tab. From here, you have many options and can configure input fields as you see fit! To finish out our specific example though, let's finally add our Student Webform to the display. Click on the settings gear icon next to the Descriptive Metadata field. You'll see that the default webform named \"Descriptive Metadata\" is entered. To add custom content to this Field Widget, start typing in the autocomplete. This example assumes you've created a webform called Student Webform in yoursite/admin/structure/webform . For info on how to create a new Webform with proper settings, see our Webforms as input guide . After you've selected your \"Student Webform\" in the Field Widget setting, hit Update, and then Save at the bottom of the page. All done! So let's recap. We created a new form mode. We added this form mode to the Manage Form Display > Custom Display Settings options for Digital Objects. And finally we configured the Field Widget for Descriptive Metadata in our new Form Mode to use a new Webform. This last step is arbitrary to this example. We could have enabled or disabled fields, or changed other field widget settings depending on our needs. But configuring different Webforms as Field Widgets for Descriptive Metadata is a common use case in Archipelago. Thanks for reading this far! But there is more. We might want to display, in addition to ingest, our ADOs in custom ways. The process for creating new View Modes (the other type of Display Mode) is quite similar to creating new Form Modes, but let's walk through it with another example case.","title":"Adding a new Form Mode"},{"location":"createdisplaymodes/#adding-a-new-view-mode","text":"Why would you want to create a new View Mode? Maybe there is a new type of media you are attaching to ADOs that you want to display using the proper player or tool. Or maybe you want to simplify the ADO display, removing fields from the display page. In this example let's create a new View Mode for ADOs that adds some fields to the display to show the Author and Published date of the object. Navigate to yoursite/admin/structure/display-modes Select View modes, and click the \"Add View mode\" at the top of the page. Select Content as your entity type. Enter the name of your new View Mode and save. Ours is \"Digital Object with Publishing Information\" Now let's enable this View mode. Go to yoursite/admin/structure/types/manage/digital_object and click the \"Manage Display\" tab. Scroll to the bottom of the page and expand the \"Custom Display Settings\" area. You will see our newly created View Mode. Enable it and hit save. Now scroll back to the page top. You will see \"Digital Object with Publishing Information\" in the list of View Modes, so go ahead and select it. Scroll down until you see the \"Disabled\" section. This section contains fields that are available to the ADO content type, but are not enabled in this display mode. Let's enable Author and Post date by changing the \"Region\" column dropdown from \"Disabled\" to \"Content\". (To learn more about Regions in Drupal, see here). Basically, this ensures that this field has a home in the page layout. Hit save. Now, if you want ADOs to use this View Mode for display, there is one last step. You need to select \"Digital Object with Publishing Info\" as the view mode Display Settings when adding new content. This area is located on the right side of the page. See below: Now, when we view the individual ADO, these new fields have been added to the display. All done! This was quite a simple example, but now you are aware of how to customize your own ADO display. It can only get more complex and exciting from here. Let's recap. We created a new View Mode. We enabled this View Mode in Manage Display > Custom Display Settings for Digital Objects. We enabled new fields (in this case, just for instruction, the Author and Post date fields) to make our new View Mode unique, and learned about Disabled fields in the process. We selected our new View Mode in the Display Settings area (slightly confusing wording because yes, this is a View Mode, subset of Display Mode) during ADO creation (for more on creating new objects, see this guide ). Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Adding a new View Mode"},{"location":"customwebformelements/","text":"Archipelago Custom Webform Elements In addition to the core elements provided by the Drupal Webform module , Archipelago also deploys a robust set of custom webform elements specific to digital repositories metadata needs and use cases. Computed Elements: Computed Metadata Transplant Provides an item that takes source values (not only elements) and distributes them into other places/elements via a twig template Computed Token Provides an item to display computed webform submission values using tokens. Computed Twig Provides an item to display computed webform submission values using Twig File Upload Elements: Enhancements for Audio, Document, Image, Video file uploads Backend processing for technical metadata (such as pronom, exif extraction) Import Metadata from a File (such as XML) Provides a form element for uploading, saving a file and parsing the content as metadata/webform submission data. Import Metadata in CSV format from a File Provides a form element for uploading, saving a file and parsing the content as metadata/webform submission data. Date/Time Elements: Multi Format Date and Date Range Provides a form element for setting/reading Dates indifferent formats suitable for metadata. Composite Elements: Panorama Tour Builder Provides a form element to build multi-scene Panorama Tour Builder with hotspots Linked Data: (*found under Composite Elements in \"Add Element\" menu) Library of Congress (LoC) Linked Open data Provides a form element to reconciliate against LoC Headings and similar LoD Sources Able to configure which LoC Autocomplete Source Provider is used: Subjects (LCSH) LC Name Authority File (LCNAF) LC Genre/Form Terms (LCGFT Thesaurus of Graphic Materials (TGN) MARC list for Geographic areas Filter Suggest results by RDF Type Any of the Classes listed here: https://id.loc.gov/ontologies/madsrdf/v1.html Multi LoD Source Agent Items Provides a form element to reconciliate Agents against Multiple sources of Agents Wikidata Provides a form element to reconciliate against Wikidata Items and Agents via Wikidata Action API Getty Vocabulary Term Provides a form element to reconciliate against the Getty Vocabularies VIAF Provides a form element to reconciliate against VIAF (OCLC) Items Location GEOJSON (Nominatim--Open Street Maps) Provides a form element to collect valid location information (address, longitude, latitude, geolocation) using Nominatim/Openstreetmap open API But wait there's more! You can review the coding behind these custom elements here: https://github.com/esmero/webform_strawberryfield/tree/ISSUE-69/src/Element","title":"Archipelago Custom Webform Elements"},{"location":"customwebformelements/#archipelago-custom-webform-elements","text":"In addition to the core elements provided by the Drupal Webform module , Archipelago also deploys a robust set of custom webform elements specific to digital repositories metadata needs and use cases.","title":"Archipelago Custom Webform Elements"},{"location":"customwebformelements/#computed-elements","text":"Computed Metadata Transplant Provides an item that takes source values (not only elements) and distributes them into other places/elements via a twig template Computed Token Provides an item to display computed webform submission values using tokens. Computed Twig Provides an item to display computed webform submission values using Twig","title":"Computed Elements:"},{"location":"customwebformelements/#file-upload-elements","text":"Enhancements for Audio, Document, Image, Video file uploads Backend processing for technical metadata (such as pronom, exif extraction) Import Metadata from a File (such as XML) Provides a form element for uploading, saving a file and parsing the content as metadata/webform submission data. Import Metadata in CSV format from a File Provides a form element for uploading, saving a file and parsing the content as metadata/webform submission data.","title":"File Upload Elements:"},{"location":"customwebformelements/#datetime-elements","text":"Multi Format Date and Date Range Provides a form element for setting/reading Dates indifferent formats suitable for metadata.","title":"Date/Time Elements:"},{"location":"customwebformelements/#composite-elements","text":"Panorama Tour Builder Provides a form element to build multi-scene Panorama Tour Builder with hotspots","title":"Composite Elements:"},{"location":"customwebformelements/#linked-data","text":"(*found under Composite Elements in \"Add Element\" menu) Library of Congress (LoC) Linked Open data Provides a form element to reconciliate against LoC Headings and similar LoD Sources Able to configure which LoC Autocomplete Source Provider is used: Subjects (LCSH) LC Name Authority File (LCNAF) LC Genre/Form Terms (LCGFT Thesaurus of Graphic Materials (TGN) MARC list for Geographic areas Filter Suggest results by RDF Type Any of the Classes listed here: https://id.loc.gov/ontologies/madsrdf/v1.html Multi LoD Source Agent Items Provides a form element to reconciliate Agents against Multiple sources of Agents Wikidata Provides a form element to reconciliate against Wikidata Items and Agents via Wikidata Action API Getty Vocabulary Term Provides a form element to reconciliate against the Getty Vocabularies VIAF Provides a form element to reconciliate against VIAF (OCLC) Items Location GEOJSON (Nominatim--Open Street Maps) Provides a form element to collect valid location information (address, longitude, latitude, geolocation) using Nominatim/Openstreetmap open API","title":"Linked Data:"},{"location":"customwebformelements/#but-wait-theres-more","text":"You can review the coding behind these custom elements here: https://github.com/esmero/webform_strawberryfield/tree/ISSUE-69/src/Element","title":"But wait there's more!"},{"location":"democontent/","text":"Adding Demo Archipelago Digital Objects (ADOs) to your Repository We make this optional since we feel not everyone wants to have Digital Objects from other people using space in their system. Still, if you are new to Archipelago we encourage you to do this. Its a simply way to get started without thinking too much. You can learn and test. Then delete and move over. Prerequisites The new way Archipelago 1.0.0-RC3 or higher. You installed it either via the Step by Step deployment on OSX , the one for Ubuntu or using your secret powers directly on a VM/Metal/Cloud/EC2 or even a raspberryPI. You followed the guides without being too creative which means you have an jsonapi drupal user and an admin one and you can login and out of your server. You remember your admin user Step 1: (only step) Log into your Archipelago using the admin user. Navigate to Content -> Ami Sets . You will see a single AMI Set already in place. On the Drop Down Menu to the right (The edit Button), press on the little down arrow and choose Process . A new Form will appear. Under DESIRED ADOS STATUSES AFTER PROCESS , change all from Draft to Published, leave Enqueue but do not process Batch in realtime unchecked and press \"Confirm\". The Ingest will start and a progress bar will advance. Once ready a list of Ingest Objects should appear. You are done! Old way, A running Archipelago 1.0-Beta3 or higher. You installed it either via the Step by Step deployment on OSX , the one for Ubuntu or using your secret powers directly on a VM/Metal/Cloud/EC2 or even a raspberryPI. You followed the guides without being too creative which means you have a jsonapi drupal user and you can login and out of your server. Step 1: Get the content Go into your archipelago-deployment folder and into the d8content folder that is inside it. E.g cd archipelago-deployment/d8content git clone https://github.com/esmero/archipelago-recyclables Step 2: Ingest the Objects If running Docker execute: docker exec -ti esmero-php bash -c 'd8content/archipelago-recyclables/deploy_ados.sh' You will see multiple outputs similar to this Files in provided location: - anne_001.jpg - anne_002.jpg - anne_003.jpg - anne_004.jpg - anne_005.jpg - anne_006.jpg - anne_007.jpg - anne_008.jpg - anne_009.jpg - anne_010.jpg File anne_001.jpg sucessfully uploaded with Internal Drupal file ID 5 File anne_002.jpg sucessfully uploaded with Internal Drupal file ID 6 File anne_003.jpg sucessfully uploaded with Internal Drupal file ID 7 File anne_004.jpg sucessfully uploaded with Internal Drupal file ID 8 File anne_005.jpg sucessfully uploaded with Internal Drupal file ID 9 File anne_006.jpg sucessfully uploaded with Internal Drupal file ID 10 File anne_007.jpg sucessfully uploaded with Internal Drupal file ID 11 File anne_008.jpg sucessfully uploaded with Internal Drupal file ID 12 File anne_009.jpg sucessfully uploaded with Internal Drupal file ID 13 File anne_010.jpg sucessfully uploaded with Internal Drupal file ID 14 New Object 'Anne of Green Gables : Chapters 1 and 2' with UUID 9eb28775-d73a-4904-bc79-f0e925075bc5 successfully ingested. Thanks! Gist here is: if the script says Thanks you are good. If you are not running Docker (You are a unicorn or at least a hacker) you will need to tune/copy/modify the following script: archipelago-deployment/d8content/archipelago-recyclables/deploy_ados.sh Inside you will find lines like this one drush archipelago:jsonapi-ingest /var/www/html/d8content/archipelago-recyclables/ado/0c2dc01a-7dc2-48a9-b4fd-3f82331ec803.json --uuid = 0c2dc01a-7dc2-48a9-b4fd-3f82331ec803 --bundle = digital_object --uri = http://esmero-web --files = /var/www/html/d8content/archipelago-recyclables/ado/0c2dc01a-7dc2-48a9-b4fd-3f82331ec803 --user = jsonapi --password = jsonapi --moderation_state = published ; What you want here is to modify/replace the absolute paths that point your demo objects (.json) and their assets (folders with the same name). Basically replace every entry of /var/www/html/d8content/archipelago-recyclables/ with the path to archipelago-recyclables Need help? Blue Screen? Missed a step? Need a hug? Another Hug? If you have trouble running this or see errors or need help with a step (its only two steps), please let us know (ASAP!). You can either open an issue in this repository or use the Google Group . We are here to help. Caring & Coding + Fixing Diego Pino Giancarlo Birello Allison Lund Albert Min License GPLv3","title":"Adding Demo Archipelago Digital Objects (ADOs) to your Repository"},{"location":"democontent/#adding-demo-archipelago-digital-objects-ados-to-your-repository","text":"We make this optional since we feel not everyone wants to have Digital Objects from other people using space in their system. Still, if you are new to Archipelago we encourage you to do this. Its a simply way to get started without thinking too much. You can learn and test. Then delete and move over.","title":"Adding Demo Archipelago Digital Objects (ADOs) to your Repository"},{"location":"democontent/#prerequisites","text":"","title":"Prerequisites"},{"location":"democontent/#the-new-way-archipelago-100-rc3-or-higher","text":"You installed it either via the Step by Step deployment on OSX , the one for Ubuntu or using your secret powers directly on a VM/Metal/Cloud/EC2 or even a raspberryPI. You followed the guides without being too creative which means you have an jsonapi drupal user and an admin one and you can login and out of your server. You remember your admin user","title":"The new way Archipelago 1.0.0-RC3 or higher."},{"location":"democontent/#step-1-only-step","text":"Log into your Archipelago using the admin user. Navigate to Content -> Ami Sets . You will see a single AMI Set already in place. On the Drop Down Menu to the right (The edit Button), press on the little down arrow and choose Process . A new Form will appear. Under DESIRED ADOS STATUSES AFTER PROCESS , change all from Draft to Published, leave Enqueue but do not process Batch in realtime unchecked and press \"Confirm\". The Ingest will start and a progress bar will advance. Once ready a list of Ingest Objects should appear. You are done!","title":"Step 1: (only step)"},{"location":"democontent/#old-way-a-running-archipelago-10-beta3-or-higher","text":"You installed it either via the Step by Step deployment on OSX , the one for Ubuntu or using your secret powers directly on a VM/Metal/Cloud/EC2 or even a raspberryPI. You followed the guides without being too creative which means you have a jsonapi drupal user and you can login and out of your server.","title":"Old way, A running Archipelago 1.0-Beta3 or higher."},{"location":"democontent/#step-1-get-the-content","text":"Go into your archipelago-deployment folder and into the d8content folder that is inside it. E.g cd archipelago-deployment/d8content git clone https://github.com/esmero/archipelago-recyclables","title":"Step 1: Get the content"},{"location":"democontent/#step-2-ingest-the-objects","text":"If running Docker execute: docker exec -ti esmero-php bash -c 'd8content/archipelago-recyclables/deploy_ados.sh' You will see multiple outputs similar to this Files in provided location: - anne_001.jpg - anne_002.jpg - anne_003.jpg - anne_004.jpg - anne_005.jpg - anne_006.jpg - anne_007.jpg - anne_008.jpg - anne_009.jpg - anne_010.jpg File anne_001.jpg sucessfully uploaded with Internal Drupal file ID 5 File anne_002.jpg sucessfully uploaded with Internal Drupal file ID 6 File anne_003.jpg sucessfully uploaded with Internal Drupal file ID 7 File anne_004.jpg sucessfully uploaded with Internal Drupal file ID 8 File anne_005.jpg sucessfully uploaded with Internal Drupal file ID 9 File anne_006.jpg sucessfully uploaded with Internal Drupal file ID 10 File anne_007.jpg sucessfully uploaded with Internal Drupal file ID 11 File anne_008.jpg sucessfully uploaded with Internal Drupal file ID 12 File anne_009.jpg sucessfully uploaded with Internal Drupal file ID 13 File anne_010.jpg sucessfully uploaded with Internal Drupal file ID 14 New Object 'Anne of Green Gables : Chapters 1 and 2' with UUID 9eb28775-d73a-4904-bc79-f0e925075bc5 successfully ingested. Thanks! Gist here is: if the script says Thanks you are good. If you are not running Docker (You are a unicorn or at least a hacker) you will need to tune/copy/modify the following script: archipelago-deployment/d8content/archipelago-recyclables/deploy_ados.sh Inside you will find lines like this one drush archipelago:jsonapi-ingest /var/www/html/d8content/archipelago-recyclables/ado/0c2dc01a-7dc2-48a9-b4fd-3f82331ec803.json --uuid = 0c2dc01a-7dc2-48a9-b4fd-3f82331ec803 --bundle = digital_object --uri = http://esmero-web --files = /var/www/html/d8content/archipelago-recyclables/ado/0c2dc01a-7dc2-48a9-b4fd-3f82331ec803 --user = jsonapi --password = jsonapi --moderation_state = published ; What you want here is to modify/replace the absolute paths that point your demo objects (.json) and their assets (folders with the same name). Basically replace every entry of /var/www/html/d8content/archipelago-recyclables/ with the path to archipelago-recyclables","title":"Step 2: Ingest the Objects"},{"location":"democontent/#need-help-blue-screen-missed-a-step-need-a-hug-another-hug","text":"If you have trouble running this or see errors or need help with a step (its only two steps), please let us know (ASAP!). You can either open an issue in this repository or use the Google Group . We are here to help.","title":"Need help? Blue Screen? Missed a step? Need a hug? Another Hug?"},{"location":"democontent/#caring-coding-fixing","text":"Diego Pino Giancarlo Birello Allison Lund Albert Min","title":"Caring &amp; Coding + Fixing"},{"location":"democontent/#license","text":"GPLv3","title":"License"},{"location":"devops/","text":"Archipelago Software Services At the core of the Archipelago philosophy is our commitment to both simplicity and flexibility. Under the hood, Archipelago's architecture is: Drupal (CMS) Solr (Search) Cantaloupe (Image Server) S3 Storage (Mini.io or any other S3 flavor) Installation is entirely Dockerized and scripted with easy-to-follow directions . Docker containers are as follows: Container Purpose Description esmero-web NGNIX Routes calls to esmero-php esmero-php PHP-FPM Has all binaries for postprocessing/exif/ocr/etc. Runs PHP code. esmero-db Database AMD and INTEL processors: MYSQL 8 ARM processors: MariaDB esmero-minio Storage S3 API compatible Backend file and ADO as file storage. In a local it will do all the S3 stuff, on a live instance it can server as file routing to AWS S3, Azure Blob Storage, etc. esmero-solr Solr Currently version 8.8.2 esmero-nlp Natural Language Processing NLP64 server for entity extraction, language detection, etc. Information related to non-Dockerized installation and configruation can be found here: Traditional Installation Notes Strawberryfield Modules at the heart of every Archipelago: Strawberryfield Format Strawberryfield Webform Strawberryfield Strawberry Runners Archipelago Multi-Importer (AMI) Documentation related to the Strawberryfield modules can be found here: Strawberryfields Forever Archipelago also extends these powerful tools: Annotorius Drupal Webform Module International Image Interoperability Framework (IIIF) Internet Archive BookReader Mirador Pannellum Replayweb.page Webarchive Player Solr OCR Highlighting Twig Templating In Symfony / In Drupal Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Software Services"},{"location":"devops/#archipelago-software-services","text":"At the core of the Archipelago philosophy is our commitment to both simplicity and flexibility.","title":"Archipelago Software Services"},{"location":"devops/#under-the-hood-archipelagos-architecture-is","text":"Drupal (CMS) Solr (Search) Cantaloupe (Image Server) S3 Storage (Mini.io or any other S3 flavor) Installation is entirely Dockerized and scripted with easy-to-follow directions . Docker containers are as follows: Container Purpose Description esmero-web NGNIX Routes calls to esmero-php esmero-php PHP-FPM Has all binaries for postprocessing/exif/ocr/etc. Runs PHP code. esmero-db Database AMD and INTEL processors: MYSQL 8 ARM processors: MariaDB esmero-minio Storage S3 API compatible Backend file and ADO as file storage. In a local it will do all the S3 stuff, on a live instance it can server as file routing to AWS S3, Azure Blob Storage, etc. esmero-solr Solr Currently version 8.8.2 esmero-nlp Natural Language Processing NLP64 server for entity extraction, language detection, etc. Information related to non-Dockerized installation and configruation can be found here: Traditional Installation Notes","title":"Under the hood, Archipelago's architecture is:"},{"location":"devops/#strawberryfield-modules-at-the-heart-of-every-archipelago","text":"Strawberryfield Format Strawberryfield Webform Strawberryfield Strawberry Runners Archipelago Multi-Importer (AMI) Documentation related to the Strawberryfield modules can be found here: Strawberryfields Forever","title":"Strawberryfield Modules at the heart of every Archipelago:"},{"location":"devops/#archipelago-also-extends-these-powerful-tools","text":"Annotorius Drupal Webform Module International Image Interoperability Framework (IIIF) Internet Archive BookReader Mirador Pannellum Replayweb.page Webarchive Player Solr OCR Highlighting Twig Templating In Symfony / In Drupal Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Archipelago also extends these powerful tools:"},{"location":"firstobject/","text":"Your First Digital Object You followed every Deployment step and you have now a local Archipelago instance. Great! So what now? It is time to give your new repository a try and we feel the best way is to start by ingesting a simple Digital Object. Note: This guide will assume Archipelago is running on http://localhost:8001 , so if you wizardly deployed everything in a different location, please replace all URIs with your own setup while following this guide. Requirements Running Archipelago (http://localhost:8001) 20 minutes of your time. Open Mind. Welcome! Start by opening http://locahost:8001 in your favourite Web Browser. Your Demo deployment will have a fancy Home page with some banners and a small explanation of what Archipelago is and can do. Feel free to read through that now or later. Click on Log in in the top left corner and use your demo credentials from the deployment guide. user: demo pass: demo (or whatever password you decided was easy for you to remember during the deployment phase) Press the Log in button. Great, welcome demo user! This users has limited credentials and uses the same global theme as any anonymous user would. Still, demo can create content, so let's use those super powers and give that a try. You will see a new Menu item on the top, black, navigation bar named Add Content . Click it! Brief Background As you already know Archipelago is build on Drupal 8/9 , a very extensible CMS . In practice that means you have (at least) the same functionality any Drupal deployment has and that is also true for Content Managment. Drupal ships by default with a very flexible Content Entity Type named Node . Nodes are used for creating Articles and simple Pages but also in Archipelago as Digital Objects . Drupal has a pretty tight integration with Nodes and that means you get a lot of fun and useful functionality by default by using them. Want to know more about Entities? An Article and a Digital Object are both of type Nodes , but each one represents a different Content Type . Content Types are also named Bundles . An individual Content, like \"Black and White photograph of a kind Dog\" is named a Content Entity or more specific in this case a Node . What have Article and Digital Object Content types in common and what puts the apart? Each Content Type or Bundle has a set of Base Fields and also user configurable set of Fields attached (or bundled together). E.g Article has a title, a Body and the option to add an image. Digital Object has a title but also a special, very flexible one named Strawberry Field (more about that later). Fields are where you put your data into and also where your data comes from when you expose it to the world. Nodes , as any other Content entity have Base Fields (which means you can't remove or configure them) that are used all over the place. Good examples are the title and also the owner, named uid (you!). Other Fields, specific to a Content Type, can be added and configured per Bundle. A Field Widget is used to input data into a Field. Each field can have a Field Formatter that allows you to setup how it is displayed to the World. A set of Field Formatters (the way you want to show your content formatted to the world) is named a Display Mode . You can have many, create new ones and remove them, but only use one at the time. A set of Field Widgets (the way you want to Create and Edit a Node ) is named a Form Mode . You can also have many, create new ones but only use one at the time. Each Content Type can have different Permissions (using the build in User Roles system). Each Content Type can have one or more Display Modes . In Practice this means Display Modes are attached to Content Types . Each display modes can have its own Permissions Each Content Type can have one or more Form Modes . In Practice this means Form Modes are attached to Content Types . Each Form Mode can have its own Permissions. There is of course a lot more to Nodes, Content Types, Formatters, Widgets and in general Content Entities but this is a good start to understand what will happen next. Adding Content Below you see all the Content Types defined by default in Archipelago. Let's click on Digital Object to get your first Digital Object Node. My Metadata What you see below is a Form Mode in action. A multi-step Webform that will ingest metadata into a field of type Strawberry Field (where all the magic happens) attached to that field using a Webform Field Widget , an editorial/advanced Block on the right side and a Workflow/state drop down ( Save as ) at the bottom. Let's fill out the form to begin our ingest. We recommend to use similar values as the ones shown in the screen capture to make following the tutorial easier. Make sure you select Photograph as Media Type and all the fields with a red * are filled up. Then press Move on to next step at the bottom of the webform to load the next step inline. Tip: When entering a location, place or address you will need to click on the Search OpenStreet Maps button, which is what that big red arrow is pointing to in the screenshot above. Note: For now, let's leave the state of this Digital Object as Draft . Why does this look different than Repository X? We assume you come from a world where repositories define different Content types and the shape, the fields and values (Schema) are fixed and set by someone else or at least quite complicated to configure. This is where Archipelago differs and starts to propose its own style. You noticed that there is a single Content Type named Digital Object and you have here a single Web Form. So how does this allow you to have images, sequences, videos, audio, 3D images, etc? There are many ways of answering that, Archipelago works under the idea of an (or many) Open Schema(s), and that notion permeates the whole environment. Practical answer and simplest way to explain based on this demo is: The Digital Object is a generic container for any shape of metadata. Metadata is generated either via this Webform-based widget you're currently using, manually (power-user need only) or via APIs. Because of this, Metadata can take any shape to express your needs of Digital Objects and therefore we do not recommend making multiple Digital Object types. However, if you ever do need more Digital Object types, the option is available. The Strawberry field Field Widget allows you to attach any Webform , built using the Webform Module and Webforms can be setup in almost infinite ways. Any field, combo, or style can be used. Multi Step, single step - we made sure they always only touch/modify data they know how to touch, so even a single input element webform would ensure any previous metadata to persist even if not readable by itself (See the potential?). And Each Webform can be also quite smart! The Strawberry field Field Widget will take all your Webform input, process any uploaded files, generate a JSON representation, enrich and complement it with Archipelago specific data and save it for you inside the Strawberry field . We will come back to this later. Linked Data As the name of this step suggests; you will be adding all your Linked Data elements here. This step showcases some of the autocomplete Linked Data Webform elements we built for Archipelago. We truly believe in Wikidata as an open, honest, source of Linked Open Data and also one where you can contribute back. But we also have LoC autocompletes and Getty. Again, enter all fields with a red * and when you are finished, click Move on to next step Collections Since this is our first digital object we do not yet have a Digital Object Collection for which My First Digital Object could be a member of. In other words, you can leave Collection Membership blank and click Next: Upload Files . Upload Files Now we will upload our Photograph . Click Choose Files to open your file selector window and choose which file you would like to ingest. Once you've uploaded your file, you will see all the Exif data extracted from the image, like so... Once you've mentally digested all of that data, let's go ahead and click Save Metadata . Question: \"Wait! Don't I need to switch Save as from Draft to Publish ? I'm ready for this Digital Object to be shared with the world!\" Answer: By clicking Save Metadata we are simply persisting all the metadata in the current webform session. The actual ingest of the Object happens when you click Save on the next and final step, Complete . Complete Alright, we've made it. We've added metadata, linked Data, uploaded our files and now... we're ready to save ! Go ahead and change the status from Draft to Published and click Save . Once you hit save you should see the following green messages and your first Archipelago Digital Object! Congratulations on creating your first digital object! \ud83c\udf53 Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Ingesting Your First Object"},{"location":"firstobject/#your-first-digital-object","text":"You followed every Deployment step and you have now a local Archipelago instance. Great! So what now? It is time to give your new repository a try and we feel the best way is to start by ingesting a simple Digital Object. Note: This guide will assume Archipelago is running on http://localhost:8001 , so if you wizardly deployed everything in a different location, please replace all URIs with your own setup while following this guide.","title":"Your First Digital Object"},{"location":"firstobject/#requirements","text":"Running Archipelago (http://localhost:8001) 20 minutes of your time. Open Mind.","title":"Requirements"},{"location":"firstobject/#welcome","text":"Start by opening http://locahost:8001 in your favourite Web Browser. Your Demo deployment will have a fancy Home page with some banners and a small explanation of what Archipelago is and can do. Feel free to read through that now or later. Click on Log in in the top left corner and use your demo credentials from the deployment guide. user: demo pass: demo (or whatever password you decided was easy for you to remember during the deployment phase) Press the Log in button. Great, welcome demo user! This users has limited credentials and uses the same global theme as any anonymous user would. Still, demo can create content, so let's use those super powers and give that a try. You will see a new Menu item on the top, black, navigation bar named Add Content . Click it!","title":"Welcome!"},{"location":"firstobject/#brief-background","text":"As you already know Archipelago is build on Drupal 8/9 , a very extensible CMS . In practice that means you have (at least) the same functionality any Drupal deployment has and that is also true for Content Managment. Drupal ships by default with a very flexible Content Entity Type named Node . Nodes are used for creating Articles and simple Pages but also in Archipelago as Digital Objects . Drupal has a pretty tight integration with Nodes and that means you get a lot of fun and useful functionality by default by using them. Want to know more about Entities? An Article and a Digital Object are both of type Nodes , but each one represents a different Content Type . Content Types are also named Bundles . An individual Content, like \"Black and White photograph of a kind Dog\" is named a Content Entity or more specific in this case a Node . What have Article and Digital Object Content types in common and what puts the apart? Each Content Type or Bundle has a set of Base Fields and also user configurable set of Fields attached (or bundled together). E.g Article has a title, a Body and the option to add an image. Digital Object has a title but also a special, very flexible one named Strawberry Field (more about that later). Fields are where you put your data into and also where your data comes from when you expose it to the world. Nodes , as any other Content entity have Base Fields (which means you can't remove or configure them) that are used all over the place. Good examples are the title and also the owner, named uid (you!). Other Fields, specific to a Content Type, can be added and configured per Bundle. A Field Widget is used to input data into a Field. Each field can have a Field Formatter that allows you to setup how it is displayed to the World. A set of Field Formatters (the way you want to show your content formatted to the world) is named a Display Mode . You can have many, create new ones and remove them, but only use one at the time. A set of Field Widgets (the way you want to Create and Edit a Node ) is named a Form Mode . You can also have many, create new ones but only use one at the time. Each Content Type can have different Permissions (using the build in User Roles system). Each Content Type can have one or more Display Modes . In Practice this means Display Modes are attached to Content Types . Each display modes can have its own Permissions Each Content Type can have one or more Form Modes . In Practice this means Form Modes are attached to Content Types . Each Form Mode can have its own Permissions. There is of course a lot more to Nodes, Content Types, Formatters, Widgets and in general Content Entities but this is a good start to understand what will happen next.","title":"Brief Background"},{"location":"firstobject/#adding-content","text":"Below you see all the Content Types defined by default in Archipelago. Let's click on Digital Object to get your first Digital Object Node.","title":"Adding Content"},{"location":"firstobject/#my-metadata","text":"What you see below is a Form Mode in action. A multi-step Webform that will ingest metadata into a field of type Strawberry Field (where all the magic happens) attached to that field using a Webform Field Widget , an editorial/advanced Block on the right side and a Workflow/state drop down ( Save as ) at the bottom. Let's fill out the form to begin our ingest. We recommend to use similar values as the ones shown in the screen capture to make following the tutorial easier. Make sure you select Photograph as Media Type and all the fields with a red * are filled up. Then press Move on to next step at the bottom of the webform to load the next step inline. Tip: When entering a location, place or address you will need to click on the Search OpenStreet Maps button, which is what that big red arrow is pointing to in the screenshot above. Note: For now, let's leave the state of this Digital Object as Draft . Why does this look different than Repository X? We assume you come from a world where repositories define different Content types and the shape, the fields and values (Schema) are fixed and set by someone else or at least quite complicated to configure. This is where Archipelago differs and starts to propose its own style. You noticed that there is a single Content Type named Digital Object and you have here a single Web Form. So how does this allow you to have images, sequences, videos, audio, 3D images, etc? There are many ways of answering that, Archipelago works under the idea of an (or many) Open Schema(s), and that notion permeates the whole environment. Practical answer and simplest way to explain based on this demo is: The Digital Object is a generic container for any shape of metadata. Metadata is generated either via this Webform-based widget you're currently using, manually (power-user need only) or via APIs. Because of this, Metadata can take any shape to express your needs of Digital Objects and therefore we do not recommend making multiple Digital Object types. However, if you ever do need more Digital Object types, the option is available. The Strawberry field Field Widget allows you to attach any Webform , built using the Webform Module and Webforms can be setup in almost infinite ways. Any field, combo, or style can be used. Multi Step, single step - we made sure they always only touch/modify data they know how to touch, so even a single input element webform would ensure any previous metadata to persist even if not readable by itself (See the potential?). And Each Webform can be also quite smart! The Strawberry field Field Widget will take all your Webform input, process any uploaded files, generate a JSON representation, enrich and complement it with Archipelago specific data and save it for you inside the Strawberry field . We will come back to this later.","title":"My Metadata"},{"location":"firstobject/#linked-data","text":"As the name of this step suggests; you will be adding all your Linked Data elements here. This step showcases some of the autocomplete Linked Data Webform elements we built for Archipelago. We truly believe in Wikidata as an open, honest, source of Linked Open Data and also one where you can contribute back. But we also have LoC autocompletes and Getty. Again, enter all fields with a red * and when you are finished, click Move on to next step","title":"Linked Data"},{"location":"firstobject/#collections","text":"Since this is our first digital object we do not yet have a Digital Object Collection for which My First Digital Object could be a member of. In other words, you can leave Collection Membership blank and click Next: Upload Files .","title":"Collections"},{"location":"firstobject/#upload-files","text":"Now we will upload our Photograph . Click Choose Files to open your file selector window and choose which file you would like to ingest. Once you've uploaded your file, you will see all the Exif data extracted from the image, like so... Once you've mentally digested all of that data, let's go ahead and click Save Metadata . Question: \"Wait! Don't I need to switch Save as from Draft to Publish ? I'm ready for this Digital Object to be shared with the world!\" Answer: By clicking Save Metadata we are simply persisting all the metadata in the current webform session. The actual ingest of the Object happens when you click Save on the next and final step, Complete .","title":"Upload Files"},{"location":"firstobject/#complete","text":"Alright, we've made it. We've added metadata, linked Data, uploaded our files and now... we're ready to save ! Go ahead and change the status from Draft to Published and click Save . Once you hit save you should see the following green messages and your first Archipelago Digital Object! Congratulations on creating your first digital object! \ud83c\udf53 Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Complete"},{"location":"generalqa_index/","text":"General Q&A This area of Archipelago documentation is reserved for general questions and answers for commonly encountered issues pertaining to Archipelago configuration settings. To contribute to this section, please review our Code of Conduct , and after that please follow this set of guidelines to help you get started. Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"General Q&A"},{"location":"generalqa_index/#general-qa","text":"This area of Archipelago documentation is reserved for general questions and answers for commonly encountered issues pertaining to Archipelago configuration settings. To contribute to this section, please review our Code of Conduct , and after that please follow this set of guidelines to help you get started. Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"General Q&amp;A"},{"location":"generalqa_minio_logging/","text":"Min.io Logging Q: How can I see my minio (S3) docker container's realtime traffic and requests? A: For standard demo deployments, mini.io storage server runs on the esmero-minio docker container. Steps are: Install the mc binaries (minio client) for your platform following this instructions . e.g for OSX run on your terminal: brew install minio/stable/mc mc alias set esmero-minio http://localhost:9000 user password with http://localhost:9000 being your current machines mini.io URL and exposed port, user being your username (defaults to minio ) and your original choosen password (defaults to minio123 ) Run a trace to watch realtime activity on your terminal: mc admin trace -v -a --debug --insecure --no-color esmero-minio Note: mc client is also AWS S3 compatible and can be used to move/copy/delete files on the local instance and to/from a remote AWS storage. Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Min.io Logging"},{"location":"generalqa_minio_logging/#minio-logging","text":"Q: How can I see my minio (S3) docker container's realtime traffic and requests? A: For standard demo deployments, mini.io storage server runs on the esmero-minio docker container. Steps are: Install the mc binaries (minio client) for your platform following this instructions . e.g for OSX run on your terminal: brew install minio/stable/mc mc alias set esmero-minio http://localhost:9000 user password with http://localhost:9000 being your current machines mini.io URL and exposed port, user being your username (defaults to minio ) and your original choosen password (defaults to minio123 ) Run a trace to watch realtime activity on your terminal: mc admin trace -v -a --debug --insecure --no-color esmero-minio Note: mc client is also AWS S3 compatible and can be used to move/copy/delete files on the local instance and to/from a remote AWS storage. Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Min.io Logging"},{"location":"generalqa_smtp_configuration/","text":"SMTP Configuration Q: How can I enable SMTP for Archipelago? A: For standard demo deployments, SMTP is not setup to send emails. To enable SMTP: Enter the following commands in your terminal. Note: make sure docker is running. Optionally, you can verify that all Archipelago containers are present by entering the docker ps command first . docker exec -ti esmero-php bash -c 'php -dmemory_limit=-1 /usr/bin/composer require drupal/smtp:^1.0' docker exec -ti esmero-php bash -c 'drush en -y smtp' Check that the SMTP module has been enabled by navigating (as admin user) to the EXTEND module menu item ( localhost:8001/admin/modules ). You should see \"SMTP Authentication Support\" listed. Navigate to localhost:8001/admin/config/system/smtp to configure the SMTP settings. This screenshot shows settings if a GMAIL account is used. Save your settings, then test by adding a recipient address in the \u201cSEND TEST E-MAIL\u201d field. Note: Depending on your email provider, you may also need to enable \u201cless secure\u201d applications in your account settings (such as here for Google email accounts: https://myaccount.google.com/lesssecureapps) Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"SMTP Configuration"},{"location":"generalqa_smtp_configuration/#smtp-configuration","text":"Q: How can I enable SMTP for Archipelago? A: For standard demo deployments, SMTP is not setup to send emails. To enable SMTP: Enter the following commands in your terminal. Note: make sure docker is running. Optionally, you can verify that all Archipelago containers are present by entering the docker ps command first . docker exec -ti esmero-php bash -c 'php -dmemory_limit=-1 /usr/bin/composer require drupal/smtp:^1.0' docker exec -ti esmero-php bash -c 'drush en -y smtp' Check that the SMTP module has been enabled by navigating (as admin user) to the EXTEND module menu item ( localhost:8001/admin/modules ). You should see \"SMTP Authentication Support\" listed. Navigate to localhost:8001/admin/config/system/smtp to configure the SMTP settings. This screenshot shows settings if a GMAIL account is used. Save your settings, then test by adding a recipient address in the \u201cSEND TEST E-MAIL\u201d field. Note: Depending on your email provider, you may also need to enable \u201cless secure\u201d applications in your account settings (such as here for Google email accounts: https://myaccount.google.com/lesssecureapps) Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"SMTP Configuration"},{"location":"generalqa_twig_modules_configuration/","text":"Twig Modules Configuration Q: When attempting to save a Twig template for a Metadata Display, I receive an error message related to an Unknown \"bamboo_load_entity\" function . A: You need to enable the necessary Twig modules. Navigate to: yoursite/admin/modules In the \u201cEnter a part of the module name or description\u201d box, enter \u201cbam\u201d to filter for the related Bamboo Twig modules. Alternatively, scroll down to the Bamboo Twig modules section on this page. Check the box next to each of the following to enable (some may already be enabled): Bamboo Twig Bamboo Twig - Loaders Bamboo Twig - Path & Url Bamboo Twig - Token Click Install . After receiving the successful installation confirmation, check to make sure you are now able to save your Twig template without receiving an error message. Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Twig Modules Configuration"},{"location":"generalqa_twig_modules_configuration/#twig-modules-configuration","text":"Q: When attempting to save a Twig template for a Metadata Display, I receive an error message related to an Unknown \"bamboo_load_entity\" function . A: You need to enable the necessary Twig modules. Navigate to: yoursite/admin/modules In the \u201cEnter a part of the module name or description\u201d box, enter \u201cbam\u201d to filter for the related Bamboo Twig modules. Alternatively, scroll down to the Bamboo Twig modules section on this page. Check the box next to each of the following to enable (some may already be enabled): Bamboo Twig Bamboo Twig - Loaders Bamboo Twig - Path & Url Bamboo Twig - Token Click Install . After receiving the successful installation confirmation, check to make sure you are now able to save your Twig template without receiving an error message. Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Twig Modules Configuration"},{"location":"gitworkflow/","text":"Managing, sheltering, pruning, and nurturing your own custom Archipelago Now that you have your base Archipelago Live Deployment running (Do you? If not, go back! ) you may be wondering about things like: What happens when I need to update to the next release? How do I keep my Drupal and Modules updated in between releases? Can I add Drupal Modules? Will a new release overwrite all my customizations? What things are safe to customize? How do I keep my very own things in Version Control and safe from others? And many (many) other similar questions 1. Keep your Archipelago under Version Control via Github Archipelagos are living beings. They evolve and become beautiful, closer and closer to your needs. Because of that resetting your particularities on every Archipelago code release is not a good idea nor even recommended. What you want is to keep your own Drupal Settings safe and be able to restore all in case something goes wrong. Your facets, your themes, your Solr fields, your own modules and all their configurations. The ones we ship with every Release will reset your Archipelago's settings to Factory defaults if applied wildly . This is where Github comes in place. Basic steps Prerequisites: - Have an Archipelago Deployment Live instance running - Have Terminal access to your Live Instance - Have a Github account - Have a personal Github Access Token Created - Run git config --global --edit on your Live Instance and Set your user name/email/etc - Note: Opens in Vi ! in case of emergency/panic press ESC and type :x to escape and/or run away in terror. To edit Press i and uncomment the lines. Once Done press ESC and type :x to save. 1.1 Start by creating a Git Fork Let's fork https://github.com/esmero/archipelago-deployment-live under your own Account via the web. Happy Note: Since 2021 keeping also forked branches in sync with the origin can be done via the UI directly. 1.2 Connect your Live instance terminal. Move to your repository's base folder, and let's start by adding your New Fork as a secondary Git Origin . Replace in this command yourOwnAccount with (guess what?) your own account . git remote add upstream https://github.com/yourOwnAccount/archipelago-deployment-live Now check if you have two remotes ( origin => This repository, upstream => your own fork): git remote -v You will see this: origin https://github.com/esmero/archipelago-deployment-live ( fetch ) origin https://github.com/esmero/archipelago-deployment-live ( push ) upstream https://github.com/yourOwnAccount/archipelago-deployment-live ( fetch ) upstream https://github.com/yourOwnAccount/archipelago-deployment-live ( push ) Good! 1.3 Now let's create from your current Live Instance a new Branch. We will push this branch into your Fork and it will be all yours to maintain. Please replace yourOwnOrg with any Name you want for this. We like to keep the current Branch name in place after your personal prefix. git checkout -b yourOwnOrg-1.0.0-RC3 Good, you now have a new local branch named yourOwnOrg-1.0.0-RC3 and it's time to decide what we are going to push into Github. 1.4 Push the Basics. By default our deployment strategy (this repository) ignores a few files you want to have in Github. Also, there are things like the Installed Drupal Modules and PHP Libraries (the Source Code), the Database, Caches and also your Secrets ( .env file) and your drupal settings.php ) file. You FOR SURE do not want to have these in Github and are better suited for a private Backup Storage. Let's start by push ing what you have (no commits, your new yourOwnOrg-1.0.0-RC3 as it is) to your new Fork. From there on we can add new Commits and files. git push upstream yourOwnOrg-1.0.0-RC3 And Git will respond with the following. Use your yourOwnAccount personal Github Access Token as password. Username for 'https://github.com' : yourOwnAccount Password for 'https://yourOwnAccount@github.com' : Total 0 ( delta 0 ) , reused 0 ( delta 0 ) remote: remote: Create a pull request for 'yourOwnOrg-1.0.0-RC3' on GitHub by visiting: remote: https://github.com/yourOwnAccount/archipelago-deployment-live/pull/new/yourOwnOrg-1.0.0-RC3 remote: To https://github.com/yourOwnAccount/archipelago-deployment-live * [ new branch ] yourOwnOrg-1.0.0-RC3 -> yourOwnOrg-1.0.0-RC3 1.5 First Commit Right now this new Branch (go and check it out at https://github.com/yourOwnAccount/archipelago-deployment-live/tree/yourOwnOrg-1.0.0-RC3) will not differ at all from 1.0.0-RC3. That is ok. To make your Branch unique, what we want is to \"commit\" our changes. How do we do this? Let's add our composer.json and composer.lock to our change list. Both of these files are quite personal and as you add more Drupal Modules, dependencies or Upgrade your Archipelgo and/or Drupal Core and Modules all of these corresponding files will change. See the -f ? Because our base deployment ignores that file and you want it, we \"Force\" add it. Note: At this stage composer.lock won't be added at all because it's still the same as before. So you can only \"add\" files that have changes. git add drupal/composer.json git add -f drupal/composer.lock Now we can see what is new and will be committed by executing: git status You may see something like this: On branch yourOwnOrg-1.0.0-RC3 Changes to be committed: ( use \"git restore --staged <file>...\" to unstage ) new file: drupal/composer.json Changes not staged for commit: ( use \"git add <file>...\" to update what will be committed ) ( use \"git restore <file>...\" to discard changes in working directory ) modified: drupal/scripts/archipelago/deploy.sh modified: drupal/scripts/archipelago/update_deployed.sh Untracked files: ( use \"git add <file>...\" to include in what will be committed ) deploy/ec2-docker/docker-compose.yml drupal/.editorconfig drupal/.gitattributes If you do not want to add each Changes not staged for commit individually (WE recommend you only commit what you need, be warned and take caution) you can also issue an git add . which means add all. git add drupal/scripts/archipelago/deploy.sh git add drupal/scripts/archipelago/update_deployed.sh git add deploy/ec2-docker/docker-compose.yml In this case we are also committing docker-compose.yml which you may have customized and modified to your domain (See Install Guide Step 3 ) deploy.sh and update_deployed.sh scripts. If you ever need to avoid tracking at all certain files you can edit .gitignore file and add more patterns to it (look at it, it's fun!). git commit -m \"Fresh Install of Archipelago for yourOwnOrg\" If you had your email/user account setup correctly (see Prerequisites ) you will see: Fresh Install of Archipelago yourOwnOrg 4 files changed, 360 insertions ( + ) , 46 deletions ( - ) create mode 100644 deploy/ec2-docker/docker-compose.yml create mode 100644 drupal/composer.json And now finally you can push this back to your Fork: git push upstream yourOwnOrg-1.0.0-RC3 And Git will respond with the following. Use your yourOwnAccount personal Github Access Token as password. Username for 'https://github.com' : yourOwnAccount Password for 'https://yourOwnAccount@github.com' : Enumerating objects: 18 , done . Counting objects: 100 % ( 18 /18 ) , done . Compressing objects: 100 % ( 10 /10 ) , done . Writing objects: 100 % ( 10 /10 ) , 2 .26 KiB | 2 .26 MiB/s, done . Total 10 ( delta 5 ) , reused 0 ( delta 0 ) remote: Resolving deltas: 100 % ( 5 /5 ) , completed with 5 local objects. To https://github.com/yourOwnAccount/archipelago-deployment-live d9fa835..3427ce5 yourOwnOrg-1.0.0-RC3 -> yourOwnOrg-1.0.0-RC3 And done. 2. Keeping your Archipelago Modules Updated during releases Releases in Archipelago are a bit different to other OSS projects. When a Release is done (let's say 1.0.0-RC2) we freeze the current release branches in every module we provide, package the release and inmediatelly start with a new Release Cycle (6 months long normally) by creating in each repository a new Set of Branches (for this example 1.0.0-RC3). All new commits, fixes, improvements, features now will ALWAYS go into the Open/on-going new cycle branches (for this example 1.0.0-RC3) and once we are done we do all over again: We freeze ((or this example 1.0.0-RC3) and a new release cycle starts with fresh new \"WIP\" branches (for this example 1.1.0). Some Modules like AMI or Strawberry Runners have their independent Version but are anyways release together. E.g for 1.0.0-RC3 both AMI and Strawberry Runners are 0.2.0. Why? because work started later than the core Archipelago and also because they are not really CORE. So what happens with main branches? In our project main branches are never experimental. They are always a 1:1 with the latest stable release. So main will contain a full commit of 1.0.0-RC2 until we freeze 1.0.0-RC3 when main gets that code. Over and over. Nice right? Which modules belong to Archipelago and follow a release cycle? The following modules are the ones we update on every release: https://github.com/esmero/strawberryfield -> Composer name: strawberryfield/strawberryfield https://github.com/esmero/format_strawberryfield -> Composer name: strawberryfield/format_strawberryfield https://github.com/esmero/webform_strawberryfield -> Composer name: strawberryfield/webform_strawberryfield https://github.com/esmero/ami -> Composer name: archipelago/ami https://github.com/esmero/strawberry_runners -> Composer name: strawberryfield/strawberry_runners We also update macro modules that are meant for deployment like this Repository and https://github.com/esmero/archipelago-deployment To keep your Archipelago up to date, specially once you go custom as described in this Documentation, the process is quite simple. E.g to fetch latest 1.0.0-RC3 updates during the 1.0.0-RC3 release cycle run: docker exec -ti esmero-php bash -c \"composer require strawberryfield/strawberryfield:dev-1.0.0-RC3 strawberryfield/format_strawberryfield:dev-1.0.0-RC3 strawberryfield/webform_strawberryfield:dev-1.0.0-RC3 archipelago/ami:0.2.0.x-dev strawberryfield/strawberry_runners:0.2.0.x-dev strawberryfield/strawberry_runners:0.2.0.x-dev archipelago/archipelago_subtheme:dev-1.0.0-RC3 -W\" And then run any Database updates that may be needed: docker exec -ti esmero-php bash -c \"drush updatedb\" This will bring all the new code and all (except if there are BUGS! )should work as expected. Note: Archipelago really tries hard to be as backwards compatible as possible and rarely you will see a non documented or non dealt with deprecation. Note 2: We of course recommend running always Stable (frozen) release but since code is plastic and fixes will go into a WIP open branch you should be safe enough to move all modules together. You can run these commands any time you need and while the release is open you will get always the latest code (even if its always the same branch). Please follow/subscribe to each Module's Github to be aware of changes/issues and improvements. 3. Keeping your Archipelago's Drupal Contributed Modules and Core updated 3.1 Contributed Modules. To keep your Archipelago's Drupal up to date check your Drupal at https://yoursite.org/admin/modules/update. Make sure you check mostly (yes mostly, no need to overreact) for Security Updates. Not every Drupal contributed module (project) keeps backwards compatibility and we try to test every version we ship (as in this repositorie's composer.lock files) before releasing. Once you detected a major change/requirement, visit the Project's Changelog Website and take some time reading it. If you feel confident its not going to break all, copy the suggested composer command . E.g if you visit https://www.drupal.org/project/google_api_client/releases/8.x-3.2 you will see that the update is suggested as: Install with Composer: $ composer require 'drupal/google_api_client:^3.2' Using the same module as an example, before doing any final updates, check your current running version (take note in case you need to revert) docker exec -ti esmero-php bash -c \"composer info 'drupal/google_api_client\" Keep the version around . Now let's update, which means using the suggested command translated to our own Docker world like this (notice the -W ) docker exec -ti esmero-php bash -c \"composer require 'drupal/google_api_client:^3.2 -W\" And then run any Database updates that may be needed: docker exec -ti esmero-php bash -c \"drush updatedb\" This will update that module. Test your website. Depending on what you update you want to focus first on the functionality it provides and then create/edit/delete a fictuous Digital Object to ensure it did not added any errors to your most beloved Digital Objects workflows. If you see errors, you feel its not acting as it should you can revert by doing: docker exec -ti esmero-php bash -c \"composer require 'drupal/google_api_client:^VERSION_YOU_KEPT_AROUND -W\" And then run any Database updates that may be needed: docker exec -ti esmero-php bash -c \"drush updatedb\" If this happens we encourage you to please \ud83d\udc4f share your finding with our community/slack/Github ISSUE here. 3.1 Drupal Core inside the same major version: Quite similar to a contributed module but normally involves at least 3 dependencies and of course larger changes. Exact Version E.g. Inside a same major version (E.g inside Drupal 9) If you are currently running Drupal 9.0.1 and you want to update to an exact latest (as i write 9.2.4 ) docker exec -ti esmero-php bash -c \"composer require drupal/core:9.2.4 drupal/core-dev:9.2.4 drupal/core-composer-scaffold:9.2.4 drupal/core-project-message:9.2.4 --update-with-dependencies\" Or under Drupal 8, if you are currently running Drupal 8.9.14 and you want to update to an exact latest (as i write 8.9.18 ) docker exec -ti esmero-php bash -c \"composer require drupal/core-dev:8.9.18 drupal/core:8.9.18 drupal/core-composer-scaffold:8.9.18 --update-with-dependencies\" And then for both cases run any Database updates that may be needed: docker exec -ti esmero-php bash -c \"drush updatedb\" Alternative Major Version if you want to only remember a single command and want to be sure to also get all extra packages run for Drupal 9 docker exec -ti esmero-php bash -c \"composer require drupal/core-dev:^9 drupal/core:^9 drupal/core-composer-scaffold:^9 drupal/core-project-message:^9 -W\" Or for Drupal 8 docker exec -ti esmero-php bash -c \"composer require drupal/core-dev:^8 drupal/core:^8 drupal/core-composer-scaffold:^8 drupal/core-project-message:^8 -W\" And then for both cases run any Database updates that may be needed: docker exec -ti esmero-php bash -c \"drush updatedb\" This will always get you the latest Drupal and dependencies allowed by your composer.json 3.2 Drupal Core between major versions: Since mayor versions may bring larger deprecations, contributed modules will stay behind, and the world (and your database may collapse). We really recommend doing some tests first (locally) or following one of our guides. We at Archipelago will always document a larger version upgrade. Currently, the Drupal 8 to Drupal 9 Upgrade is documented in detail here Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback, or open an ISSUE in this Archipelago Deployment Live Repository . Return to Archipelago Live Deployment .","title":"Github Workflow"},{"location":"gitworkflow/#managing-sheltering-pruning-and-nurturing-your-own-custom-archipelago","text":"Now that you have your base Archipelago Live Deployment running (Do you? If not, go back! ) you may be wondering about things like: What happens when I need to update to the next release? How do I keep my Drupal and Modules updated in between releases? Can I add Drupal Modules? Will a new release overwrite all my customizations? What things are safe to customize? How do I keep my very own things in Version Control and safe from others? And many (many) other similar questions","title":"Managing, sheltering, pruning, and nurturing your own custom Archipelago"},{"location":"gitworkflow/#1-keep-your-archipelago-under-version-control-via-github","text":"Archipelagos are living beings. They evolve and become beautiful, closer and closer to your needs. Because of that resetting your particularities on every Archipelago code release is not a good idea nor even recommended. What you want is to keep your own Drupal Settings safe and be able to restore all in case something goes wrong. Your facets, your themes, your Solr fields, your own modules and all their configurations. The ones we ship with every Release will reset your Archipelago's settings to Factory defaults if applied wildly . This is where Github comes in place.","title":"1. Keep your Archipelago under Version Control via Github"},{"location":"gitworkflow/#basic-steps","text":"Prerequisites: - Have an Archipelago Deployment Live instance running - Have Terminal access to your Live Instance - Have a Github account - Have a personal Github Access Token Created - Run git config --global --edit on your Live Instance and Set your user name/email/etc - Note: Opens in Vi ! in case of emergency/panic press ESC and type :x to escape and/or run away in terror. To edit Press i and uncomment the lines. Once Done press ESC and type :x to save.","title":"Basic steps"},{"location":"gitworkflow/#11-start-by-creating-a-git-fork","text":"Let's fork https://github.com/esmero/archipelago-deployment-live under your own Account via the web. Happy Note: Since 2021 keeping also forked branches in sync with the origin can be done via the UI directly.","title":"1.1 Start by creating a Git Fork"},{"location":"gitworkflow/#12-connect-your-live-instance-terminal","text":"Move to your repository's base folder, and let's start by adding your New Fork as a secondary Git Origin . Replace in this command yourOwnAccount with (guess what?) your own account . git remote add upstream https://github.com/yourOwnAccount/archipelago-deployment-live Now check if you have two remotes ( origin => This repository, upstream => your own fork): git remote -v You will see this: origin https://github.com/esmero/archipelago-deployment-live ( fetch ) origin https://github.com/esmero/archipelago-deployment-live ( push ) upstream https://github.com/yourOwnAccount/archipelago-deployment-live ( fetch ) upstream https://github.com/yourOwnAccount/archipelago-deployment-live ( push ) Good!","title":"1.2 Connect your Live instance terminal."},{"location":"gitworkflow/#13-now-lets-create-from-your-current-live-instance-a-new-branch","text":"We will push this branch into your Fork and it will be all yours to maintain. Please replace yourOwnOrg with any Name you want for this. We like to keep the current Branch name in place after your personal prefix. git checkout -b yourOwnOrg-1.0.0-RC3 Good, you now have a new local branch named yourOwnOrg-1.0.0-RC3 and it's time to decide what we are going to push into Github.","title":"1.3 Now let's create from your current Live Instance a new Branch."},{"location":"gitworkflow/#14-push-the-basics","text":"By default our deployment strategy (this repository) ignores a few files you want to have in Github. Also, there are things like the Installed Drupal Modules and PHP Libraries (the Source Code), the Database, Caches and also your Secrets ( .env file) and your drupal settings.php ) file. You FOR SURE do not want to have these in Github and are better suited for a private Backup Storage. Let's start by push ing what you have (no commits, your new yourOwnOrg-1.0.0-RC3 as it is) to your new Fork. From there on we can add new Commits and files. git push upstream yourOwnOrg-1.0.0-RC3 And Git will respond with the following. Use your yourOwnAccount personal Github Access Token as password. Username for 'https://github.com' : yourOwnAccount Password for 'https://yourOwnAccount@github.com' : Total 0 ( delta 0 ) , reused 0 ( delta 0 ) remote: remote: Create a pull request for 'yourOwnOrg-1.0.0-RC3' on GitHub by visiting: remote: https://github.com/yourOwnAccount/archipelago-deployment-live/pull/new/yourOwnOrg-1.0.0-RC3 remote: To https://github.com/yourOwnAccount/archipelago-deployment-live * [ new branch ] yourOwnOrg-1.0.0-RC3 -> yourOwnOrg-1.0.0-RC3","title":"1.4 Push the Basics."},{"location":"gitworkflow/#15-first-commit","text":"Right now this new Branch (go and check it out at https://github.com/yourOwnAccount/archipelago-deployment-live/tree/yourOwnOrg-1.0.0-RC3) will not differ at all from 1.0.0-RC3. That is ok. To make your Branch unique, what we want is to \"commit\" our changes. How do we do this? Let's add our composer.json and composer.lock to our change list. Both of these files are quite personal and as you add more Drupal Modules, dependencies or Upgrade your Archipelgo and/or Drupal Core and Modules all of these corresponding files will change. See the -f ? Because our base deployment ignores that file and you want it, we \"Force\" add it. Note: At this stage composer.lock won't be added at all because it's still the same as before. So you can only \"add\" files that have changes. git add drupal/composer.json git add -f drupal/composer.lock Now we can see what is new and will be committed by executing: git status You may see something like this: On branch yourOwnOrg-1.0.0-RC3 Changes to be committed: ( use \"git restore --staged <file>...\" to unstage ) new file: drupal/composer.json Changes not staged for commit: ( use \"git add <file>...\" to update what will be committed ) ( use \"git restore <file>...\" to discard changes in working directory ) modified: drupal/scripts/archipelago/deploy.sh modified: drupal/scripts/archipelago/update_deployed.sh Untracked files: ( use \"git add <file>...\" to include in what will be committed ) deploy/ec2-docker/docker-compose.yml drupal/.editorconfig drupal/.gitattributes If you do not want to add each Changes not staged for commit individually (WE recommend you only commit what you need, be warned and take caution) you can also issue an git add . which means add all. git add drupal/scripts/archipelago/deploy.sh git add drupal/scripts/archipelago/update_deployed.sh git add deploy/ec2-docker/docker-compose.yml In this case we are also committing docker-compose.yml which you may have customized and modified to your domain (See Install Guide Step 3 ) deploy.sh and update_deployed.sh scripts. If you ever need to avoid tracking at all certain files you can edit .gitignore file and add more patterns to it (look at it, it's fun!). git commit -m \"Fresh Install of Archipelago for yourOwnOrg\" If you had your email/user account setup correctly (see Prerequisites ) you will see: Fresh Install of Archipelago yourOwnOrg 4 files changed, 360 insertions ( + ) , 46 deletions ( - ) create mode 100644 deploy/ec2-docker/docker-compose.yml create mode 100644 drupal/composer.json And now finally you can push this back to your Fork: git push upstream yourOwnOrg-1.0.0-RC3 And Git will respond with the following. Use your yourOwnAccount personal Github Access Token as password. Username for 'https://github.com' : yourOwnAccount Password for 'https://yourOwnAccount@github.com' : Enumerating objects: 18 , done . Counting objects: 100 % ( 18 /18 ) , done . Compressing objects: 100 % ( 10 /10 ) , done . Writing objects: 100 % ( 10 /10 ) , 2 .26 KiB | 2 .26 MiB/s, done . Total 10 ( delta 5 ) , reused 0 ( delta 0 ) remote: Resolving deltas: 100 % ( 5 /5 ) , completed with 5 local objects. To https://github.com/yourOwnAccount/archipelago-deployment-live d9fa835..3427ce5 yourOwnOrg-1.0.0-RC3 -> yourOwnOrg-1.0.0-RC3 And done.","title":"1.5 First Commit"},{"location":"gitworkflow/#2-keeping-your-archipelago-modules-updated-during-releases","text":"Releases in Archipelago are a bit different to other OSS projects. When a Release is done (let's say 1.0.0-RC2) we freeze the current release branches in every module we provide, package the release and inmediatelly start with a new Release Cycle (6 months long normally) by creating in each repository a new Set of Branches (for this example 1.0.0-RC3). All new commits, fixes, improvements, features now will ALWAYS go into the Open/on-going new cycle branches (for this example 1.0.0-RC3) and once we are done we do all over again: We freeze ((or this example 1.0.0-RC3) and a new release cycle starts with fresh new \"WIP\" branches (for this example 1.1.0). Some Modules like AMI or Strawberry Runners have their independent Version but are anyways release together. E.g for 1.0.0-RC3 both AMI and Strawberry Runners are 0.2.0. Why? because work started later than the core Archipelago and also because they are not really CORE. So what happens with main branches? In our project main branches are never experimental. They are always a 1:1 with the latest stable release. So main will contain a full commit of 1.0.0-RC2 until we freeze 1.0.0-RC3 when main gets that code. Over and over. Nice right?","title":"2. Keeping your Archipelago Modules Updated during releases"},{"location":"gitworkflow/#which-modules-belong-to-archipelago-and-follow-a-release-cycle","text":"The following modules are the ones we update on every release: https://github.com/esmero/strawberryfield -> Composer name: strawberryfield/strawberryfield https://github.com/esmero/format_strawberryfield -> Composer name: strawberryfield/format_strawberryfield https://github.com/esmero/webform_strawberryfield -> Composer name: strawberryfield/webform_strawberryfield https://github.com/esmero/ami -> Composer name: archipelago/ami https://github.com/esmero/strawberry_runners -> Composer name: strawberryfield/strawberry_runners We also update macro modules that are meant for deployment like this Repository and https://github.com/esmero/archipelago-deployment To keep your Archipelago up to date, specially once you go custom as described in this Documentation, the process is quite simple. E.g to fetch latest 1.0.0-RC3 updates during the 1.0.0-RC3 release cycle run: docker exec -ti esmero-php bash -c \"composer require strawberryfield/strawberryfield:dev-1.0.0-RC3 strawberryfield/format_strawberryfield:dev-1.0.0-RC3 strawberryfield/webform_strawberryfield:dev-1.0.0-RC3 archipelago/ami:0.2.0.x-dev strawberryfield/strawberry_runners:0.2.0.x-dev strawberryfield/strawberry_runners:0.2.0.x-dev archipelago/archipelago_subtheme:dev-1.0.0-RC3 -W\" And then run any Database updates that may be needed: docker exec -ti esmero-php bash -c \"drush updatedb\" This will bring all the new code and all (except if there are BUGS! )should work as expected. Note: Archipelago really tries hard to be as backwards compatible as possible and rarely you will see a non documented or non dealt with deprecation. Note 2: We of course recommend running always Stable (frozen) release but since code is plastic and fixes will go into a WIP open branch you should be safe enough to move all modules together. You can run these commands any time you need and while the release is open you will get always the latest code (even if its always the same branch). Please follow/subscribe to each Module's Github to be aware of changes/issues and improvements.","title":"Which modules belong to Archipelago and follow a release cycle?"},{"location":"gitworkflow/#3-keeping-your-archipelagos-drupal-contributed-modules-and-core-updated","text":"","title":"3. Keeping your Archipelago's Drupal Contributed Modules and Core updated"},{"location":"gitworkflow/#31-contributed-modules","text":"To keep your Archipelago's Drupal up to date check your Drupal at https://yoursite.org/admin/modules/update. Make sure you check mostly (yes mostly, no need to overreact) for Security Updates. Not every Drupal contributed module (project) keeps backwards compatibility and we try to test every version we ship (as in this repositorie's composer.lock files) before releasing. Once you detected a major change/requirement, visit the Project's Changelog Website and take some time reading it. If you feel confident its not going to break all, copy the suggested composer command . E.g if you visit https://www.drupal.org/project/google_api_client/releases/8.x-3.2 you will see that the update is suggested as: Install with Composer: $ composer require 'drupal/google_api_client:^3.2' Using the same module as an example, before doing any final updates, check your current running version (take note in case you need to revert) docker exec -ti esmero-php bash -c \"composer info 'drupal/google_api_client\" Keep the version around . Now let's update, which means using the suggested command translated to our own Docker world like this (notice the -W ) docker exec -ti esmero-php bash -c \"composer require 'drupal/google_api_client:^3.2 -W\" And then run any Database updates that may be needed: docker exec -ti esmero-php bash -c \"drush updatedb\" This will update that module. Test your website. Depending on what you update you want to focus first on the functionality it provides and then create/edit/delete a fictuous Digital Object to ensure it did not added any errors to your most beloved Digital Objects workflows. If you see errors, you feel its not acting as it should you can revert by doing: docker exec -ti esmero-php bash -c \"composer require 'drupal/google_api_client:^VERSION_YOU_KEPT_AROUND -W\" And then run any Database updates that may be needed: docker exec -ti esmero-php bash -c \"drush updatedb\" If this happens we encourage you to please \ud83d\udc4f share your finding with our community/slack/Github ISSUE here.","title":"3.1 Contributed Modules."},{"location":"gitworkflow/#31-drupal-core-inside-the-same-major-version","text":"Quite similar to a contributed module but normally involves at least 3 dependencies and of course larger changes.","title":"3.1 Drupal Core inside the same major version:"},{"location":"gitworkflow/#exact-version","text":"E.g. Inside a same major version (E.g inside Drupal 9) If you are currently running Drupal 9.0.1 and you want to update to an exact latest (as i write 9.2.4 ) docker exec -ti esmero-php bash -c \"composer require drupal/core:9.2.4 drupal/core-dev:9.2.4 drupal/core-composer-scaffold:9.2.4 drupal/core-project-message:9.2.4 --update-with-dependencies\" Or under Drupal 8, if you are currently running Drupal 8.9.14 and you want to update to an exact latest (as i write 8.9.18 ) docker exec -ti esmero-php bash -c \"composer require drupal/core-dev:8.9.18 drupal/core:8.9.18 drupal/core-composer-scaffold:8.9.18 --update-with-dependencies\" And then for both cases run any Database updates that may be needed: docker exec -ti esmero-php bash -c \"drush updatedb\"","title":"Exact Version"},{"location":"gitworkflow/#alternative-major-version","text":"if you want to only remember a single command and want to be sure to also get all extra packages run for Drupal 9 docker exec -ti esmero-php bash -c \"composer require drupal/core-dev:^9 drupal/core:^9 drupal/core-composer-scaffold:^9 drupal/core-project-message:^9 -W\" Or for Drupal 8 docker exec -ti esmero-php bash -c \"composer require drupal/core-dev:^8 drupal/core:^8 drupal/core-composer-scaffold:^8 drupal/core-project-message:^8 -W\" And then for both cases run any Database updates that may be needed: docker exec -ti esmero-php bash -c \"drush updatedb\" This will always get you the latest Drupal and dependencies allowed by your composer.json","title":"Alternative Major Version"},{"location":"gitworkflow/#32-drupal-core-between-major-versions","text":"Since mayor versions may bring larger deprecations, contributed modules will stay behind, and the world (and your database may collapse). We really recommend doing some tests first (locally) or following one of our guides. We at Archipelago will always document a larger version upgrade. Currently, the Drupal 8 to Drupal 9 Upgrade is documented in detail here Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback, or open an ISSUE in this Archipelago Deployment Live Repository . Return to Archipelago Live Deployment .","title":"3.2 Drupal Core between major versions:"},{"location":"giveortake/","text":"Archipelago Contribution Guide Archipelago welcomes and appreciates any type of contribution, from use cases and needs, questions, documentation, devops and configuration and -- of course -- code, fixes, or new features. To make the process less painful, we recommend you first to read our documentation and deploy a local instance. After that please follow the guidelines below to help you get started. Archipelago welcomes, appreciates, and recognizes any and all types of contribution. This includes input on all use cases and needs, questions or answers, documentation, DevOps, and configurations. We also welcome general ideas, thoughts, and even dreams for the future of our repository! Of course, we also invite you to contribute PHP code, including fixes and new features. We will be helpful, kind, and open. We encourage discussions and always respect one another's opinions, language, gender, style, backgrounds, origins, and destinations, provided they come from the same root values of respect, as stated here. We support conflict resolution using nothing more than basic common sense. We value diversity in all its shapes, forms, colors, epoches, numbers, and kinds, with or without labels, including in-between and evolving. We always assume we can do better and that you have done a lot. Under this very basic social framework, this is how we hope you can contribute: Where The Wild Things Live Archipelago has 5 active GitHub repositories Strawberryfield What? Code: Deals with metadata storage and exposure to Drupal. Events/Subscribers that trigger when content is modified. The way internal pieces of JSON are exposed to the rest of the ecosystem. Core to all of what Archipeleago is as a concept. One of its Drupal forms is a Field. Webform Strawberryfield What? Code: Deals with UI based ingest of content using webforms. How files and media are attached to JSON, how tech md is extracted, and any interaction that happens during the edit and ingest processes via a form. In its Drupal form it provides a Field Widget for Strawberryfield . Format Strawberryfield What? Code: Deals with exposing and transforming the JSON when navigating the site. What is displayed, how it is displayed. Provides templating, metadata display entities via Twig, and direct file downloads. In its Drupal form it provides many field formatters for Strawberryfield` and a content entity for the Twig templates. Archipelago Deployment What? DevOps: Docker-compose deployment strategy, including a full skeleton project with persistence folders for Min.io, DB, Solr, Cantaloupe and Drupal 8. Includes initial deployment configurations, which modules are enabled, how things look in Drupal 8 and some scripts plus the deployment documentation for both OSX and Linux. Archipelago Documentation What? Documentation: This guide and whatever we manage to write to explain Archipelago goes here. Questions, Answers and In Transit Between Both Ends We host a community interaction channel, our google group . This is the best place to ask questions and make suggestions that are not specific to a single module, and/or if you would like to contribute to a larger conversation within our community. Discussions work best in this forum (not excluding GitHub of course), and our official announcements are posted there too. Documentation Workflow Documentation is an evolving effort, and we need help. This guide lives in GitHub in Archipelago Documentation . Documentation and Development Worklfow both work the same way, so keep reading! Development Workflow Start by reading open ISSUES (so you don't end up redoing what someone else is already working on) and looking at our Roadmap for version 1.0.0-RC2 . If the solution to your problem is not there or if there is an unchecked element in the roadmap, this is a great opportunity to help by creating a new ISSUE. Next, start by opening an GitHub ISSUE in any of the 5 GitHub repositories, depending on what it is you are trying to do. Please be concise with the title of your ISSUE so that it is easy to understand. Use Markdown to explain the what, how, etc, of your contribution. Note: Even if something related is already in the works, you can still contribute. Just add your comments on any open ISSUE. Or, if you think you want to contribute with a totally different perspective, feel free to open a new ISSUE anyway. We can always discuss next steps starting from there. Every community has its rhythm and style and our style is just beginning to develop. We are still figuring out what works best for everyone. Once you are done and you feel comfortable working to make a change yourself, take note of the ISSUE number (lets name it #issuenumber ). The gist is: Fork the GitHub repository where you created the ISSUE, decide which branch you want to change. Make a new branch out of that one and name it ISSUE-#issuenumber. E.g if #issuenumber is 6, name your branch ISSUE-6. Make changes in that branch and send a pull request. As a best practice, we encourage pull requests to discuss/fix existing code, new code, and documention changes. For the full step-by-step workflow, we will use Archipelago Documentation and the 1.0.0-RC3 branch as example. The same applies to any of the other repositories: just change the remote urls and use the most current branch name. Example: Set Up Archipelago Documentation GitHub Repository Fork the Archipelago Documentation Upstream source repository to your own personal GitHub account (e.g. YOU). Copy the URL of your Archipelago Documentation fork (you will need it for the git clone command below). $ git clone https://github.com/YOU/archipelago-documentation $ cd archipelago-documentation $ git checkout 1 .0.0-RC3 Set Up Git Remote As upstream $ git remote add upstream https://github.com/esmero/archipelago-documentation $ git fetch upstream $ git merge upstream/1.0.0-RC3 ... Create Your ISSUE Branch Before making changes, make sure you create a branch using the ISSUE number you created for these contributions. $ git checkout -b ISSUE-6 Do Some Clean Up and Test Locally After your code changes, make sure If modifying PHP , run phpcs --standard=Drupal yourchanged.file.php . We (try our best to) use Drupal 8 coding standards. If modifying a MARKDOWN file, make sure it renders well (you can use Textmate, Atom, Textile, etc to preview) and that links are not broken. If writing large pieces of code, add PHP Tests. We can help if you don't know how (tell us in the ISSUE). Tests will be enforced starting with the first stable release. If modifying PHP , please test your changes live on your local instance of Archipelago. All non-documentation modules are already inside web/modules/contrib/ . Commit Changes After verification, commit your changes. This is very good post on how to write commit messages. $ git commit -am 'Fix that Strawberry' Push To The Branch Push your locally committed changes to the remote origin (your fork) $ git push origin ISSUE-6 Create A Pull Request Pull requests can be created via GitHub. This document explains in detail how to create one. After your Pull Request gets peer reviewed and approved, it can be merged. Discussion can happen and peers can ask you for modifications, fixes or more information on how to test. We will be respectful. You will be given credit for all your contributions and shown appreciation. There is no wrong and never too little. There could never be too much! Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Archipelago Contribution Guide"},{"location":"giveortake/#archipelago-contribution-guide","text":"Archipelago welcomes and appreciates any type of contribution, from use cases and needs, questions, documentation, devops and configuration and -- of course -- code, fixes, or new features. To make the process less painful, we recommend you first to read our documentation and deploy a local instance. After that please follow the guidelines below to help you get started. Archipelago welcomes, appreciates, and recognizes any and all types of contribution. This includes input on all use cases and needs, questions or answers, documentation, DevOps, and configurations. We also welcome general ideas, thoughts, and even dreams for the future of our repository! Of course, we also invite you to contribute PHP code, including fixes and new features. We will be helpful, kind, and open. We encourage discussions and always respect one another's opinions, language, gender, style, backgrounds, origins, and destinations, provided they come from the same root values of respect, as stated here. We support conflict resolution using nothing more than basic common sense. We value diversity in all its shapes, forms, colors, epoches, numbers, and kinds, with or without labels, including in-between and evolving. We always assume we can do better and that you have done a lot. Under this very basic social framework, this is how we hope you can contribute:","title":"Archipelago Contribution Guide"},{"location":"giveortake/#where-the-wild-things-live","text":"Archipelago has 5 active GitHub repositories Strawberryfield What? Code: Deals with metadata storage and exposure to Drupal. Events/Subscribers that trigger when content is modified. The way internal pieces of JSON are exposed to the rest of the ecosystem. Core to all of what Archipeleago is as a concept. One of its Drupal forms is a Field. Webform Strawberryfield What? Code: Deals with UI based ingest of content using webforms. How files and media are attached to JSON, how tech md is extracted, and any interaction that happens during the edit and ingest processes via a form. In its Drupal form it provides a Field Widget for Strawberryfield . Format Strawberryfield What? Code: Deals with exposing and transforming the JSON when navigating the site. What is displayed, how it is displayed. Provides templating, metadata display entities via Twig, and direct file downloads. In its Drupal form it provides many field formatters for Strawberryfield` and a content entity for the Twig templates. Archipelago Deployment What? DevOps: Docker-compose deployment strategy, including a full skeleton project with persistence folders for Min.io, DB, Solr, Cantaloupe and Drupal 8. Includes initial deployment configurations, which modules are enabled, how things look in Drupal 8 and some scripts plus the deployment documentation for both OSX and Linux. Archipelago Documentation What? Documentation: This guide and whatever we manage to write to explain Archipelago goes here.","title":"Where The Wild Things Live"},{"location":"giveortake/#questions-answers-and-in-transit-between-both-ends","text":"We host a community interaction channel, our google group . This is the best place to ask questions and make suggestions that are not specific to a single module, and/or if you would like to contribute to a larger conversation within our community. Discussions work best in this forum (not excluding GitHub of course), and our official announcements are posted there too.","title":"Questions, Answers and In Transit Between Both Ends"},{"location":"giveortake/#documentation-workflow","text":"Documentation is an evolving effort, and we need help. This guide lives in GitHub in Archipelago Documentation . Documentation and Development Worklfow both work the same way, so keep reading!","title":"Documentation Workflow"},{"location":"giveortake/#development-workflow","text":"Start by reading open ISSUES (so you don't end up redoing what someone else is already working on) and looking at our Roadmap for version 1.0.0-RC2 . If the solution to your problem is not there or if there is an unchecked element in the roadmap, this is a great opportunity to help by creating a new ISSUE. Next, start by opening an GitHub ISSUE in any of the 5 GitHub repositories, depending on what it is you are trying to do. Please be concise with the title of your ISSUE so that it is easy to understand. Use Markdown to explain the what, how, etc, of your contribution. Note: Even if something related is already in the works, you can still contribute. Just add your comments on any open ISSUE. Or, if you think you want to contribute with a totally different perspective, feel free to open a new ISSUE anyway. We can always discuss next steps starting from there. Every community has its rhythm and style and our style is just beginning to develop. We are still figuring out what works best for everyone. Once you are done and you feel comfortable working to make a change yourself, take note of the ISSUE number (lets name it #issuenumber ). The gist is: Fork the GitHub repository where you created the ISSUE, decide which branch you want to change. Make a new branch out of that one and name it ISSUE-#issuenumber. E.g if #issuenumber is 6, name your branch ISSUE-6. Make changes in that branch and send a pull request. As a best practice, we encourage pull requests to discuss/fix existing code, new code, and documention changes. For the full step-by-step workflow, we will use Archipelago Documentation and the 1.0.0-RC3 branch as example. The same applies to any of the other repositories: just change the remote urls and use the most current branch name.","title":"Development Workflow"},{"location":"giveortake/#example-set-up-archipelago-documentation-github-repository","text":"Fork the Archipelago Documentation Upstream source repository to your own personal GitHub account (e.g. YOU). Copy the URL of your Archipelago Documentation fork (you will need it for the git clone command below). $ git clone https://github.com/YOU/archipelago-documentation $ cd archipelago-documentation $ git checkout 1 .0.0-RC3","title":"Example: Set Up Archipelago Documentation GitHub Repository"},{"location":"giveortake/#set-up-git-remote-as-upstream","text":"$ git remote add upstream https://github.com/esmero/archipelago-documentation $ git fetch upstream $ git merge upstream/1.0.0-RC3 ...","title":"Set Up Git Remote As upstream"},{"location":"giveortake/#create-your-issue-branch","text":"Before making changes, make sure you create a branch using the ISSUE number you created for these contributions. $ git checkout -b ISSUE-6","title":"Create Your ISSUE Branch"},{"location":"giveortake/#do-some-clean-up-and-test-locally","text":"After your code changes, make sure If modifying PHP , run phpcs --standard=Drupal yourchanged.file.php . We (try our best to) use Drupal 8 coding standards. If modifying a MARKDOWN file, make sure it renders well (you can use Textmate, Atom, Textile, etc to preview) and that links are not broken. If writing large pieces of code, add PHP Tests. We can help if you don't know how (tell us in the ISSUE). Tests will be enforced starting with the first stable release. If modifying PHP , please test your changes live on your local instance of Archipelago. All non-documentation modules are already inside web/modules/contrib/ .","title":"Do Some Clean Up and Test Locally"},{"location":"giveortake/#commit-changes","text":"After verification, commit your changes. This is very good post on how to write commit messages. $ git commit -am 'Fix that Strawberry'","title":"Commit Changes"},{"location":"giveortake/#push-to-the-branch","text":"Push your locally committed changes to the remote origin (your fork) $ git push origin ISSUE-6","title":"Push To The Branch"},{"location":"giveortake/#create-a-pull-request","text":"Pull requests can be created via GitHub. This document explains in detail how to create one. After your Pull Request gets peer reviewed and approved, it can be merged. Discussion can happen and peers can ask you for modifications, fixes or more information on how to test. We will be respectful. You will be given credit for all your contributions and shown appreciation. There is no wrong and never too little. There could never be too much! Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Create A Pull Request"},{"location":"googleapi/","text":"Configuration for Google Sheets API To allow the Archipelago Multi Importer (AMI) to read from Google spreadsheets, you first need to configure the Google Sheets API as outlined in the following instructions. Please note: Frequent changes to the Google Sheets API specifications may impact the configurations needed. This set of instructions will only work for individuals using Google accounts affiliated with Organizations. Please contact us on our Archipelago Commons Google Group with any questions/issues. Generating Google OAuth2 Credentials Login to the Google Developer Console . You will see the API & Services Dashboard. If you have not created Credentials or a Project before, you will need to first create a Project. Recommended Project Name: \"Archipelago Multi Importer\" or \"AMI\". The Organization and Location information should be specific to you and your organization/institution. Next, click the Create credentials select box and select OAuth client ID You will now need to Configure the Consent Screen. On the initial OAuth Consent Screen setup, select Internal for User Type. Now enter AMI as the App name, and your email address in the User support email. You may also wish to add Authorized domains (bottom of image below) as well. On the Scopes page, select Add or Remove Scopes . Then either search/filter the API table for the Google Sheets API. Or, under Manually add scopes enter: https://www.googleapis.com/auth/spreadsheets.readonly After selecting or entering in the Google Sheets API, you should see this listed under Sensitive Scopes . Review the information on the Summary page, then Save. You will now be able to Create Oauth client ID . Select Web Application as the Application type Enter \"AMI\" under 'Name' and add any URIs you will be using below. For using AMI within your local Archipelago environment, enter http://localhost:8001/google_api_client/callback All URIs need to include /google_api_client/callback After Saving, you will see a message notifying you that the OAuth client was created. You can copy the Client ID and Client Secret directly from this confirmation message into a text editor. You can also access the information from Credentials in the APIs & Services section in the Developer console, where you will have additional options for downloading, copying, and modifying if needed. On the 'Add Google Api Client account' configuration page, enter the following information using your Client ID and Client Secret . 'Developer Key' is optional. Select Google Sheets API under 'Services' and https://www,googleapis.com/auth/spreadsheets.readonly under 'Scopes'. Check the box for Is Access Type Offline . Select the Save button. You will now need to Authenticate your AMI Google API Client. Return to the Google API Client Listing page. Under the Operation menu on the right-hand side of the AMI client listing, select Authenticate . You will be directed to the Google Consent Screen. You may need to login to your corresponding Google Account before proceeding. When loged in, you will see the following screen requesting that AMI is allowed to \"View your Google Spreadsheets\". Click Allow . On the Google API Client Listing page, your AMI client listing should now have 'Yes' under 'Is Authenticated'. You are now ready to use Google Sheets with AMI! Return to the main AMI documentation page to get started. Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Configuration for Google Sheets API"},{"location":"googleapi/#configuration-for-google-sheets-api","text":"To allow the Archipelago Multi Importer (AMI) to read from Google spreadsheets, you first need to configure the Google Sheets API as outlined in the following instructions. Please note: Frequent changes to the Google Sheets API specifications may impact the configurations needed. This set of instructions will only work for individuals using Google accounts affiliated with Organizations. Please contact us on our Archipelago Commons Google Group with any questions/issues.","title":"Configuration for Google Sheets API"},{"location":"googleapi/#generating-google-oauth2-credentials","text":"Login to the Google Developer Console . You will see the API & Services Dashboard. If you have not created Credentials or a Project before, you will need to first create a Project. Recommended Project Name: \"Archipelago Multi Importer\" or \"AMI\". The Organization and Location information should be specific to you and your organization/institution. Next, click the Create credentials select box and select OAuth client ID You will now need to Configure the Consent Screen. On the initial OAuth Consent Screen setup, select Internal for User Type. Now enter AMI as the App name, and your email address in the User support email. You may also wish to add Authorized domains (bottom of image below) as well. On the Scopes page, select Add or Remove Scopes . Then either search/filter the API table for the Google Sheets API. Or, under Manually add scopes enter: https://www.googleapis.com/auth/spreadsheets.readonly After selecting or entering in the Google Sheets API, you should see this listed under Sensitive Scopes . Review the information on the Summary page, then Save. You will now be able to Create Oauth client ID . Select Web Application as the Application type Enter \"AMI\" under 'Name' and add any URIs you will be using below. For using AMI within your local Archipelago environment, enter http://localhost:8001/google_api_client/callback All URIs need to include /google_api_client/callback After Saving, you will see a message notifying you that the OAuth client was created. You can copy the Client ID and Client Secret directly from this confirmation message into a text editor. You can also access the information from Credentials in the APIs & Services section in the Developer console, where you will have additional options for downloading, copying, and modifying if needed. On the 'Add Google Api Client account' configuration page, enter the following information using your Client ID and Client Secret . 'Developer Key' is optional. Select Google Sheets API under 'Services' and https://www,googleapis.com/auth/spreadsheets.readonly under 'Scopes'. Check the box for Is Access Type Offline . Select the Save button. You will now need to Authenticate your AMI Google API Client. Return to the Google API Client Listing page. Under the Operation menu on the right-hand side of the AMI client listing, select Authenticate . You will be directed to the Google Consent Screen. You may need to login to your corresponding Google Account before proceeding. When loged in, you will see the following screen requesting that AMI is allowed to \"View your Google Spreadsheets\". Click Allow . On the Google API Client Listing page, your AMI client listing should now have 'Yes' under 'Is Authenticated'. You are now ready to use Google Sheets with AMI! Return to the main AMI documentation page to get started. Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Generating Google OAuth2 Credentials"},{"location":"inthewild/","text":"Archipelagos in the Wild Explore Archipelago instances running free across digital realms. Archipelago Community Showcase METRO + Archipelago Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Archipelagos in the Wild"},{"location":"inthewild/#archipelagos-in-the-wild","text":"Explore Archipelago instances running free across digital realms. Archipelago Community Showcase METRO + Archipelago Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Archipelagos in the Wild"},{"location":"metadatatwigs/","text":"Twig Templates and Archipelago Archipelago uses a fast, cached templating system that is core to Drupal, called Twig . In its guts (or its heart?) Archipelago uses this system to transform the close to your needs open schema metadata that lives in every strawberryfield as JSON into close to other one's fixed schema needs metadata . This is quite simple, but it is an essential component of our vision of how a repository should manage metadata. What is Twig? Twig is a template engine for PHP part of Symfony framework. Twig in Symfony Twig in Drupal A template engine is a processor. It allows you to mix and process templates with data to generate an output document . Template: Some type of static Document (we name this a \u201cFrame\u201d) Data: Your Archipelago Digital Object (ADO) info and your Metadata Processor: Allows you to use a rich and expressive language to pick, check, iterate, transform and output your data inside the Template. We refer to this as \u201ccasting\u201d. Where is Twig used in Archipelago? This templating system is exposed to Archipelago users through the UI, and is stored in the repository as content. This setup empowers users to fully control how metadata is transformed and published without touching their individual sources or needing to manage hard-coded configurations. We named these readily accessible and powerful templates Metadata Display entities , but they serve more than just display needs. Twig drives every Page in a Drupal 8/9/10 environment. Twig templates are normally files (.twig.html) that live in your Code. Modules provide Templates, Themes provide Templates Twig drives every aspect of your ADO exposure to the world in Archipelago and even batch Ingest. Strawberryfield Metadata (JSON, your Data) is passed through a Metadata Display Entity which holds: A Twig template (so you do not need to edit Files) A desired output serialization format (the Output Document) Twig Templates as Metadata Display Entities Templates or recipes can be shared, exported, ingested, updated, and adapted in many ways. This means you can make changes quickly without having to wait for the next major release of Archipelago or your favorite Metadata Schema Specs Committee\u2019s agreement to implement the next or the last version. This module not only handles metadata but media assets as well. It will extract local or remote URIs and files from your metadata and render them as media viewers: books, 3D models, images, panoramas, A/V, all with IIIF in its soul. Metadata Display Entities are used for: Display: ADO landing pages (via Drupal Field Formatter) IIIF or JSON driven viewers (via Drupal Field Formatter and using Exposed Metadata Endpoints) Map Formatter (Drupal Field Formatter) Custom Blocks (Drupal Views) Search Result Displays (Drupal Views) Collection and Creative Work Series (old compound) displays (Drupal Views) Machinable Output Exposed Metadata Endpoints (Standalone URLs to access metadata) Batch Ingest AMI Ingest: To transform your CSV data (one row == DATA) to Strawberry field JSON to generate an ADO Twig Templates Shipped with Archipelago Archipelago Ships with: IIIF Manifest V3 for Images (JSON-LD) Metadata Display IIIF Manifest V2 for Images and Documents (JSON-LD) Metadata Display IIIF Manifest V3 for Collections (JSON-LD) Metadata Display IIIF Manifest V3 for Creative Work Series/Compound Objects Parent and Children (JSON-LD) Metadata Displays A General ADO Description (HTML) Metadata Display A Linked Data Display (HTML) Metadata Display GEOJSON (JSON) Metadata Display An AMI (JSON) Ingest Template A Multiple Thumbnails via IIIF and Fontawesome (HTML) Metadata Display A Metadata Abstract for Search Results (HTML) Metadata Display A Simple Dublin Core (XML) Metadata Display MODS 3.7 (XML) Metadata Display A Schema.org (JSON-LD) Metadata Display Carousel (in Bootstrap) for Images (HTML) Metadata Display You can find these templates here: On Github: Local Deployment Live/Production Deployment In your local instance: http://localhost:8001/metadatadisplay/list In your live instance: https://yourdomain.org/metadatadisplay/list Archipelago (the humans) will keep adding and refining these with every release. Instructions and Examples While a lot of core needs and use cases are covered with the Twig Templates shipped with Archipelago, you may want to add more Input elements to your Webforms, which in turn will generate new JSON Values , which in turn you may want to show/expose to end users . Knowing (even if you do not plan to) how to edit or create your own Twig templates is important. This guide covers the Basics of Working With Twig in Archipelago This section contains Full Examples of Common Use Cases This section covers a Recommended Workflow You may also want learn more about what format_strawberryfield can do and what many other possibilities are exposed through our templating system in this guide: Strawberryfield Formatters . Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Twig Templates and Archipelago"},{"location":"metadatatwigs/#twig-templates-and-archipelago","text":"Archipelago uses a fast, cached templating system that is core to Drupal, called Twig . In its guts (or its heart?) Archipelago uses this system to transform the close to your needs open schema metadata that lives in every strawberryfield as JSON into close to other one's fixed schema needs metadata . This is quite simple, but it is an essential component of our vision of how a repository should manage metadata.","title":"Twig Templates and Archipelago"},{"location":"metadatatwigs/#what-is-twig","text":"Twig is a template engine for PHP part of Symfony framework. Twig in Symfony Twig in Drupal A template engine is a processor. It allows you to mix and process templates with data to generate an output document . Template: Some type of static Document (we name this a \u201cFrame\u201d) Data: Your Archipelago Digital Object (ADO) info and your Metadata Processor: Allows you to use a rich and expressive language to pick, check, iterate, transform and output your data inside the Template. We refer to this as \u201ccasting\u201d.","title":"What is Twig?"},{"location":"metadatatwigs/#where-is-twig-used-in-archipelago","text":"This templating system is exposed to Archipelago users through the UI, and is stored in the repository as content. This setup empowers users to fully control how metadata is transformed and published without touching their individual sources or needing to manage hard-coded configurations. We named these readily accessible and powerful templates Metadata Display entities , but they serve more than just display needs. Twig drives every Page in a Drupal 8/9/10 environment. Twig templates are normally files (.twig.html) that live in your Code. Modules provide Templates, Themes provide Templates Twig drives every aspect of your ADO exposure to the world in Archipelago and even batch Ingest. Strawberryfield Metadata (JSON, your Data) is passed through a Metadata Display Entity which holds: A Twig template (so you do not need to edit Files) A desired output serialization format (the Output Document)","title":"Where is Twig used in Archipelago?"},{"location":"metadatatwigs/#twig-templates-as-metadata-display-entities","text":"Templates or recipes can be shared, exported, ingested, updated, and adapted in many ways. This means you can make changes quickly without having to wait for the next major release of Archipelago or your favorite Metadata Schema Specs Committee\u2019s agreement to implement the next or the last version. This module not only handles metadata but media assets as well. It will extract local or remote URIs and files from your metadata and render them as media viewers: books, 3D models, images, panoramas, A/V, all with IIIF in its soul. Metadata Display Entities are used for: Display: ADO landing pages (via Drupal Field Formatter) IIIF or JSON driven viewers (via Drupal Field Formatter and using Exposed Metadata Endpoints) Map Formatter (Drupal Field Formatter) Custom Blocks (Drupal Views) Search Result Displays (Drupal Views) Collection and Creative Work Series (old compound) displays (Drupal Views) Machinable Output Exposed Metadata Endpoints (Standalone URLs to access metadata) Batch Ingest AMI Ingest: To transform your CSV data (one row == DATA) to Strawberry field JSON to generate an ADO","title":"Twig Templates as Metadata Display Entities"},{"location":"metadatatwigs/#twig-templates-shipped-with-archipelago","text":"Archipelago Ships with: IIIF Manifest V3 for Images (JSON-LD) Metadata Display IIIF Manifest V2 for Images and Documents (JSON-LD) Metadata Display IIIF Manifest V3 for Collections (JSON-LD) Metadata Display IIIF Manifest V3 for Creative Work Series/Compound Objects Parent and Children (JSON-LD) Metadata Displays A General ADO Description (HTML) Metadata Display A Linked Data Display (HTML) Metadata Display GEOJSON (JSON) Metadata Display An AMI (JSON) Ingest Template A Multiple Thumbnails via IIIF and Fontawesome (HTML) Metadata Display A Metadata Abstract for Search Results (HTML) Metadata Display A Simple Dublin Core (XML) Metadata Display MODS 3.7 (XML) Metadata Display A Schema.org (JSON-LD) Metadata Display Carousel (in Bootstrap) for Images (HTML) Metadata Display You can find these templates here: On Github: Local Deployment Live/Production Deployment In your local instance: http://localhost:8001/metadatadisplay/list In your live instance: https://yourdomain.org/metadatadisplay/list Archipelago (the humans) will keep adding and refining these with every release.","title":"Twig Templates Shipped with Archipelago"},{"location":"metadatatwigs/#instructions-and-examples","text":"While a lot of core needs and use cases are covered with the Twig Templates shipped with Archipelago, you may want to add more Input elements to your Webforms, which in turn will generate new JSON Values , which in turn you may want to show/expose to end users . Knowing (even if you do not plan to) how to edit or create your own Twig templates is important. This guide covers the Basics of Working With Twig in Archipelago This section contains Full Examples of Common Use Cases This section covers a Recommended Workflow You may also want learn more about what format_strawberryfield can do and what many other possibilities are exposed through our templating system in this guide: Strawberryfield Formatters . Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Instructions and Examples"},{"location":"modifyingfileextensionsinwebform/","text":"Customizing Webforms: Modifying allowable file extensions A guide to walk users through how to modify the Webform Descriptive Metadata to allow additional file extensions to be ingested into Archipelago. This is the default Webform with Archipelago by following archipelago-deployment . Context When creating an Archipelago Digital Object (ADO), on Step 4 of the ingest, Attach Files , there is a step during the ingest to upload the files associated with your ADO. There will be a section on the Webform outlining the maximum number of files allowed, the maximum file size allowed, and the allowed file extensions that can be uploaded. Let's say we are creating an ADO with the media type DigitalDocument and this ADO contains a data set saved as a csv file, but when we get to Step 4 of the ingest workflow we find that csv is not an allowed file extension. Fortunately, Archipelago has no restrictions on what file extensions can be uploaded, but some use cases will require a little configuring to fit a specific need. This guide will walk users through the steps to modify the default Webform, Descriptive Metadata , to allow additional file extensions to be included during an ingest. Prerequisites for following this guide: Running instance of Archipelago (on http://localhost:8001 if you followed the deployment guide verbatim) Admin credentials Let's begin! Managing Webforms Once logged in as admin , the first thing we need to do is navigate to the Webforms page so we can edit the Webform Descriptive Metadata. Click on Manage , then Structure and when the page loads, scroll down and click Webforms . This is where all of the Webforms inside your Archipelago live. For this guide we're going to edit the Webform Descriptive Metadata . Go ahead and click Build under the OPERATIONS column for Descriptive Metadata . Step 3: Editing Elements Here we see all of the elements in Descriptive Metadata ; Title , Media type , Description , Linked Data elements, etc. The element that we want to edit is Upload Associated Documents as this is the field you will use to upload pdf , doc , rtf , txt , etc. files during the ingest workflow. Click on Edit under the OPERATIONS column. A new screen will pop up named Edit Upload Associated Documents element . This is where you can configure the maximum number of values (under ELEMENT SETTINGS ), the maximum file size and also edit the allowed file extensions for this element, which is what we'll be doing. The latter both exist under FILE SETTINGS section, highlighted in the screenshot below. When you scroll down you'll see the Allowed file extensions field. This is where we will add the csv file extension. Please note: All file extensions are separated by a space; no , or . between the values. Once you've added all the file extensions your project needs, scroll down to the bottom of Edit Upload Associated Documents element and click Save . This next step is imperative for saving your changes , scroll to the bottom of your elements list page and click Save elements in order to persist all changes made. Complete Woohoo! Now when you are ingesting a DigitalDocument object, you will be able to add csv files! \ud83c\udf53 Recap When logged in as an admin, we go to Manage > Structure > Webforms and click on Build under the OPERATIONS column of Descriptive Metadata (shortcut: /admin/structure/webform/manage/descriptive_metadata). Then we click on Upload Associated Documents to edit the element, scroll down to the Allowed file extensions field and add csv without . or , separating the values. Click Save at the bottom of the Edit Upload Associated Documents element page and then Save elements at the bottom of the Webform page. That was helpful, but... How do I upload a wav or aiff file for \"MusicRecording\" or an mov file for a \\\"Movie\\\"? The steps are virtually the same as what is outlined in this guide! The difference here is that instead of editing Upload Associated Documents , you will need to edit the field element that is associated with your ADO's media type. For example, with Media type MusicRecording , you will edit Upload Audio File , for Movie , will edit Videos . How do I know which element in Descriptive Metadata to edit per media type? When editing an element inside Descriptive Metadata , at the top of the window Edit Upload Associated Documents element (see Step 3 for a recap on how to get here) there is a tab next to General titled Conditions . Inside of Conditions we have CONDITIONAL LOGIC which is where the Webform is told which Media type needs this element to be visible in the Webform. In the example below, we know that the field element Upload Associated Documents will be visible when DigitalDocument , Thesis and Book are the selected Media type . This is also the place you can add new logic or delete present logic by clicking the + or - next to the TRIGGER/VALUE to create new conditionals. Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Customizing Webforms (Modifying allowable file extensions)"},{"location":"modifyingfileextensionsinwebform/#customizing-webforms-modifying-allowable-file-extensions","text":"A guide to walk users through how to modify the Webform Descriptive Metadata to allow additional file extensions to be ingested into Archipelago. This is the default Webform with Archipelago by following archipelago-deployment .","title":"Customizing Webforms: Modifying allowable file extensions"},{"location":"modifyingfileextensionsinwebform/#context","text":"When creating an Archipelago Digital Object (ADO), on Step 4 of the ingest, Attach Files , there is a step during the ingest to upload the files associated with your ADO. There will be a section on the Webform outlining the maximum number of files allowed, the maximum file size allowed, and the allowed file extensions that can be uploaded. Let's say we are creating an ADO with the media type DigitalDocument and this ADO contains a data set saved as a csv file, but when we get to Step 4 of the ingest workflow we find that csv is not an allowed file extension. Fortunately, Archipelago has no restrictions on what file extensions can be uploaded, but some use cases will require a little configuring to fit a specific need. This guide will walk users through the steps to modify the default Webform, Descriptive Metadata , to allow additional file extensions to be included during an ingest. Prerequisites for following this guide: Running instance of Archipelago (on http://localhost:8001 if you followed the deployment guide verbatim) Admin credentials","title":"Context"},{"location":"modifyingfileextensionsinwebform/#lets-begin","text":"","title":"Let's begin!"},{"location":"modifyingfileextensionsinwebform/#managing-webforms","text":"Once logged in as admin , the first thing we need to do is navigate to the Webforms page so we can edit the Webform Descriptive Metadata. Click on Manage , then Structure and when the page loads, scroll down and click Webforms . This is where all of the Webforms inside your Archipelago live. For this guide we're going to edit the Webform Descriptive Metadata . Go ahead and click Build under the OPERATIONS column for Descriptive Metadata .","title":"Managing Webforms"},{"location":"modifyingfileextensionsinwebform/#step-3-editing-elements","text":"Here we see all of the elements in Descriptive Metadata ; Title , Media type , Description , Linked Data elements, etc. The element that we want to edit is Upload Associated Documents as this is the field you will use to upload pdf , doc , rtf , txt , etc. files during the ingest workflow. Click on Edit under the OPERATIONS column. A new screen will pop up named Edit Upload Associated Documents element . This is where you can configure the maximum number of values (under ELEMENT SETTINGS ), the maximum file size and also edit the allowed file extensions for this element, which is what we'll be doing. The latter both exist under FILE SETTINGS section, highlighted in the screenshot below. When you scroll down you'll see the Allowed file extensions field. This is where we will add the csv file extension. Please note: All file extensions are separated by a space; no , or . between the values. Once you've added all the file extensions your project needs, scroll down to the bottom of Edit Upload Associated Documents element and click Save . This next step is imperative for saving your changes , scroll to the bottom of your elements list page and click Save elements in order to persist all changes made.","title":"Step 3: Editing Elements"},{"location":"modifyingfileextensionsinwebform/#complete","text":"Woohoo! Now when you are ingesting a DigitalDocument object, you will be able to add csv files! \ud83c\udf53","title":"Complete"},{"location":"modifyingfileextensionsinwebform/#recap","text":"When logged in as an admin, we go to Manage > Structure > Webforms and click on Build under the OPERATIONS column of Descriptive Metadata (shortcut: /admin/structure/webform/manage/descriptive_metadata). Then we click on Upload Associated Documents to edit the element, scroll down to the Allowed file extensions field and add csv without . or , separating the values. Click Save at the bottom of the Edit Upload Associated Documents element page and then Save elements at the bottom of the Webform page.","title":"Recap"},{"location":"modifyingfileextensionsinwebform/#that-was-helpful-but","text":"How do I upload a wav or aiff file for \"MusicRecording\" or an mov file for a \\\"Movie\\\"? The steps are virtually the same as what is outlined in this guide! The difference here is that instead of editing Upload Associated Documents , you will need to edit the field element that is associated with your ADO's media type. For example, with Media type MusicRecording , you will edit Upload Audio File , for Movie , will edit Videos . How do I know which element in Descriptive Metadata to edit per media type? When editing an element inside Descriptive Metadata , at the top of the window Edit Upload Associated Documents element (see Step 3 for a recap on how to get here) there is a tab next to General titled Conditions . Inside of Conditions we have CONDITIONAL LOGIC which is where the Webform is told which Media type needs this element to be visible in the Webform. In the example below, we know that the field element Upload Associated Documents will be visible when DigitalDocument , Thesis and Book are the selected Media type . This is also the place you can add new logic or delete present logic by clicking the + or - next to the TRIGGER/VALUE to create new conditionals. Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"That was helpful, but..."},{"location":"moveToLive/","text":"Moving from archipelago-deployment to archipelago-deployment-live What is this documentation for? If you have been using/running/populating with Archipelago Digital Objects an instance that was setup using our simpler to deploy but harder to customize archipelago-deployment strategy and can't wait to move to this one, meant for a larger (and somehow easier to maintain and upgrade on the long run) but (wait!) you do not want to ingest again, setup again, configure users, etc. You already did that! If all that applies this is your documentation. What is this documentation not for? To install an archipelago-deployment-live from scratch or to keep (forever) syncing between the two deployment options in a quantum phase shifting eternum like a Timecrystal. Requirements An instance of archipelago (working, tested) installed using archipelago-deployment as a basis Basic knowledge and instincts on how to run Terminal Commands, copy files, run composer , drush , linux Permissions and git of course. Patience. You can't skip steps here. Also Patience again since you may have stretched (good) your current instance to do way more we thought it could. Time to read main Documentation of this Repo to have a basic knowledge of how this is deployed. Recommended even if you are not going to deploy one from scratch here. For Shell Commands documented here please copy line by line. Not the whole block. Differences between both deployments strategies. In a nutshell: archipelago-deployment-live uses a different folder structure moving configuration storage, data storage outside of your webroot and allows a much finer control of your settings (safer) and docker containers. In a nutshell inside the first nutshell: archipelago-deployment-live also ignores more files so keeping customized versions, your own packages, your own settings around and version controlled is much easier. lastly: archipelago-deployment-live makes more use of Cloud Services, e.g so if you have been running min.io as local mounted storage you may now consider to move storage (files) to a cloud service like AWS S3 Commonalities between both deployments strategies. In a nutshell: Since both run same code and use the same Docker Containers the data is actually the same, all is just persisted in different places. Getting the new repo in place First you need to clone this repository and (hopefully) store in the same parent folder to your current archipelago-deployment one. For the purpose of this tutorial we will assume you have archipelago-deployment cloned in this location: $HOME/archipelago-deployment Locate your archipelago-deployment folder in your terminal. Do an ls to make sure you can see the folder (not the content) and run git clone https://github.com/esmero/archipelago-deployment-live cd archipelago-deployment-live git checkout 1 .0.0-RC3 cd .. cd archipelago-deployment Now you have side by side $HOME/archipelago_deployment and $HOME/archipelago-deployment-live This will give you the base structure. Before touching anything let's start by generating a backup of your current deployment (safety first) Backing up Step 1: Shutdown your docker-compose ensemble. Inside your original archipelago-deployment folder run this: docker-compose down Step 2: Verify all containers are actually down. docker ps The following command should return an empty listing. If anything is still running, wait a little longer and run the following comman again. Step 3: Now let's tar.gz the whole ensemble with data and configs. As an example we will save this into your $HOME folder. As a good practice we append the current date (YEAR-DAY-MONTH) to the filename. Here we assume today is September 1st of 2021. sudo tar -czvpf $HOME /archipelago-deployment-backup-20210109.tar.gz ../archipelago-deployment The process may take a few minutes. Now let's verify all is there and the tar.gz is not corrupt. tar -tvvf $HOME /archipelago-deployment-backup-20210109.tar.gz You will see a listing of files. If corrupt (do you have enough space? did your ssh connection drop?) you will see: tar: Unrecognized archive format Done! If you are running a public instance we can allow ourselves to start docker again to avoid down times. docker-compose up -d ```` ## The directory structures Now that you backed all up we can spend some minutes looking at both directory structures. If you observe both deployment strategies side by side you will inmediatelly notice the most important similarities and also differences. <table> <tr> <th>archipelago-deployment Live</th> <th>archipelago-deployment</th> </tr> <tr> <td valign = \"top\" ><pre>. \u251c\u2500\u2500 config_storage \u2502 \u251c\u2500\u2500 iiifconfig \u2502 \u251c\u2500\u2500 nginxconfig \u2502 \u251c\u2500\u2500 nginxconfig_selfcert \u2502 \u251c\u2500\u2500 php-fpm \u2502 \u2514\u2500\u2500 solrconfig \u251c\u2500\u2500 data_storage \u2502 \u251c\u2500\u2500 db \u2502 \u251c\u2500\u2500 iiifcache \u2502 \u251c\u2500\u2500 iiiftmp \u2502 \u251c\u2500\u2500 letsencrypt \u2502 \u251c\u2500\u2500 minio-data \u2502 \u251c\u2500\u2500 ngnixcache \u2502 \u251c\u2500\u2500 selfcert \u2502 \u251c\u2500\u2500 solrcore \u2502 \u2514\u2500\u2500 solrlib \u251c\u2500\u2500 deploy \u2502 \u251c\u2500\u2500 azure-kubernetes \u2502 \u251c\u2500\u2500 ec2-docker \u2502 \u2514\u2500\u2500 kubernetes \u251c\u2500\u2500 docs \u2514\u2500\u2500 drupal \u2502 \u251c\u2500\u2500 config \u2502 \u251c\u2500\u2500 d8content \u2502 \u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 drush \u2502 \u251c\u2500\u2500 patches \u2502 \u251c\u2500\u2500 persistent \u2502 \u251c\u2500\u2500 private \u2502 \u251c\u2500\u2500 scripts \u2502 \u251c\u2500\u2500 vendor \u2502 \u251c\u2500\u2500 web \u2502 \u2514\u2500\u2500 xdebug </pre></td> <td valign = \"top\" ><pre>. \u251c\u2500\u2500 config \u2502 \u2514\u2500\u2500 sync \u251c\u2500\u2500 d8content \u2502 \u2514\u2500\u2500 metadatadisplays \u251c\u2500\u2500 docs \u251c\u2500\u2500 drush \u2502 \u251c\u2500\u2500 Commands \u2502 \u2514\u2500\u2500 sites \u251c\u2500\u2500 nginxconfigford8 \u251c\u2500\u2500 patches \u251c\u2500\u2500 persistent \u2502 \u251c\u2500\u2500 db \u2502 \u251c\u2500\u2500 iiifcache \u2502 \u251c\u2500\u2500 iiifconfig \u2502 \u251c\u2500\u2500 miniodata \u2502 \u251c\u2500\u2500 solrconfig \u2502 \u251c\u2500\u2500 solrcore \u2502 \u2514\u2500\u2500 solrlib \u251c\u2500\u2500 private \u2502 \u2514\u2500\u2500 webform \u251c\u2500\u2500 scripts \u2502 \u251c\u2500\u2500 archipelago \u2502 \u2514\u2500\u2500 composer \u251c\u2500\u2500 vendor \u2502 \u251c\u2500\u2500 archipelago \u2502 \u251c\u2500\u2500 asm89 \u2502 \u251c\u2500\u2500 aws \u2502 \u251c\u2500\u2500 behat \u2502 \u251c\u2500\u2500 bin \u2502 \u251c\u2500\u2500 brick \u2502 \u251c\u2500\u2500 chi-teck \u2502 \u251c\u2500\u2500 composer \u2502 \u251c\u2500\u2500 consolidation \u2502 \u251c\u2500\u2500 container-interop \u2502 \u251c\u2500\u2500 cweagans \u2502 \u251c\u2500\u2500 data-values \u2502 \u251c\u2500\u2500 dflydev \u2502 \u251c\u2500\u2500 doctrine \u2502 \u251c\u2500\u2500 drupal \u2502 \u251c\u2500\u2500 drush \u2502 \u251c\u2500\u2500 easyrdf \u2502 \u251c\u2500\u2500 egulias \u2502 \u251c\u2500\u2500 enlightn \u2502 \u251c\u2500\u2500 erusev \u2502 \u251c\u2500\u2500 evenement \u2502 \u251c\u2500\u2500 ezyang \u2502 \u251c\u2500\u2500 fabpot \u2502 \u251c\u2500\u2500 fileeye \u2502 \u251c\u2500\u2500 firebase \u2502 \u251c\u2500\u2500 frictionlessdata \u2502 \u251c\u2500\u2500 google \u2502 \u251c\u2500\u2500 graham-campbell \u2502 \u251c\u2500\u2500 grasmash \u2502 \u251c\u2500\u2500 guzzlehttp \u2502 \u251c\u2500\u2500 instaclick \u2502 \u251c\u2500\u2500 jcalderonzumba \u2502 \u251c\u2500\u2500 jean85 \u2502 \u251c\u2500\u2500 jmikola \u2502 \u251c\u2500\u2500 justinrainbow \u2502 \u251c\u2500\u2500 laminas \u2502 \u251c\u2500\u2500 league \u2502 \u251c\u2500\u2500 lsolesen \u2502 \u251c\u2500\u2500 maennchen \u2502 \u251c\u2500\u2500 markbaker \u2502 \u251c\u2500\u2500 masterminds \u2502 \u251c\u2500\u2500 mglaman \u2502 \u251c\u2500\u2500 mhor \u2502 \u251c\u2500\u2500 mikey179 \u2502 \u251c\u2500\u2500 mixnode \u2502 \u251c\u2500\u2500 ml \u2502 \u251c\u2500\u2500 monolog \u2502 \u251c\u2500\u2500 mtdowling \u2502 \u251c\u2500\u2500 myclabs \u2502 \u251c\u2500\u2500 nesbot \u2502 \u251c\u2500\u2500 nette \u2502 \u251c\u2500\u2500 nikic \u2502 \u251c\u2500\u2500 paragonie \u2502 \u251c\u2500\u2500 pear \u2502 \u251c\u2500\u2500 phar-io \u2502 \u251c\u2500\u2500 phenx \u2502 \u251c\u2500\u2500 phpdocumentor \u2502 \u251c\u2500\u2500 phplang \u2502 \u251c\u2500\u2500 phpmailer \u2502 \u251c\u2500\u2500 phpoffice \u2502 \u251c\u2500\u2500 phpoption \u2502 \u251c\u2500\u2500 phpseclib \u2502 \u251c\u2500\u2500 phpspec \u2502 \u251c\u2500\u2500 phpstan \u2502 \u251c\u2500\u2500 phpunit \u2502 \u251c\u2500\u2500 professional-wiki \u2502 \u251c\u2500\u2500 psr \u2502 \u251c\u2500\u2500 psy \u2502 \u251c\u2500\u2500 ralouphie \u2502 \u251c\u2500\u2500 ramsey \u2502 \u251c\u2500\u2500 react \u2502 \u251c\u2500\u2500 sebastian \u2502 \u251c\u2500\u2500 seld \u2502 \u251c\u2500\u2500 sirbrillig \u2502 \u251c\u2500\u2500 solarium \u2502 \u251c\u2500\u2500 squizlabs \u2502 \u251c\u2500\u2500 stack \u2502 \u251c\u2500\u2500 strawberryfield \u2502 \u251c\u2500\u2500 swaggest \u2502 \u251c\u2500\u2500 symfony \u2502 \u251c\u2500\u2500 symfony-cmf \u2502 \u251c\u2500\u2500 theseer \u2502 \u251c\u2500\u2500 twbs \u2502 \u251c\u2500\u2500 twig \u2502 \u251c\u2500\u2500 typo3 \u2502 \u251c\u2500\u2500 vlucas \u2502 \u251c\u2500\u2500 web64 \u2502 \u251c\u2500\u2500 webflo \u2502 \u251c\u2500\u2500 webmozart \u2502 \u251c\u2500\u2500 wikibase \u2502 \u251c\u2500\u2500 wikimedia \u2502 \u2514\u2500\u2500 zaporylie \u251c\u2500\u2500 web \u2502 \u251c\u2500\u2500 core \u2502 \u251c\u2500\u2500 libraries \u2502 \u251c\u2500\u2500 modules \u2502 \u251c\u2500\u2500 profiles \u2502 \u251c\u2500\u2500 sites \u2502 \u2514\u2500\u2500 themes</pre></td> </tr> </table> ## The Data Let 's start by focusing on the `data`, in our case Database, Solr and File (S3 + Private) storage. Collapsing here a few folder will make this easier to read. Marked with a `*` are matching folders that contain DB, Solr Core, the S3 min.io data (if you are using local storage) and also Drupal' s very own ` private ` folder <table> <tr> <th>archipelago-deployment Live</th> <th>archipelago-deployment</th> </tr> <tr> <td valign = \"top\" ><pre>. \u251c\u2500\u2500 config_storage \u251c\u2500\u2500 data_storage \u2502 \u251c\u2500\u2500 * db * \u2502 \u251c\u2500\u2500 iiifcache \u2502 \u251c\u2500\u2500 iiiftmp \u2502 \u251c\u2500\u2500 letsencrypt \u2502 \u251c\u2500\u2500 * minio-data * \u2502 \u251c\u2500\u2500 ngnixcache \u2502 \u251c\u2500\u2500 selfcert \u2502 \u251c\u2500\u2500 solrcore \u2502 \u2514\u2500\u2500 solrlib \u251c\u2500\u2500 deploy \u251c\u2500\u2500 docs \u2514\u2500\u2500 drupal \u2502 \u251c\u2500\u2500 config \u2502 \u251c\u2500\u2500 d8content \u2502 \u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 drush \u2502 \u251c\u2500\u2500 patches \u2502 \u251c\u2500\u2500 persistent \u2502 \u251c\u2500\u2500 * private * \u2502 \u251c\u2500\u2500 scripts \u2502 \u251c\u2500\u2500 vendor \u2502 \u251c\u2500\u2500 web \u2502 \u2514\u2500\u2500 xdebug </pre></td> <td valign = \"top\" ><pre>. \u251c\u2500\u2500 config \u251c\u2500\u2500 d8content \u251c\u2500\u2500 docs \u251c\u2500\u2500 drush \u251c\u2500\u2500 nginxconfigford8 \u251c\u2500\u2500 patches \u251c\u2500\u2500 persistent \u2502 \u251c\u2500\u2500 * db * \u2502 \u251c\u2500\u2500 iiifcache \u2502 \u251c\u2500\u2500 iiifconfig \u2502 \u251c\u2500\u2500 * miniodata * \u2502 \u251c\u2500\u2500 solrconfig \u2502 \u251c\u2500\u2500 * solrcore * \u2502 \u2514\u2500\u2500 solrlib \u251c\u2500\u2500 * private * \u251c\u2500\u2500 scripts \u251c\u2500\u2500 vendor \u251c\u2500\u2500 web </pre></td> </tr> </table> ### Copying the Data into the new Structure To do so we need to stop docker again. This is needed because Databases sometimes keep an open Change Log and Locks in place and if there is any interaction, cron running, your data may end corrupted. #### Step 1: Shutdown your ` docker-compose ` ensemble. Inside your original ` archipelago-deployment ` folder run this: ``` Shell docker-compose down Step 2: Verify all containers are actually down. docker ps Step 3: We will copy DB, min.io (File and ADO storage as files) and Drupal's private (temporary files, caches) folders to its new place sudo cp -rpv persistent/db ../archipelago-deployment-live/data_storage/db sudo cp -rpv persistent/solrcore ../archipelago-deployment-live/data_storage/solrcore sudo cp -rpv persistent/miniodata ../archipelago-deployment-live/data_storage/minio-data sudo cp -rpv private ../archipelago-deployment-live/drupal/private Running -rpv will copy verbosely, recursively while preserving original permissions. Done! You can now start docker-compose again docker-compose up -d The Web Collapsing again a few folder to aid in readability we can now focus on your actual Drupal/Archipelago Code/Web and settings. To be honest (we are) you can easily reinstall and restore all this via composer but we can also Move folders as a learning experience/time and bandwith experience. Marked with a * are matching folders you want to copy over. archipelago-deployment Live archipelago-deployment . \u251c\u2500\u2500 config_storage \u251c\u2500\u2500 data_storage \u251c\u2500\u2500 deploy \u251c\u2500\u2500 docs \u2514\u2500\u2500 drupal \u2502 \u251c\u2500\u2500 * config * \u2502 \u251c\u2500\u2500 d8content \u2502 \u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 drush \u2502 \u251c\u2500\u2500 patches \u2502 \u251c\u2500\u2500 persistent \u2502 \u251c\u2500\u2500 private \u2502 \u251c\u2500\u2500 scripts \u2502 \u251c\u2500\u2500 * vendor * \u2502 \u251c\u2500\u2500 * web * \u2502 \u2514\u2500\u2500 xdebug . \u251c\u2500\u2500 * config * \u2502 \u2514\u2500\u2500 sync \u251c\u2500\u2500 d8content \u2502 \u2514\u2500\u2500 metadatadisplays \u251c\u2500\u2500 docs \u251c\u2500\u2500 drush \u2502 \u251c\u2500\u2500 Commands \u2502 \u2514\u2500\u2500 sites \u251c\u2500\u2500 nginxconfigford8 \u251c\u2500\u2500 patches \u251c\u2500\u2500 persistent \u251c\u2500\u2500 private \u251c\u2500\u2500 scripts \u251c\u2500\u2500 * vendor * \u251c\u2500\u2500 * web * Copying the Web into the new Structure No need to stop docker again. We can do this while your archipelago is still running Step 1: We will copy all important folders over. From your archipelago-deployment folder run: sudo cp -rpv vendor ../archipelago-deployment-live/drupal/vendor sudo cp -rpv web ../archipelago-deployment-live/drupal/web sudo cp -rpv config ../archipelago-deployment-live/drupal/config And also a few files selectively we know you are very fond of! sudo cp -rpv composer.json ../archipelago-deployment-live/drupal/composer.json sudo cp -rpv composer.lock ../archipelago-deployment-live/drupal/composer.lock Done! SSL, Enviromentals, Configurations, Settings and Docker We are almost done. But archipelago-deployment-live has a different, safer way of defining SSL Certs, credentials and global settings for your Archipelago. We will start first by copying settings as they are (most likely not very safe) and then we can update passwords/etc to make your system better prepared for the world. To learn more about these general settings please read this section of the parent Documentation (who likes duplicated documentation? nobody) The gist here is (after reading, please do not skip) is we need to add our service definitions into an .env file. Coming from archipelago-deployment means and assuming you are running AWS Linux 2 using the suggested locations in this document, and you have a vanilla deployment and you followed these instructions ) that your values for $HOME/archipelago-deployment-live/deploy/ec2-docker/.env will be the following: ARCHIPELAGO_ROOT = /home/ec2-user/archipelago-deployment-live ARCHIPELAGO_EMAIL = your@validemail.org ARCHIPELAGO_DOMAIN = your.domain.org MINIO_ACCESS_KEY = minio MINIO_SECRET_KEY = minio123 MYSQL_ROOT_PASSWORD = esmero-db MINIO_BUCKET_MEDIA = archipelago MINIO_FOLDER_PREFIX_MEDIA = / MINIO_BUCKET_CACHE = archipelago MINIO_FOLDER_PREFIX_CACHE = / If you plan on staying on local storage driven min.io MINIO_BUCKET_CACHE and MINIO_FOLDER_PREFIX_CACHE are not going to be used. If you are planning on moving your Storage from local to Cloud driven please replace with the right (e.g AWS IAM keys and Secrets + bucket names and prefixes (folders)). Again, refer to the parent Documentation for setting this up Once you have that in place (double check, if something goes wrong here we can always fine tune and fix again) we need to decide on a new docker-compose file and you may need to customize it depending on your choices, current and future needs. If you already have an SSL certificate and its provided by CertBot you can either copy the certs from your current system (will totally depend on your setup since archipelago-deployment does not provide out of the box SSL Certs) to $HOME/archipelago-deployment-live/data_storage/letsencrypt A normal folder structure for that is: . \u251c\u2500\u2500 accounts \u2502 \u2514\u2500\u2500 acme-v02.api.letsencrypt.org \u2502 \u2514\u2500\u2500 directory \u2502 \u2514\u2500\u2500 cac9f8218ef18e4f11ec053785bbf648 \u2502 \u251c\u2500\u2500 meta.json \u2502 \u251c\u2500\u2500 private_key.json \u2502 \u2514\u2500\u2500 regr.json \u251c\u2500\u2500 archive \u2502 \u251c\u2500\u2500 your.domain.org \u2502 \u251c\u2500\u2500 cert1.pem \u2502 \u251c\u2500\u2500 chain1.pem \u2502 \u251c\u2500\u2500 fullchain1.pem \u2502 \u2514\u2500\u2500 privkey1.pem \u2502 \u251c\u2500\u2500 csr \u2502 \u251c\u2500\u2500 0000_csr-certbot.pem \u2502 \u251c\u2500\u2500 0001_csr-certbot.pem \u2502 \u251c\u2500\u2500 0002_csr-certbot.pem \u2502 \u2514\u2500\u2500 0003_csr-certbot.pem \u251c\u2500\u2500 keys \u2502 \u251c\u2500\u2500 0000_key-certbot.pem \u2502 \u251c\u2500\u2500 0001_key-certbot.pem \u2502 \u251c\u2500\u2500 0002_key-certbot.pem \u2502 \u2514\u2500\u2500 0003_key-certbot.pem \u251c\u2500\u2500 live \u2502 \u251c\u2500\u2500 README \u2502 \u2514\u2500\u2500 your.domain.org \u2502 \u251c\u2500\u2500 cert.pem -> ../../archive/your.domain.org/cert1.pem \u2502 \u251c\u2500\u2500 chain.pem -> ../../archive/your.domain.org/chain1.pem \u2502 \u251c\u2500\u2500 fullchain.pem -> ../../archive/your.domain.org/fullchain1.pem \u2502 \u251c\u2500\u2500 privkey.pem -> ../../archive/your.domain.org/privkey1.pem \u2502 \u2514\u2500\u2500 README \u251c\u2500\u2500 renewal \u2502 \u2514\u2500\u2500 your.domain.org.conf \u2502 \u2514\u2500\u2500 renewal-hooks \u251c\u2500\u2500 deploy \u251c\u2500\u2500 post \u2514\u2500\u2500 pre Or, if your SSL cert is up to renewal you can just let Archipelago request it for you. Renewal will happen auto-magically and you may never ever need to worry about that in the future. Finally. Let's adapt the docker-compose file we need to our previous (but still current!) archipelago-deployment reality Run, for x86/AMD. For ARM64/Apple M1 please check the parent Documentation ) cp $home /archipelago-deployment-live/deploy/ec2-docker/docker-compose-aws-s3.yml $home /archipelago-deployment-live/deploy/ec2-docker/docker-compose.yml nano $home /archipelago-deployment-live/deploy/ec2-docker/docker-compose.yml And replace the content with this slightly modified version. Note, we really only changed lines after this comment # THIS DIFFERS FROM THE NORMAL ONE... # Run docker-compose up -d version: '3.5' services: web: container_name: esmero-web image: staticfloat/nginx-certbot restart: always environment: CERTBOT_EMAIL: ${ ARCHIPELAGO_EMAIL } ENVSUBST_VARS: FQDN FQDN: ${ ARCHIPELAGO_DOMAIN } ports: - \"80:80\" - \"443:443\" volumes: - ${ ARCHIPELAGO_ROOT } /config_storage/nginxconfig/conf.d:/etc/nginx/user.conf.d - ${ ARCHIPELAGO_ROOT } /config_storage/nginxconfig/certbot_extra_domains:/etc/nginx/certbot/extra_domains:ro - ${ ARCHIPELAGO_ROOT } /drupal:/var/www/html:cached - ${ ARCHIPELAGO_ROOT } /data_storage/ngnixcache:/var/cache/nginx - ${ ARCHIPELAGO_ROOT } /data_storage/letsencrypt:/etc/letsencrypt depends_on: - solr - php - db tty: true networks: - host-net - esmero-net php: container_name: esmero-php restart: always image: \"esmero/php-7.4-fpm:1.0.0-RC2-multiarch\" tty: true networks: - host-net - esmero-net volumes: - ${ ARCHIPELAGO_ROOT } /config_storage/php-fpm/www.conf:/usr/local/etc/php-fpm.d/www.conf - ${ ARCHIPELAGO_ROOT } /drupal:/var/www/html:cached environment: MINIO_ACCESS_KEY: ${ MINIO_ACCESS_KEY } MINIO_SECRET_KEY: ${ MINIO_SECRET_KEY } MYSQL_ROOT_PASSWORD: ${ MYSQL_ROOT_PASSWORD } MINIO_BUCKET_MEDIA: ${ MINIO_BUCKET_MEDIA } MINIO_FOLDER_PREFIX_MEDIA: ${ MINIO_FOLDER_PREFIX_MEDIA } solr: container_name: esmero-solr restart: always image: \"solr:8.8.2\" tty: true ports: - \"8983:8983\" networks: - host-net - esmero-net volumes: - ${ ARCHIPELAGO_ROOT } /data_storage/solrcore:/var/solr/data - ${ ARCHIPELAGO_ROOT } /config_storage/solrconfig:/drupalconfig - ${ ARCHIPELAGO_ROOT } /data_storage/solrlib:/opt/solr/contrib/archipelago/lib entrypoint: - docker-entrypoint.sh - solr-precreate - drupal - /drupalconfig db: image: mysql:8.0.22 command: mysqld --default-authentication-plugin = mysql_native_password --max_allowed_packet = 256M container_name: esmero-db restart: always environment: MYSQL_ROOT_PASSWORD: ${ MYSQL_ROOT_PASSWORD } networks: - host-net - esmero-net volumes: - ${ ARCHIPELAGO_ROOT } /data_storage/db:/var/lib/mysql nlp: container_name: esmero-nlp restart: always image: \"esmero/esmero-nlp:1.0\" ports: - \"6400:6400\" networks: - host-net - esmero-net iiif: container_name: esmero-cantaloupe image: \"esmero/cantaloupe-s3:4.1.9RC\" restart: always ports: - \"8183:8182\" networks: - host-net - esmero-net environment: AWS_ACCESS_KEY_ID: ${ MINIO_ACCESS_KEY } AWS_SECRET_ACCESS_KEY: ${ MINIO_SECRET_KEY } # THIS DIFFERS FROM THE STANDARD ONE AND ENABLES LOCAL FILESYSTEM CACHE INSTEAD OF AWS S3 one CACHE_SERVER_DERIVATIVE: FilesystemCache S3SOURCE_BASICLOOKUPSTRATEGY_BUCKET_NAME: ${ MINIO_BUCKET_MEDIA } S3SOURCE_BASICLOOKUPSTRATEGY_PATH_PREFIX: ${ MINIO_FOLDER_PREFIX_MEDIA } S3CACHE_BUCKET_NAME: ${ MINIO_BUCKET_CACHE } S3CACHE_OBJECT_KEY_PREFIX: ${ MINIO_FOLDER_PREFIX_CACHE } XMS: 2g XMX: 4g volumes: - ${ ARCHIPELAGO_ROOT } /config_storage/iiifconfig:/etc/cantaloupe - ${ ARCHIPELAGO_ROOT } /data_storage/iiifcache:/var/cache/cantaloupe - ${ ARCHIPELAGO_ROOT } /data_storage/iiiftmp:/var/cache/cantaloupe_tmp minio: container_name: esmero-minio restart: always image: minio/minio:latest volumes: - ${ ARCHIPELAGO_ROOT } /data_storage/minio-data:/data:cached ports: - \"9000:9000\" - \"9001:9001\" networks: - host-net - esmero-net environment: MINIO_HTTP_TRACE: /tmp/minio-log.txt MINIO_ROOT_USER: ${ MINIO_ACCESS_KEY } MINIO_ROOT_PASSWORD: ${ MINIO_SECRET_KEY } MINIO_ACCESS_KEY: ${ MINIO_ACCESS_KEY } MINIO_SECRET_KEY: ${ MINIO_SECRET_KEY } # THIS DIFFERS FROM THE STANDARD ONE AND ENABLES LOCAL MINIO INSTEAD OF AWS S3 one command: server /data --console-address \":9001\" networks: host-net: driver: bridge esmero-net: driver: bridge internal: true Press CNTRL-X and you are done. Now the final test!! Shutdown the old one, start the new one So we are ready. Testing may be a hit-miss thing here. Did we cover all steps? did a command failed? Good thing is we can start the new ensemble and all our old one will survive and we can come back over and over until we are ready. Let's try! We will start by shutting down the running docker-ensemble cd $HOME /archipelago-deployment docker-compose down Now let's go to our new deployment. Docker starts here in a different folder cd $HOME /archipelago-deployment-live/deploy/ec2-docker docker-compose up You may notice we removed the -d . Why? We want to see all the messages and notice/mark/copy any errors. E.g did the SSL CERT load correctly? Did the MYSQL import worked out? To avoid shutting it down while all starts, please open another Terminal and type: docker ps And look at the up-times. Do you see any Containers restarting? (Where Created and the Status differ for a lot and Status keeps reset to 0?) A healthy deployment will look similar to this ( CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES f794c25db64c esmero/cantaloupe-s3:4.1.9RC2-arm64 \"sh -c 'java -Dcanta\u2026\" 6 seconds ago Up 3 seconds 0 .0.0.0:8183->8182/tcp esmero-cantaloupe 5b791445720f jonasal/nginx-certbot \"/docker-entrypoint.\u2026\" 6 seconds ago Up 3 seconds 0 .0.0.0:80->80/tcp, 0 .0.0.0:443->443/tcp esmero-web e38fbbd86edf esmero/esmero-nlp:1.0.1-RC2-arm64 \"/usr/local/bin/entr\u2026\" 11 seconds ago Up 6 seconds 0 .0.0.0:6400->6400/tcp esmero-nlp c84a0a4d43e9 minio/minio:latest \"/usr/bin/docker-ent\u2026\" 11 seconds ago Up 6 seconds 0 .0.0.0:9000-9001->9000-9001/tcp esmero-minio 3ec176a960c3 esmero/php-7.4-fpm:1.0.0-RC2-multiarch \"docker-php-entrypoi\u2026\" 11 seconds ago Up 6 seconds 9000 /tcp esmero-php e762ad7ea5e2 solr:8.8.2 \"docker-entrypoint.s\u2026\" 11 seconds ago Up 6 seconds 0 .0.0.0:8983->8983/tcp esmero-solr 381166d61f8c mariadb:10.5.10-focal \"docker-entrypoint.s\u2026\" 11 seconds ago Up 6 seconds 3306 /tcp If you feel all seems to be fine open a browser window and visit your website. See if you can log in, see ADOs. If not please you can momentarely shut down this new docker-ensemble and restart the older one. Nothing is lost! Then with time and tea/coffee and fresh eyes come back and re-trace your steps. 95% of the issues are incorrect values in the .env file. The other 5% may be on us. If you run into any trouble please get in touch! Happy deploying! Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback, or open an ISSUE in this Archipelago Deployment Live Repository . Return to Archipelago Deployment Live .","title":"Moving from archipelago-deployment to archipelago-deployment-live"},{"location":"moveToLive/#moving-from-archipelago-deployment-to-archipelago-deployment-live","text":"","title":"Moving from archipelago-deployment to archipelago-deployment-live"},{"location":"moveToLive/#what-is-this-documentation-for","text":"If you have been using/running/populating with Archipelago Digital Objects an instance that was setup using our simpler to deploy but harder to customize archipelago-deployment strategy and can't wait to move to this one, meant for a larger (and somehow easier to maintain and upgrade on the long run) but (wait!) you do not want to ingest again, setup again, configure users, etc. You already did that! If all that applies this is your documentation.","title":"What is this documentation for?"},{"location":"moveToLive/#what-is-this-documentation-not-for","text":"To install an archipelago-deployment-live from scratch or to keep (forever) syncing between the two deployment options in a quantum phase shifting eternum like a Timecrystal.","title":"What is this documentation not for?"},{"location":"moveToLive/#requirements","text":"An instance of archipelago (working, tested) installed using archipelago-deployment as a basis Basic knowledge and instincts on how to run Terminal Commands, copy files, run composer , drush , linux Permissions and git of course. Patience. You can't skip steps here. Also Patience again since you may have stretched (good) your current instance to do way more we thought it could. Time to read main Documentation of this Repo to have a basic knowledge of how this is deployed. Recommended even if you are not going to deploy one from scratch here. For Shell Commands documented here please copy line by line. Not the whole block.","title":"Requirements"},{"location":"moveToLive/#differences-between-both-deployments-strategies","text":"In a nutshell: archipelago-deployment-live uses a different folder structure moving configuration storage, data storage outside of your webroot and allows a much finer control of your settings (safer) and docker containers. In a nutshell inside the first nutshell: archipelago-deployment-live also ignores more files so keeping customized versions, your own packages, your own settings around and version controlled is much easier. lastly: archipelago-deployment-live makes more use of Cloud Services, e.g so if you have been running min.io as local mounted storage you may now consider to move storage (files) to a cloud service like AWS S3","title":"Differences between both deployments strategies."},{"location":"moveToLive/#commonalities-between-both-deployments-strategies","text":"In a nutshell: Since both run same code and use the same Docker Containers the data is actually the same, all is just persisted in different places.","title":"Commonalities between both deployments strategies."},{"location":"moveToLive/#getting-the-new-repo-in-place","text":"First you need to clone this repository and (hopefully) store in the same parent folder to your current archipelago-deployment one. For the purpose of this tutorial we will assume you have archipelago-deployment cloned in this location: $HOME/archipelago-deployment Locate your archipelago-deployment folder in your terminal. Do an ls to make sure you can see the folder (not the content) and run git clone https://github.com/esmero/archipelago-deployment-live cd archipelago-deployment-live git checkout 1 .0.0-RC3 cd .. cd archipelago-deployment Now you have side by side $HOME/archipelago_deployment and $HOME/archipelago-deployment-live This will give you the base structure. Before touching anything let's start by generating a backup of your current deployment (safety first)","title":"Getting the new repo in place"},{"location":"moveToLive/#backing-up","text":"","title":"Backing up"},{"location":"moveToLive/#step-1","text":"Shutdown your docker-compose ensemble. Inside your original archipelago-deployment folder run this: docker-compose down","title":"Step 1:"},{"location":"moveToLive/#step-2","text":"Verify all containers are actually down. docker ps The following command should return an empty listing. If anything is still running, wait a little longer and run the following comman again.","title":"Step 2:"},{"location":"moveToLive/#step-3","text":"Now let's tar.gz the whole ensemble with data and configs. As an example we will save this into your $HOME folder. As a good practice we append the current date (YEAR-DAY-MONTH) to the filename. Here we assume today is September 1st of 2021. sudo tar -czvpf $HOME /archipelago-deployment-backup-20210109.tar.gz ../archipelago-deployment The process may take a few minutes. Now let's verify all is there and the tar.gz is not corrupt. tar -tvvf $HOME /archipelago-deployment-backup-20210109.tar.gz You will see a listing of files. If corrupt (do you have enough space? did your ssh connection drop?) you will see: tar: Unrecognized archive format Done! If you are running a public instance we can allow ourselves to start docker again to avoid down times. docker-compose up -d ```` ## The directory structures Now that you backed all up we can spend some minutes looking at both directory structures. If you observe both deployment strategies side by side you will inmediatelly notice the most important similarities and also differences. <table> <tr> <th>archipelago-deployment Live</th> <th>archipelago-deployment</th> </tr> <tr> <td valign = \"top\" ><pre>. \u251c\u2500\u2500 config_storage \u2502 \u251c\u2500\u2500 iiifconfig \u2502 \u251c\u2500\u2500 nginxconfig \u2502 \u251c\u2500\u2500 nginxconfig_selfcert \u2502 \u251c\u2500\u2500 php-fpm \u2502 \u2514\u2500\u2500 solrconfig \u251c\u2500\u2500 data_storage \u2502 \u251c\u2500\u2500 db \u2502 \u251c\u2500\u2500 iiifcache \u2502 \u251c\u2500\u2500 iiiftmp \u2502 \u251c\u2500\u2500 letsencrypt \u2502 \u251c\u2500\u2500 minio-data \u2502 \u251c\u2500\u2500 ngnixcache \u2502 \u251c\u2500\u2500 selfcert \u2502 \u251c\u2500\u2500 solrcore \u2502 \u2514\u2500\u2500 solrlib \u251c\u2500\u2500 deploy \u2502 \u251c\u2500\u2500 azure-kubernetes \u2502 \u251c\u2500\u2500 ec2-docker \u2502 \u2514\u2500\u2500 kubernetes \u251c\u2500\u2500 docs \u2514\u2500\u2500 drupal \u2502 \u251c\u2500\u2500 config \u2502 \u251c\u2500\u2500 d8content \u2502 \u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 drush \u2502 \u251c\u2500\u2500 patches \u2502 \u251c\u2500\u2500 persistent \u2502 \u251c\u2500\u2500 private \u2502 \u251c\u2500\u2500 scripts \u2502 \u251c\u2500\u2500 vendor \u2502 \u251c\u2500\u2500 web \u2502 \u2514\u2500\u2500 xdebug </pre></td> <td valign = \"top\" ><pre>. \u251c\u2500\u2500 config \u2502 \u2514\u2500\u2500 sync \u251c\u2500\u2500 d8content \u2502 \u2514\u2500\u2500 metadatadisplays \u251c\u2500\u2500 docs \u251c\u2500\u2500 drush \u2502 \u251c\u2500\u2500 Commands \u2502 \u2514\u2500\u2500 sites \u251c\u2500\u2500 nginxconfigford8 \u251c\u2500\u2500 patches \u251c\u2500\u2500 persistent \u2502 \u251c\u2500\u2500 db \u2502 \u251c\u2500\u2500 iiifcache \u2502 \u251c\u2500\u2500 iiifconfig \u2502 \u251c\u2500\u2500 miniodata \u2502 \u251c\u2500\u2500 solrconfig \u2502 \u251c\u2500\u2500 solrcore \u2502 \u2514\u2500\u2500 solrlib \u251c\u2500\u2500 private \u2502 \u2514\u2500\u2500 webform \u251c\u2500\u2500 scripts \u2502 \u251c\u2500\u2500 archipelago \u2502 \u2514\u2500\u2500 composer \u251c\u2500\u2500 vendor \u2502 \u251c\u2500\u2500 archipelago \u2502 \u251c\u2500\u2500 asm89 \u2502 \u251c\u2500\u2500 aws \u2502 \u251c\u2500\u2500 behat \u2502 \u251c\u2500\u2500 bin \u2502 \u251c\u2500\u2500 brick \u2502 \u251c\u2500\u2500 chi-teck \u2502 \u251c\u2500\u2500 composer \u2502 \u251c\u2500\u2500 consolidation \u2502 \u251c\u2500\u2500 container-interop \u2502 \u251c\u2500\u2500 cweagans \u2502 \u251c\u2500\u2500 data-values \u2502 \u251c\u2500\u2500 dflydev \u2502 \u251c\u2500\u2500 doctrine \u2502 \u251c\u2500\u2500 drupal \u2502 \u251c\u2500\u2500 drush \u2502 \u251c\u2500\u2500 easyrdf \u2502 \u251c\u2500\u2500 egulias \u2502 \u251c\u2500\u2500 enlightn \u2502 \u251c\u2500\u2500 erusev \u2502 \u251c\u2500\u2500 evenement \u2502 \u251c\u2500\u2500 ezyang \u2502 \u251c\u2500\u2500 fabpot \u2502 \u251c\u2500\u2500 fileeye \u2502 \u251c\u2500\u2500 firebase \u2502 \u251c\u2500\u2500 frictionlessdata \u2502 \u251c\u2500\u2500 google \u2502 \u251c\u2500\u2500 graham-campbell \u2502 \u251c\u2500\u2500 grasmash \u2502 \u251c\u2500\u2500 guzzlehttp \u2502 \u251c\u2500\u2500 instaclick \u2502 \u251c\u2500\u2500 jcalderonzumba \u2502 \u251c\u2500\u2500 jean85 \u2502 \u251c\u2500\u2500 jmikola \u2502 \u251c\u2500\u2500 justinrainbow \u2502 \u251c\u2500\u2500 laminas \u2502 \u251c\u2500\u2500 league \u2502 \u251c\u2500\u2500 lsolesen \u2502 \u251c\u2500\u2500 maennchen \u2502 \u251c\u2500\u2500 markbaker \u2502 \u251c\u2500\u2500 masterminds \u2502 \u251c\u2500\u2500 mglaman \u2502 \u251c\u2500\u2500 mhor \u2502 \u251c\u2500\u2500 mikey179 \u2502 \u251c\u2500\u2500 mixnode \u2502 \u251c\u2500\u2500 ml \u2502 \u251c\u2500\u2500 monolog \u2502 \u251c\u2500\u2500 mtdowling \u2502 \u251c\u2500\u2500 myclabs \u2502 \u251c\u2500\u2500 nesbot \u2502 \u251c\u2500\u2500 nette \u2502 \u251c\u2500\u2500 nikic \u2502 \u251c\u2500\u2500 paragonie \u2502 \u251c\u2500\u2500 pear \u2502 \u251c\u2500\u2500 phar-io \u2502 \u251c\u2500\u2500 phenx \u2502 \u251c\u2500\u2500 phpdocumentor \u2502 \u251c\u2500\u2500 phplang \u2502 \u251c\u2500\u2500 phpmailer \u2502 \u251c\u2500\u2500 phpoffice \u2502 \u251c\u2500\u2500 phpoption \u2502 \u251c\u2500\u2500 phpseclib \u2502 \u251c\u2500\u2500 phpspec \u2502 \u251c\u2500\u2500 phpstan \u2502 \u251c\u2500\u2500 phpunit \u2502 \u251c\u2500\u2500 professional-wiki \u2502 \u251c\u2500\u2500 psr \u2502 \u251c\u2500\u2500 psy \u2502 \u251c\u2500\u2500 ralouphie \u2502 \u251c\u2500\u2500 ramsey \u2502 \u251c\u2500\u2500 react \u2502 \u251c\u2500\u2500 sebastian \u2502 \u251c\u2500\u2500 seld \u2502 \u251c\u2500\u2500 sirbrillig \u2502 \u251c\u2500\u2500 solarium \u2502 \u251c\u2500\u2500 squizlabs \u2502 \u251c\u2500\u2500 stack \u2502 \u251c\u2500\u2500 strawberryfield \u2502 \u251c\u2500\u2500 swaggest \u2502 \u251c\u2500\u2500 symfony \u2502 \u251c\u2500\u2500 symfony-cmf \u2502 \u251c\u2500\u2500 theseer \u2502 \u251c\u2500\u2500 twbs \u2502 \u251c\u2500\u2500 twig \u2502 \u251c\u2500\u2500 typo3 \u2502 \u251c\u2500\u2500 vlucas \u2502 \u251c\u2500\u2500 web64 \u2502 \u251c\u2500\u2500 webflo \u2502 \u251c\u2500\u2500 webmozart \u2502 \u251c\u2500\u2500 wikibase \u2502 \u251c\u2500\u2500 wikimedia \u2502 \u2514\u2500\u2500 zaporylie \u251c\u2500\u2500 web \u2502 \u251c\u2500\u2500 core \u2502 \u251c\u2500\u2500 libraries \u2502 \u251c\u2500\u2500 modules \u2502 \u251c\u2500\u2500 profiles \u2502 \u251c\u2500\u2500 sites \u2502 \u2514\u2500\u2500 themes</pre></td> </tr> </table> ## The Data Let 's start by focusing on the `data`, in our case Database, Solr and File (S3 + Private) storage. Collapsing here a few folder will make this easier to read. Marked with a `*` are matching folders that contain DB, Solr Core, the S3 min.io data (if you are using local storage) and also Drupal' s very own ` private ` folder <table> <tr> <th>archipelago-deployment Live</th> <th>archipelago-deployment</th> </tr> <tr> <td valign = \"top\" ><pre>. \u251c\u2500\u2500 config_storage \u251c\u2500\u2500 data_storage \u2502 \u251c\u2500\u2500 * db * \u2502 \u251c\u2500\u2500 iiifcache \u2502 \u251c\u2500\u2500 iiiftmp \u2502 \u251c\u2500\u2500 letsencrypt \u2502 \u251c\u2500\u2500 * minio-data * \u2502 \u251c\u2500\u2500 ngnixcache \u2502 \u251c\u2500\u2500 selfcert \u2502 \u251c\u2500\u2500 solrcore \u2502 \u2514\u2500\u2500 solrlib \u251c\u2500\u2500 deploy \u251c\u2500\u2500 docs \u2514\u2500\u2500 drupal \u2502 \u251c\u2500\u2500 config \u2502 \u251c\u2500\u2500 d8content \u2502 \u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 drush \u2502 \u251c\u2500\u2500 patches \u2502 \u251c\u2500\u2500 persistent \u2502 \u251c\u2500\u2500 * private * \u2502 \u251c\u2500\u2500 scripts \u2502 \u251c\u2500\u2500 vendor \u2502 \u251c\u2500\u2500 web \u2502 \u2514\u2500\u2500 xdebug </pre></td> <td valign = \"top\" ><pre>. \u251c\u2500\u2500 config \u251c\u2500\u2500 d8content \u251c\u2500\u2500 docs \u251c\u2500\u2500 drush \u251c\u2500\u2500 nginxconfigford8 \u251c\u2500\u2500 patches \u251c\u2500\u2500 persistent \u2502 \u251c\u2500\u2500 * db * \u2502 \u251c\u2500\u2500 iiifcache \u2502 \u251c\u2500\u2500 iiifconfig \u2502 \u251c\u2500\u2500 * miniodata * \u2502 \u251c\u2500\u2500 solrconfig \u2502 \u251c\u2500\u2500 * solrcore * \u2502 \u2514\u2500\u2500 solrlib \u251c\u2500\u2500 * private * \u251c\u2500\u2500 scripts \u251c\u2500\u2500 vendor \u251c\u2500\u2500 web </pre></td> </tr> </table> ### Copying the Data into the new Structure To do so we need to stop docker again. This is needed because Databases sometimes keep an open Change Log and Locks in place and if there is any interaction, cron running, your data may end corrupted. #### Step 1: Shutdown your ` docker-compose ` ensemble. Inside your original ` archipelago-deployment ` folder run this: ``` Shell docker-compose down","title":"Step 3:"},{"location":"moveToLive/#step-2_1","text":"Verify all containers are actually down. docker ps","title":"Step 2:"},{"location":"moveToLive/#step-3_1","text":"We will copy DB, min.io (File and ADO storage as files) and Drupal's private (temporary files, caches) folders to its new place sudo cp -rpv persistent/db ../archipelago-deployment-live/data_storage/db sudo cp -rpv persistent/solrcore ../archipelago-deployment-live/data_storage/solrcore sudo cp -rpv persistent/miniodata ../archipelago-deployment-live/data_storage/minio-data sudo cp -rpv private ../archipelago-deployment-live/drupal/private Running -rpv will copy verbosely, recursively while preserving original permissions. Done! You can now start docker-compose again docker-compose up -d","title":"Step 3:"},{"location":"moveToLive/#the-web","text":"Collapsing again a few folder to aid in readability we can now focus on your actual Drupal/Archipelago Code/Web and settings. To be honest (we are) you can easily reinstall and restore all this via composer but we can also Move folders as a learning experience/time and bandwith experience. Marked with a * are matching folders you want to copy over. archipelago-deployment Live archipelago-deployment . \u251c\u2500\u2500 config_storage \u251c\u2500\u2500 data_storage \u251c\u2500\u2500 deploy \u251c\u2500\u2500 docs \u2514\u2500\u2500 drupal \u2502 \u251c\u2500\u2500 * config * \u2502 \u251c\u2500\u2500 d8content \u2502 \u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 drush \u2502 \u251c\u2500\u2500 patches \u2502 \u251c\u2500\u2500 persistent \u2502 \u251c\u2500\u2500 private \u2502 \u251c\u2500\u2500 scripts \u2502 \u251c\u2500\u2500 * vendor * \u2502 \u251c\u2500\u2500 * web * \u2502 \u2514\u2500\u2500 xdebug . \u251c\u2500\u2500 * config * \u2502 \u2514\u2500\u2500 sync \u251c\u2500\u2500 d8content \u2502 \u2514\u2500\u2500 metadatadisplays \u251c\u2500\u2500 docs \u251c\u2500\u2500 drush \u2502 \u251c\u2500\u2500 Commands \u2502 \u2514\u2500\u2500 sites \u251c\u2500\u2500 nginxconfigford8 \u251c\u2500\u2500 patches \u251c\u2500\u2500 persistent \u251c\u2500\u2500 private \u251c\u2500\u2500 scripts \u251c\u2500\u2500 * vendor * \u251c\u2500\u2500 * web *","title":"The Web"},{"location":"moveToLive/#copying-the-web-into-the-new-structure","text":"No need to stop docker again. We can do this while your archipelago is still running","title":"Copying the Web into the new Structure"},{"location":"moveToLive/#step-1_1","text":"We will copy all important folders over. From your archipelago-deployment folder run: sudo cp -rpv vendor ../archipelago-deployment-live/drupal/vendor sudo cp -rpv web ../archipelago-deployment-live/drupal/web sudo cp -rpv config ../archipelago-deployment-live/drupal/config And also a few files selectively we know you are very fond of! sudo cp -rpv composer.json ../archipelago-deployment-live/drupal/composer.json sudo cp -rpv composer.lock ../archipelago-deployment-live/drupal/composer.lock Done!","title":"Step 1:"},{"location":"moveToLive/#ssl-enviromentals-configurations-settings-and-docker","text":"We are almost done. But archipelago-deployment-live has a different, safer way of defining SSL Certs, credentials and global settings for your Archipelago. We will start first by copying settings as they are (most likely not very safe) and then we can update passwords/etc to make your system better prepared for the world. To learn more about these general settings please read this section of the parent Documentation (who likes duplicated documentation? nobody) The gist here is (after reading, please do not skip) is we need to add our service definitions into an .env file. Coming from archipelago-deployment means and assuming you are running AWS Linux 2 using the suggested locations in this document, and you have a vanilla deployment and you followed these instructions ) that your values for $HOME/archipelago-deployment-live/deploy/ec2-docker/.env will be the following: ARCHIPELAGO_ROOT = /home/ec2-user/archipelago-deployment-live ARCHIPELAGO_EMAIL = your@validemail.org ARCHIPELAGO_DOMAIN = your.domain.org MINIO_ACCESS_KEY = minio MINIO_SECRET_KEY = minio123 MYSQL_ROOT_PASSWORD = esmero-db MINIO_BUCKET_MEDIA = archipelago MINIO_FOLDER_PREFIX_MEDIA = / MINIO_BUCKET_CACHE = archipelago MINIO_FOLDER_PREFIX_CACHE = / If you plan on staying on local storage driven min.io MINIO_BUCKET_CACHE and MINIO_FOLDER_PREFIX_CACHE are not going to be used. If you are planning on moving your Storage from local to Cloud driven please replace with the right (e.g AWS IAM keys and Secrets + bucket names and prefixes (folders)). Again, refer to the parent Documentation for setting this up Once you have that in place (double check, if something goes wrong here we can always fine tune and fix again) we need to decide on a new docker-compose file and you may need to customize it depending on your choices, current and future needs. If you already have an SSL certificate and its provided by CertBot you can either copy the certs from your current system (will totally depend on your setup since archipelago-deployment does not provide out of the box SSL Certs) to $HOME/archipelago-deployment-live/data_storage/letsencrypt A normal folder structure for that is: . \u251c\u2500\u2500 accounts \u2502 \u2514\u2500\u2500 acme-v02.api.letsencrypt.org \u2502 \u2514\u2500\u2500 directory \u2502 \u2514\u2500\u2500 cac9f8218ef18e4f11ec053785bbf648 \u2502 \u251c\u2500\u2500 meta.json \u2502 \u251c\u2500\u2500 private_key.json \u2502 \u2514\u2500\u2500 regr.json \u251c\u2500\u2500 archive \u2502 \u251c\u2500\u2500 your.domain.org \u2502 \u251c\u2500\u2500 cert1.pem \u2502 \u251c\u2500\u2500 chain1.pem \u2502 \u251c\u2500\u2500 fullchain1.pem \u2502 \u2514\u2500\u2500 privkey1.pem \u2502 \u251c\u2500\u2500 csr \u2502 \u251c\u2500\u2500 0000_csr-certbot.pem \u2502 \u251c\u2500\u2500 0001_csr-certbot.pem \u2502 \u251c\u2500\u2500 0002_csr-certbot.pem \u2502 \u2514\u2500\u2500 0003_csr-certbot.pem \u251c\u2500\u2500 keys \u2502 \u251c\u2500\u2500 0000_key-certbot.pem \u2502 \u251c\u2500\u2500 0001_key-certbot.pem \u2502 \u251c\u2500\u2500 0002_key-certbot.pem \u2502 \u2514\u2500\u2500 0003_key-certbot.pem \u251c\u2500\u2500 live \u2502 \u251c\u2500\u2500 README \u2502 \u2514\u2500\u2500 your.domain.org \u2502 \u251c\u2500\u2500 cert.pem -> ../../archive/your.domain.org/cert1.pem \u2502 \u251c\u2500\u2500 chain.pem -> ../../archive/your.domain.org/chain1.pem \u2502 \u251c\u2500\u2500 fullchain.pem -> ../../archive/your.domain.org/fullchain1.pem \u2502 \u251c\u2500\u2500 privkey.pem -> ../../archive/your.domain.org/privkey1.pem \u2502 \u2514\u2500\u2500 README \u251c\u2500\u2500 renewal \u2502 \u2514\u2500\u2500 your.domain.org.conf \u2502 \u2514\u2500\u2500 renewal-hooks \u251c\u2500\u2500 deploy \u251c\u2500\u2500 post \u2514\u2500\u2500 pre Or, if your SSL cert is up to renewal you can just let Archipelago request it for you. Renewal will happen auto-magically and you may never ever need to worry about that in the future. Finally. Let's adapt the docker-compose file we need to our previous (but still current!) archipelago-deployment reality Run, for x86/AMD. For ARM64/Apple M1 please check the parent Documentation ) cp $home /archipelago-deployment-live/deploy/ec2-docker/docker-compose-aws-s3.yml $home /archipelago-deployment-live/deploy/ec2-docker/docker-compose.yml nano $home /archipelago-deployment-live/deploy/ec2-docker/docker-compose.yml And replace the content with this slightly modified version. Note, we really only changed lines after this comment # THIS DIFFERS FROM THE NORMAL ONE... # Run docker-compose up -d version: '3.5' services: web: container_name: esmero-web image: staticfloat/nginx-certbot restart: always environment: CERTBOT_EMAIL: ${ ARCHIPELAGO_EMAIL } ENVSUBST_VARS: FQDN FQDN: ${ ARCHIPELAGO_DOMAIN } ports: - \"80:80\" - \"443:443\" volumes: - ${ ARCHIPELAGO_ROOT } /config_storage/nginxconfig/conf.d:/etc/nginx/user.conf.d - ${ ARCHIPELAGO_ROOT } /config_storage/nginxconfig/certbot_extra_domains:/etc/nginx/certbot/extra_domains:ro - ${ ARCHIPELAGO_ROOT } /drupal:/var/www/html:cached - ${ ARCHIPELAGO_ROOT } /data_storage/ngnixcache:/var/cache/nginx - ${ ARCHIPELAGO_ROOT } /data_storage/letsencrypt:/etc/letsencrypt depends_on: - solr - php - db tty: true networks: - host-net - esmero-net php: container_name: esmero-php restart: always image: \"esmero/php-7.4-fpm:1.0.0-RC2-multiarch\" tty: true networks: - host-net - esmero-net volumes: - ${ ARCHIPELAGO_ROOT } /config_storage/php-fpm/www.conf:/usr/local/etc/php-fpm.d/www.conf - ${ ARCHIPELAGO_ROOT } /drupal:/var/www/html:cached environment: MINIO_ACCESS_KEY: ${ MINIO_ACCESS_KEY } MINIO_SECRET_KEY: ${ MINIO_SECRET_KEY } MYSQL_ROOT_PASSWORD: ${ MYSQL_ROOT_PASSWORD } MINIO_BUCKET_MEDIA: ${ MINIO_BUCKET_MEDIA } MINIO_FOLDER_PREFIX_MEDIA: ${ MINIO_FOLDER_PREFIX_MEDIA } solr: container_name: esmero-solr restart: always image: \"solr:8.8.2\" tty: true ports: - \"8983:8983\" networks: - host-net - esmero-net volumes: - ${ ARCHIPELAGO_ROOT } /data_storage/solrcore:/var/solr/data - ${ ARCHIPELAGO_ROOT } /config_storage/solrconfig:/drupalconfig - ${ ARCHIPELAGO_ROOT } /data_storage/solrlib:/opt/solr/contrib/archipelago/lib entrypoint: - docker-entrypoint.sh - solr-precreate - drupal - /drupalconfig db: image: mysql:8.0.22 command: mysqld --default-authentication-plugin = mysql_native_password --max_allowed_packet = 256M container_name: esmero-db restart: always environment: MYSQL_ROOT_PASSWORD: ${ MYSQL_ROOT_PASSWORD } networks: - host-net - esmero-net volumes: - ${ ARCHIPELAGO_ROOT } /data_storage/db:/var/lib/mysql nlp: container_name: esmero-nlp restart: always image: \"esmero/esmero-nlp:1.0\" ports: - \"6400:6400\" networks: - host-net - esmero-net iiif: container_name: esmero-cantaloupe image: \"esmero/cantaloupe-s3:4.1.9RC\" restart: always ports: - \"8183:8182\" networks: - host-net - esmero-net environment: AWS_ACCESS_KEY_ID: ${ MINIO_ACCESS_KEY } AWS_SECRET_ACCESS_KEY: ${ MINIO_SECRET_KEY } # THIS DIFFERS FROM THE STANDARD ONE AND ENABLES LOCAL FILESYSTEM CACHE INSTEAD OF AWS S3 one CACHE_SERVER_DERIVATIVE: FilesystemCache S3SOURCE_BASICLOOKUPSTRATEGY_BUCKET_NAME: ${ MINIO_BUCKET_MEDIA } S3SOURCE_BASICLOOKUPSTRATEGY_PATH_PREFIX: ${ MINIO_FOLDER_PREFIX_MEDIA } S3CACHE_BUCKET_NAME: ${ MINIO_BUCKET_CACHE } S3CACHE_OBJECT_KEY_PREFIX: ${ MINIO_FOLDER_PREFIX_CACHE } XMS: 2g XMX: 4g volumes: - ${ ARCHIPELAGO_ROOT } /config_storage/iiifconfig:/etc/cantaloupe - ${ ARCHIPELAGO_ROOT } /data_storage/iiifcache:/var/cache/cantaloupe - ${ ARCHIPELAGO_ROOT } /data_storage/iiiftmp:/var/cache/cantaloupe_tmp minio: container_name: esmero-minio restart: always image: minio/minio:latest volumes: - ${ ARCHIPELAGO_ROOT } /data_storage/minio-data:/data:cached ports: - \"9000:9000\" - \"9001:9001\" networks: - host-net - esmero-net environment: MINIO_HTTP_TRACE: /tmp/minio-log.txt MINIO_ROOT_USER: ${ MINIO_ACCESS_KEY } MINIO_ROOT_PASSWORD: ${ MINIO_SECRET_KEY } MINIO_ACCESS_KEY: ${ MINIO_ACCESS_KEY } MINIO_SECRET_KEY: ${ MINIO_SECRET_KEY } # THIS DIFFERS FROM THE STANDARD ONE AND ENABLES LOCAL MINIO INSTEAD OF AWS S3 one command: server /data --console-address \":9001\" networks: host-net: driver: bridge esmero-net: driver: bridge internal: true Press CNTRL-X and you are done. Now the final test!!","title":"SSL, Enviromentals, Configurations, Settings and Docker"},{"location":"moveToLive/#shutdown-the-old-one-start-the-new-one","text":"So we are ready. Testing may be a hit-miss thing here. Did we cover all steps? did a command failed? Good thing is we can start the new ensemble and all our old one will survive and we can come back over and over until we are ready. Let's try! We will start by shutting down the running docker-ensemble cd $HOME /archipelago-deployment docker-compose down Now let's go to our new deployment. Docker starts here in a different folder cd $HOME /archipelago-deployment-live/deploy/ec2-docker docker-compose up You may notice we removed the -d . Why? We want to see all the messages and notice/mark/copy any errors. E.g did the SSL CERT load correctly? Did the MYSQL import worked out? To avoid shutting it down while all starts, please open another Terminal and type: docker ps And look at the up-times. Do you see any Containers restarting? (Where Created and the Status differ for a lot and Status keeps reset to 0?) A healthy deployment will look similar to this ( CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES f794c25db64c esmero/cantaloupe-s3:4.1.9RC2-arm64 \"sh -c 'java -Dcanta\u2026\" 6 seconds ago Up 3 seconds 0 .0.0.0:8183->8182/tcp esmero-cantaloupe 5b791445720f jonasal/nginx-certbot \"/docker-entrypoint.\u2026\" 6 seconds ago Up 3 seconds 0 .0.0.0:80->80/tcp, 0 .0.0.0:443->443/tcp esmero-web e38fbbd86edf esmero/esmero-nlp:1.0.1-RC2-arm64 \"/usr/local/bin/entr\u2026\" 11 seconds ago Up 6 seconds 0 .0.0.0:6400->6400/tcp esmero-nlp c84a0a4d43e9 minio/minio:latest \"/usr/bin/docker-ent\u2026\" 11 seconds ago Up 6 seconds 0 .0.0.0:9000-9001->9000-9001/tcp esmero-minio 3ec176a960c3 esmero/php-7.4-fpm:1.0.0-RC2-multiarch \"docker-php-entrypoi\u2026\" 11 seconds ago Up 6 seconds 9000 /tcp esmero-php e762ad7ea5e2 solr:8.8.2 \"docker-entrypoint.s\u2026\" 11 seconds ago Up 6 seconds 0 .0.0.0:8983->8983/tcp esmero-solr 381166d61f8c mariadb:10.5.10-focal \"docker-entrypoint.s\u2026\" 11 seconds ago Up 6 seconds 3306 /tcp If you feel all seems to be fine open a browser window and visit your website. See if you can log in, see ADOs. If not please you can momentarely shut down this new docker-ensemble and restart the older one. Nothing is lost! Then with time and tea/coffee and fresh eyes come back and re-trace your steps. 95% of the issues are incorrect values in the .env file. The other 5% may be on us. If you run into any trouble please get in touch! Happy deploying! Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback, or open an ISSUE in this Archipelago Deployment Live Repository . Return to Archipelago Deployment Live .","title":"Shutdown the old one, start the new one"},{"location":"osx/","text":"Installing Archipelago on OSX About running terminal commands This guide assumes you are comfortable enough running terminal (bash) commands on an OSX Computer. We made sure that you can copy and paste each of these commands from this guide directly into your terminal. You will notice sometimes commands span more than a single line of text. If that is the case, always make sure you copy and paste a single line at a time and press the Enter key afterwards. We suggest also you look at the output. If something fails (and we hope it does not) troubleshooting will be much easier if you can share that output when asking for help. Happy deploying! Prerequisites (Don't skip) OSX: Install Docker for Mac For OSX Catalina or Big Sur on Intel (i5/i7) the tested version is: 3.3.3(64133) . You may go newer of course. For Big Sur and Apple Silicon M1 Chips please read https://docs.docker.com/docker-for-mac/apple-silicon/. You may need to enable manual compatibility mode in your docker-compose.yml file for the esmero-php and esmero-cantaloupe containers. In Preferences -> General : check Use gRPC FUSE for file sharing and restart. Specially if you are using your $HOME folder for deploying e.g /Users/username In Preferences -> Resources : 4 Gbytes of RAM is the recommended minimun and works, 8 Gbytes is faster and snappier. Install Github Desktop At least 10 Gbytes of free space (to get started) Being able to open a terminal Note: Recent OSX and newer Macs ship with 2 annoying things . Apple Cloud Syncing User Folders and (wait for it), Case insensitive File Systems. If you happy with your shiny new Mac (like i was) we aware that its better to deploy anything mounted outside of the /User folder, or even better, in an external drive formatted using a Case Sensitive Unix Filesystem (Mac OS Extended (Case-sensitive, Journaled)). Note 2: \"Use gRPC FUSE for file sharing\" experience may vary, recent Docker for Mac do it well. In older RC1 ones it was evil. Changing/Disabling it after having installed Archipelago may affect your S3/Minio storage accesibility. Please let us know what your experience on this is. Wait! Question: Do you have a previous version of Archipelago running? If so, let's give that hard working repository a break first. If not, skip to Step 1 : Open a terminal (you have that already right?) and go to your previous download/git clone folder and run: docker-compose down docker-compose rm Can't remember where you downloaded it? Ok. We can deal with that! Let's stop the containers gracefully first, run: docker stop esmero-web docker stop esmero-solr docker stop esmero-db docker stop esmero-cantaloupe docker stop esmero-php docker stop esmero-minio Now we need to remove them, run: docker rm esmero-web docker rm esmero-solr docker rm esmero-db docker rm esmero-cantaloupe docker rm esmero-php docker rm esmero-minio Ok, now we are ready to start. Step 1: Docker Deployment git clone https://github.com/esmero/archipelago-deployment.git archipelago-deployment cd archipelago-deployment git checkout 1 .0.0-RC3 cp docker-compose-osx.yml docker-compose.yml docker-compose up -d Note: If you are running from an external Drive or a partition/filesystem that is Case Sensitive and is not syncing automatically to Apple Cloud you can also use docker-compose-linux.yml Note2: docker-compose.yml is git ignored in case you make local adjustments or changes to it. Step 2: Set up your Minio S3 bucket Once all containers are up and running (you can do a docker ps to check), access http://localhost:9000 using your most loved Web Browser with the following credentials: user:minio pass:minio123 and create a bucket named \"archipelago\". To do so press the red/coral + button on the bottom-right side and press the Bucket icon , it has a tooltip that says \"create bucket\". Write archipelago and submit, done! That is where we will persist all your Files and also your File copies of each Digital Object. You can always go there and explore what Archipelago (well really Strawberryfield does the hard work) has persisted so you can get comfortable with our architecture. Step 3: Deploy Drupal 8.9.14 and the awesome Archipelago Modules The following will run composer inside the esmero-php container to download all dependencies and Drupal Core too. docker exec -ti esmero-php bash -c \"composer install\" Once that command finishes run our setup script: docker exec -ti esmero-php bash -c 'scripts/archipelago/setup.sh' Explanation: That script will append some important configurations to your local web/sites/default/settings.php . Note: We say local because your whole Drupal web root (the one you cloned) is also mounted inside the esmero-php and esmero-web containers. So edits to, e.g PHP files, can be done without accessing the container directly from your local folder. If this is the first time you Deploy Drupal using the provided Configurations run: docker exec -ti -u www-data esmero-php bash -c \"cd web;../vendor/bin/drush -y si --verbose config_installer config_installer_sync_configure_form.sync_directory=/var/www/html/config/sync/ --db-url=mysql://root:esmerodb@esmero-db/drupal8 --account-name=admin --account-pass=archipelago -r=/var/www/html/web --sites-subdir=default --notify=false install_configure_form.enable_update_status_module=NULL install_configure_form.enable_update_status_emails=NULL;drush cr;chown -R www-data:www-data sites;\" This will give you an admin Drupal user with archipelago as password (!change this if running on a public instance!) Note: About Steps 2-3, you don't need to/nor should do this more than once. You can destroy/stop/update and recreated your Docker containers and start again, git pull and your Drupal and Data will persist once you passed Installation complete message. I repeat, all other container's data is persisted inside the persistent/ folder contained in this cloned git repository. Drupal and all its code is visible, editable and stable inside your web/ folder. Step 4: Create a \"demo \"and a \"jsonapi\" user using drush docker exec -ti esmero-php bash -c 'drush ucrt demo --password=\"demo\"; drush urol metadata_pro \"demo\"' docker exec -ti esmero-php bash -c 'drush ucrt jsonapi --password=\"jsonapi\"; drush urol metadata_api \"jsonapi\"' Step 5: Ingest some Metadata Displays to make playing much more interactive Archipelago is more fun without having to start writing Metadata Displays (in Twig) before you know what they actually are. Since you should now have a jsonapi user and jsonapi should be enabled, you can use that awesome functionality of D8 to get that done. We have 4 demo Metadata Display Entities that go well with the demo Webform we provided. To do that execute in your shell (copy and paste) docker exec -ti esmero-php bash -c 'scripts/archipelago/deploy.sh' Open your most loved Web Browser and point it to http://localhost:8001 Note: It can take some time to start the first time (Drupal needs some warming up). Also, to make this docker-compose easier to use we are doing something named bind mounting (or similar...) your folders. Good thing is you can edit files in your machine and they get updated instantly to docker. bad thing, OSX driver runs slower than on Linux. Speed is a huge factor here, but you get the flexibility of changing, backing up and persisting files without needing a Docker University Degree. Need help? Blue Screen? Missed a step? Need a hug and such? If you see any issues or errors or need help with a step, please let us know (ASAP!). You can either open an issue in this repository or use the Google Group . We are here to help. If you like this, let us know! Caring & Coding + Fixing + Testing Diego Pino Giancarlo Birello Allison Lund Albert Min License GPLv3","title":"Installing Archipelago on OSX"},{"location":"osx/#installing-archipelago-on-osx","text":"","title":"Installing Archipelago on OSX"},{"location":"osx/#about-running-terminal-commands","text":"This guide assumes you are comfortable enough running terminal (bash) commands on an OSX Computer. We made sure that you can copy and paste each of these commands from this guide directly into your terminal. You will notice sometimes commands span more than a single line of text. If that is the case, always make sure you copy and paste a single line at a time and press the Enter key afterwards. We suggest also you look at the output. If something fails (and we hope it does not) troubleshooting will be much easier if you can share that output when asking for help. Happy deploying!","title":"About running terminal commands"},{"location":"osx/#prerequisites-dont-skip","text":"","title":"Prerequisites (Don't skip)"},{"location":"osx/#osx","text":"Install Docker for Mac For OSX Catalina or Big Sur on Intel (i5/i7) the tested version is: 3.3.3(64133) . You may go newer of course. For Big Sur and Apple Silicon M1 Chips please read https://docs.docker.com/docker-for-mac/apple-silicon/. You may need to enable manual compatibility mode in your docker-compose.yml file for the esmero-php and esmero-cantaloupe containers. In Preferences -> General : check Use gRPC FUSE for file sharing and restart. Specially if you are using your $HOME folder for deploying e.g /Users/username In Preferences -> Resources : 4 Gbytes of RAM is the recommended minimun and works, 8 Gbytes is faster and snappier. Install Github Desktop At least 10 Gbytes of free space (to get started) Being able to open a terminal Note: Recent OSX and newer Macs ship with 2 annoying things . Apple Cloud Syncing User Folders and (wait for it), Case insensitive File Systems. If you happy with your shiny new Mac (like i was) we aware that its better to deploy anything mounted outside of the /User folder, or even better, in an external drive formatted using a Case Sensitive Unix Filesystem (Mac OS Extended (Case-sensitive, Journaled)). Note 2: \"Use gRPC FUSE for file sharing\" experience may vary, recent Docker for Mac do it well. In older RC1 ones it was evil. Changing/Disabling it after having installed Archipelago may affect your S3/Minio storage accesibility. Please let us know what your experience on this is.","title":"OSX:"},{"location":"osx/#wait-question-do-you-have-a-previous-version-of-archipelago-running","text":"If so, let's give that hard working repository a break first. If not, skip to Step 1 : Open a terminal (you have that already right?) and go to your previous download/git clone folder and run: docker-compose down docker-compose rm Can't remember where you downloaded it? Ok. We can deal with that! Let's stop the containers gracefully first, run: docker stop esmero-web docker stop esmero-solr docker stop esmero-db docker stop esmero-cantaloupe docker stop esmero-php docker stop esmero-minio Now we need to remove them, run: docker rm esmero-web docker rm esmero-solr docker rm esmero-db docker rm esmero-cantaloupe docker rm esmero-php docker rm esmero-minio Ok, now we are ready to start.","title":"Wait! Question: Do you have a previous version of Archipelago running?"},{"location":"osx/#step-1-docker-deployment","text":"git clone https://github.com/esmero/archipelago-deployment.git archipelago-deployment cd archipelago-deployment git checkout 1 .0.0-RC3 cp docker-compose-osx.yml docker-compose.yml docker-compose up -d Note: If you are running from an external Drive or a partition/filesystem that is Case Sensitive and is not syncing automatically to Apple Cloud you can also use docker-compose-linux.yml Note2: docker-compose.yml is git ignored in case you make local adjustments or changes to it.","title":"Step 1: Docker Deployment"},{"location":"osx/#step-2-set-up-your-minio-s3-bucket","text":"Once all containers are up and running (you can do a docker ps to check), access http://localhost:9000 using your most loved Web Browser with the following credentials: user:minio pass:minio123 and create a bucket named \"archipelago\". To do so press the red/coral + button on the bottom-right side and press the Bucket icon , it has a tooltip that says \"create bucket\". Write archipelago and submit, done! That is where we will persist all your Files and also your File copies of each Digital Object. You can always go there and explore what Archipelago (well really Strawberryfield does the hard work) has persisted so you can get comfortable with our architecture.","title":"Step 2: Set up your Minio S3 bucket"},{"location":"osx/#step-3-deploy-drupal-8914-and-the-awesome-archipelago-modules","text":"The following will run composer inside the esmero-php container to download all dependencies and Drupal Core too. docker exec -ti esmero-php bash -c \"composer install\" Once that command finishes run our setup script: docker exec -ti esmero-php bash -c 'scripts/archipelago/setup.sh' Explanation: That script will append some important configurations to your local web/sites/default/settings.php . Note: We say local because your whole Drupal web root (the one you cloned) is also mounted inside the esmero-php and esmero-web containers. So edits to, e.g PHP files, can be done without accessing the container directly from your local folder. If this is the first time you Deploy Drupal using the provided Configurations run: docker exec -ti -u www-data esmero-php bash -c \"cd web;../vendor/bin/drush -y si --verbose config_installer config_installer_sync_configure_form.sync_directory=/var/www/html/config/sync/ --db-url=mysql://root:esmerodb@esmero-db/drupal8 --account-name=admin --account-pass=archipelago -r=/var/www/html/web --sites-subdir=default --notify=false install_configure_form.enable_update_status_module=NULL install_configure_form.enable_update_status_emails=NULL;drush cr;chown -R www-data:www-data sites;\" This will give you an admin Drupal user with archipelago as password (!change this if running on a public instance!) Note: About Steps 2-3, you don't need to/nor should do this more than once. You can destroy/stop/update and recreated your Docker containers and start again, git pull and your Drupal and Data will persist once you passed Installation complete message. I repeat, all other container's data is persisted inside the persistent/ folder contained in this cloned git repository. Drupal and all its code is visible, editable and stable inside your web/ folder.","title":"Step 3: Deploy Drupal 8.9.14 and the awesome Archipelago Modules"},{"location":"osx/#step-4-create-a-demo-and-a-jsonapi-user-using-drush","text":"docker exec -ti esmero-php bash -c 'drush ucrt demo --password=\"demo\"; drush urol metadata_pro \"demo\"' docker exec -ti esmero-php bash -c 'drush ucrt jsonapi --password=\"jsonapi\"; drush urol metadata_api \"jsonapi\"'","title":"Step 4: Create a \"demo \"and a \"jsonapi\" user using drush"},{"location":"osx/#step-5-ingest-some-metadata-displays-to-make-playing-much-more-interactive","text":"Archipelago is more fun without having to start writing Metadata Displays (in Twig) before you know what they actually are. Since you should now have a jsonapi user and jsonapi should be enabled, you can use that awesome functionality of D8 to get that done. We have 4 demo Metadata Display Entities that go well with the demo Webform we provided. To do that execute in your shell (copy and paste) docker exec -ti esmero-php bash -c 'scripts/archipelago/deploy.sh' Open your most loved Web Browser and point it to http://localhost:8001 Note: It can take some time to start the first time (Drupal needs some warming up). Also, to make this docker-compose easier to use we are doing something named bind mounting (or similar...) your folders. Good thing is you can edit files in your machine and they get updated instantly to docker. bad thing, OSX driver runs slower than on Linux. Speed is a huge factor here, but you get the flexibility of changing, backing up and persisting files without needing a Docker University Degree.","title":"Step 5: Ingest some Metadata Displays to make playing much more interactive"},{"location":"osx/#need-help-blue-screen-missed-a-step-need-a-hug-and-such","text":"If you see any issues or errors or need help with a step, please let us know (ASAP!). You can either open an issue in this repository or use the Google Group . We are here to help. If you like this, let us know!","title":"Need help? Blue Screen? Missed a step? Need a hug and such?"},{"location":"osx/#caring-coding-fixing-testing","text":"Diego Pino Giancarlo Birello Allison Lund Albert Min","title":"Caring &amp; Coding + Fixing + Testing"},{"location":"osx/#license","text":"GPLv3","title":"License"},{"location":"ourtake/","text":"Archipelago's Philosophy & Guiding Principles Archipelago operates under a different concept than the one we all have become used to in recent times. We like to think this is not done by re-inventing the wheel, but by making sure the road is clean, level, and with fewer obstacles than before. We do this by removing some heavy weight from the top, some unneeded ballast, plus, of course, some well positioned innovations to make the ride enjoyable. We also like to say that Archipelago is like a Metadata Synthetizer (LFO anyone?) and we want to give you all the knobs, parameters, inputs and outputs to make the best out of it. Still, you can make \"music\" by just tapping the keyboard. To get here we had to do a full stop first. Look around. Questioning everything we knew. Research and test (repeat) and then re-architect slowly on new and old assumptions, and especially new community values. Whys and Whats of Archipelago Because this topic is near and dear to our hearts, we are taking extra care with writing this important document. Please stay tuned for the full, verbose, heartfelt, and detailed long story of Archipelago's origins, development, future hopes and dreams. In the meantime, please consider reviewing this presentation created by Archipelago's Lead Architect Diego Pino which captures the essence of Archipelago's philosophy and guiding principles: Archipelago : an empathic Digital Repository Architecture Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Archipelago's Philosophy & Guiding Principles"},{"location":"ourtake/#archipelagos-philosophy-guiding-principles","text":"Archipelago operates under a different concept than the one we all have become used to in recent times. We like to think this is not done by re-inventing the wheel, but by making sure the road is clean, level, and with fewer obstacles than before. We do this by removing some heavy weight from the top, some unneeded ballast, plus, of course, some well positioned innovations to make the ride enjoyable. We also like to say that Archipelago is like a Metadata Synthetizer (LFO anyone?) and we want to give you all the knobs, parameters, inputs and outputs to make the best out of it. Still, you can make \"music\" by just tapping the keyboard. To get here we had to do a full stop first. Look around. Questioning everything we knew. Research and test (repeat) and then re-architect slowly on new and old assumptions, and especially new community values.","title":"Archipelago's Philosophy &amp; Guiding Principles"},{"location":"ourtake/#whys-and-whats-of-archipelago","text":"Because this topic is near and dear to our hearts, we are taking extra care with writing this important document. Please stay tuned for the full, verbose, heartfelt, and detailed long story of Archipelago's origins, development, future hopes and dreams. In the meantime, please consider reviewing this presentation created by Archipelago's Lead Architect Diego Pino which captures the essence of Archipelago's philosophy and guiding principles: Archipelago : an empathic Digital Repository Architecture Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Whys and Whats of Archipelago"},{"location":"presentations_docs/","text":"Archipelago Presentations and Documents Archipelago : an empathic Digital Repository Architecture Working with Archipelago Multi-Importer Twig Templates and Archipelago Archipelago Digital Objects Repository (an) architecture to last (DrupalCon North America 2021) Archipelago 1.0.0-RC2 Specs and features Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Archipelago Presentations and Documents"},{"location":"presentations_docs/#archipelago-presentations-and-documents","text":"Archipelago : an empathic Digital Repository Architecture Working with Archipelago Multi-Importer Twig Templates and Archipelago Archipelago Digital Objects Repository (an) architecture to last (DrupalCon North America 2021) Archipelago 1.0.0-RC2 Specs and features Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Archipelago Presentations and Documents"},{"location":"quickstart/","text":"Archipelago Docker Deployment for Drupal 9 Updated: November 25th 2021 This repository serves as bootstrap for a Archipelago 1.0.0-RC3 deployment via Docker and provides many more options this time: minio.io (latest) S3/Azure/Local/Remote alternative with a new console and also Gateway to many others. Apache Solr 8.8.2 (or 7.5 if you go legacy) with the wizardly Solr OCR Highlight library v0.5 build by the Developement Team at the Bavarian State Library . Thanks Johannes Baiter! Mysql 8.0.22 (or Mysql 5.7 if you go legacy) Ngnix 11 Custom PHP FPM 7.4 super-tuned for Drupal 8/9 with multi-arch (so M1 too) capabilities (or 7.3 FPM if you go legacy), WARC to WACZ processing, and Composer 2.0 Natural Language Processing via NPLWEB64 Cantaloupe 4.1.9 as IIIF Server with Video Frame extraction and PDF support A Skeleton Project setup to run latest Version of Drupal (9.2.9) and Strawberry Field modules on 1.0.0-RC3 & friends on 0.2.0 Official Drupal 9 ready release again. D9.2.9 this time. Drupal 8 is no longer maintained, and we have documented the upgrade path Complete support for Apple Silicon M1 Machines and in general arm64 architecture Chips like Raspberry Pi 4, with specially built arm64 docker containers. Blazing fast OCR! The skeleton project contains all the pieces needed to run a local deployment of a vanilla Archipelago including ( YES !) content provided as an optional feature from archipelago-recyclables Starting from ZERO This is the recommended, simplest way for this release. There are a too many, tons of fun new features, Metadata Displays, viewers, new JS libraries, better HUGE import capabilites, bug fixes (yes), webform elements and improvements! We include now W3C WebAnnotations capabilities provided by the great team behind https://recogito.github.io/annotorious/api-docs/osd-plugin/ (thanks Rainer Simon) and with complete integration in our UI and metadata backends. Also WACZ! and replay.web both fabulous developments by the Webrecorder team (thanks Ilya Kreymer and Emma Dickson). There is more. Release will have a full feature list. Promise. macOS Intel or Apple Silicon M1: Step by Step deployment on macOS Ubuntu 18.04 or 20.04: Step by Step deployment on Ubuntu More fun if you add content: One-Step Demo content ingest 1.0.0-RC3 We have been working hard on 1.0.0-RC3, and it again took us 6 months from the latest release to reach this point. RC3 is different. There won't be any more Release Candidates and this leads directly (in a time span of 2\u20133 weeks) into 1.0.0\u2014and from there on to 1.1.0, etc. You already know we take Release Candidates seriously, and this one brings a huge list of new features, improvements, and migration tools, finally closing the cycle. There are many bug fixes, requested needs, improvements, AMI with remote import and LoD reconciliation, invisible and visible workflow changes, smarter processing, and most importantly, all is made to allow you to extend Archipelago even more. We ship now with a lot more Site Building (fancy word for settings, views, field formatters, Solr, etc. in Drupal) to make starting with Archipelago or becoming a permanent resident of your own group of always sunny islands fun. You get (yet again) fresh, strange, bizarre, unusual and/or amazing features that were not even asked for! We still work hard to not deviate from our own roadmap\u2014keeping the North Star always visible while navigating these stormy waters\u2014to make UI/UX clearer to understand, to make code less redundant and easier to follow, and to cover (so close) every Media/and LoD base we could wish for. This Archipelago feels like a sunny beach day with friends and Samba. Every day we use it, and it manages, from time to time, to produce wonderful surprises. It is our tiny, little secret garden/pumpkin/working-bee/undiscovered-magical-islands, and we are happy we see it as our own home or at least a place to which you will keep coming back. A child with grown-up Repository responsabilities, a planned and consistent Architecture Implementation (and still a novel one, cute, cozy, and simple) that can cover, mix and match GLAM, IR, Data and Scientific/Research/Museum Tech/Education needs, metadata, and media in any shape. Our ambitions never cease to be enormous (we try to be humble), and we are always quite a bit tired (same as with Beta1, Beta2, Beta3 and RC1). Who knew we could write so much code and deploy and test over and over? We know the Horizon is still far away, and we may never end sailing towards it. No need to tell you that 2020 and 2021 have been strange years so far, and there is and there will continue to be constant reflecting on past times. Many, many more Archipelagos have been emerging from the depths of the sea (and the shallow Internet), and a few are already blooming rich in local flora and fauna. We want to keep learning and sharing, and we want you to keep asking. We may make mistakes while doing so, but our conviction that all still fits together and makes sense, not only for us but most important for others, is very strong. Since the beginning (a red evening under the big sky of Montana) our initial architecture and divergent ideas about what metadata management, workflows, and media preservation should be, have been controversial and sometimes hard to explian, but Archipelago's simplicity, flexibility, ease of extension, its chameleon-ish capability to assume new shapes, colors, and aromas, and use cases without coding have shown us that we put our efforts into the right dream and the right people. Fun to use, fun to code on, and solid to build on. If you like it (or not), want new features, or want to be part of making this better (documenting, coding and planning) let us know. Talk (or whisper) to us. Caring & Coding + Fixing + Testing Diego Pino Giancarlo Birello Allison Lund Albert Min Acknowledgments This software is a Metropolitan New York Library Council Open-Source initiative and part of the Archipelago Commons project. License GPLv3","title":"Quickstart"},{"location":"quickstart/#archipelago-docker-deployment-for-drupal-9","text":"Updated: November 25th 2021 This repository serves as bootstrap for a Archipelago 1.0.0-RC3 deployment via Docker and provides many more options this time: minio.io (latest) S3/Azure/Local/Remote alternative with a new console and also Gateway to many others. Apache Solr 8.8.2 (or 7.5 if you go legacy) with the wizardly Solr OCR Highlight library v0.5 build by the Developement Team at the Bavarian State Library . Thanks Johannes Baiter! Mysql 8.0.22 (or Mysql 5.7 if you go legacy) Ngnix 11 Custom PHP FPM 7.4 super-tuned for Drupal 8/9 with multi-arch (so M1 too) capabilities (or 7.3 FPM if you go legacy), WARC to WACZ processing, and Composer 2.0 Natural Language Processing via NPLWEB64 Cantaloupe 4.1.9 as IIIF Server with Video Frame extraction and PDF support A Skeleton Project setup to run latest Version of Drupal (9.2.9) and Strawberry Field modules on 1.0.0-RC3 & friends on 0.2.0 Official Drupal 9 ready release again. D9.2.9 this time. Drupal 8 is no longer maintained, and we have documented the upgrade path Complete support for Apple Silicon M1 Machines and in general arm64 architecture Chips like Raspberry Pi 4, with specially built arm64 docker containers. Blazing fast OCR! The skeleton project contains all the pieces needed to run a local deployment of a vanilla Archipelago including ( YES !) content provided as an optional feature from archipelago-recyclables","title":"Archipelago Docker Deployment for Drupal 9"},{"location":"quickstart/#starting-from-zero","text":"This is the recommended, simplest way for this release. There are a too many, tons of fun new features, Metadata Displays, viewers, new JS libraries, better HUGE import capabilites, bug fixes (yes), webform elements and improvements! We include now W3C WebAnnotations capabilities provided by the great team behind https://recogito.github.io/annotorious/api-docs/osd-plugin/ (thanks Rainer Simon) and with complete integration in our UI and metadata backends. Also WACZ! and replay.web both fabulous developments by the Webrecorder team (thanks Ilya Kreymer and Emma Dickson). There is more. Release will have a full feature list. Promise.","title":"Starting from ZERO"},{"location":"quickstart/#macos-intel-or-apple-silicon-m1","text":"Step by Step deployment on macOS","title":"macOS Intel or Apple Silicon M1:"},{"location":"quickstart/#ubuntu-1804-or-2004","text":"Step by Step deployment on Ubuntu","title":"Ubuntu 18.04 or 20.04:"},{"location":"quickstart/#more-fun-if-you-add-content","text":"One-Step Demo content ingest","title":"More fun if you add content:"},{"location":"quickstart/#100-rc3","text":"We have been working hard on 1.0.0-RC3, and it again took us 6 months from the latest release to reach this point. RC3 is different. There won't be any more Release Candidates and this leads directly (in a time span of 2\u20133 weeks) into 1.0.0\u2014and from there on to 1.1.0, etc. You already know we take Release Candidates seriously, and this one brings a huge list of new features, improvements, and migration tools, finally closing the cycle. There are many bug fixes, requested needs, improvements, AMI with remote import and LoD reconciliation, invisible and visible workflow changes, smarter processing, and most importantly, all is made to allow you to extend Archipelago even more. We ship now with a lot more Site Building (fancy word for settings, views, field formatters, Solr, etc. in Drupal) to make starting with Archipelago or becoming a permanent resident of your own group of always sunny islands fun. You get (yet again) fresh, strange, bizarre, unusual and/or amazing features that were not even asked for! We still work hard to not deviate from our own roadmap\u2014keeping the North Star always visible while navigating these stormy waters\u2014to make UI/UX clearer to understand, to make code less redundant and easier to follow, and to cover (so close) every Media/and LoD base we could wish for. This Archipelago feels like a sunny beach day with friends and Samba. Every day we use it, and it manages, from time to time, to produce wonderful surprises. It is our tiny, little secret garden/pumpkin/working-bee/undiscovered-magical-islands, and we are happy we see it as our own home or at least a place to which you will keep coming back. A child with grown-up Repository responsabilities, a planned and consistent Architecture Implementation (and still a novel one, cute, cozy, and simple) that can cover, mix and match GLAM, IR, Data and Scientific/Research/Museum Tech/Education needs, metadata, and media in any shape. Our ambitions never cease to be enormous (we try to be humble), and we are always quite a bit tired (same as with Beta1, Beta2, Beta3 and RC1). Who knew we could write so much code and deploy and test over and over? We know the Horizon is still far away, and we may never end sailing towards it. No need to tell you that 2020 and 2021 have been strange years so far, and there is and there will continue to be constant reflecting on past times. Many, many more Archipelagos have been emerging from the depths of the sea (and the shallow Internet), and a few are already blooming rich in local flora and fauna. We want to keep learning and sharing, and we want you to keep asking. We may make mistakes while doing so, but our conviction that all still fits together and makes sense, not only for us but most important for others, is very strong. Since the beginning (a red evening under the big sky of Montana) our initial architecture and divergent ideas about what metadata management, workflows, and media preservation should be, have been controversial and sometimes hard to explian, but Archipelago's simplicity, flexibility, ease of extension, its chameleon-ish capability to assume new shapes, colors, and aromas, and use cases without coding have shown us that we put our efforts into the right dream and the right people. Fun to use, fun to code on, and solid to build on. If you like it (or not), want new features, or want to be part of making this better (documenting, coding and planning) let us know. Talk (or whisper) to us.","title":"1.0.0-RC3"},{"location":"quickstart/#caring-coding-fixing-testing","text":"Diego Pino Giancarlo Birello Allison Lund Albert Min","title":"Caring &amp; Coding + Fixing + Testing"},{"location":"quickstart/#acknowledgments","text":"This software is a Metropolitan New York Library Council Open-Source initiative and part of the Archipelago Commons project.","title":"Acknowledgments"},{"location":"quickstart/#license","text":"GPLv3","title":"License"},{"location":"sslsetup/","text":"How to Setup SSL for Docker/Archipelago Work-In-Progress Note This documentation page is still under construction and content may change with future updates. Please use caution when implementing any instructions referenced herein, as there may be missing steps or corresponding configuration files. Thank you for your patience as we continue to update Archipelago's documentation. The steps found below describe one potential manual SSL configuration for Archipelago deployments. A git clone deployment option will be available for future releases. Manual Configuration Steps for an EC2 AWS Server This process takes less than 10 minutes of reading YML files and editing a few files (described below) to get SSL running and setup with auto-renewal. First, configure Certbot, following the instructions found on https://certbot.eff.org. Inside a /persistent partition, establish the following folder structure. Note: you can keep the existing folder structure if you so choose. A benefit of the following structure is that it decouples the git clone of archipelago-deployment, which is made to be self sustainable and good for coding or smaller deployments. [ ec2-user@ip-17x-xx-x-xxx persistent ] $ ls -lah total 64K drwxr-xr-x 14 root root 4 .0K Oct 5 23 :11 . dr-xr-xr-x 19 root root 275 Dec 15 2019 .. drwxr-xr-x 8 999 999 4096 Oct 13 20 :07 db drwxr-xr-x 13 root root 4 .0K Oct 5 23 :03 drupal8 drwxr-xr-x 5 8183 8183 4 .0K Feb 23 2020 iiifcache drwxr-xr-x 2 root root 4 .0K Feb 23 2020 iiifconfig drwxr-xr-x 4 root root 4 .0K Oct 5 22 :45 nginx_conf drwxr-xr-x 3 root root 4 .0K Feb 26 2019 solrconfig drwxr-xr-x 3 8983 8983 4 .0K Feb 26 2019 solrcore To get to this point, create a git clone of archipelago deployment and then copy the content of the /persistent out of the repo folder into this structure. The original (or what is left) archipelago-deployment ends inside a drupal8 folder here. Copy and paste the following to create a local copy of this file: docker-compose.yml **Be sure to replace youremail@gmail.com with your email address. version : '3.5' services : web : container_name : esmero-web image : staticfloat/nginx-certbot restart : always environment : CERTBOT_EMAIL : \"youremail@gmail.com\" ports : - \"80:80\" - \"443:443\" volumes : - /persistent/nginx_conf/conf.d:/etc/nginx/user.conf.d:ro - /persistent/nginx_conf/certbot_extra_domains:/etc/nginx/certbot/extra_domains:ro - /persistent/drupal8:/var/www/html:cached depends_on : - solr - php tty : true networks : - host-net - esmero-net php : container_name : esmero-php restart : always image : \"esmero/php-7.3-fpm:latest\" tty : true networks : - host-net - esmero-net volumes : - ${PWD}:/var/www/html:cached solr : container_name : esmero-solr restart : always image : \"solr:7.5.0\" tty : true ports : - \"8983:8983\" networks : - host-net - esmero-net volumes : - /persistent/solrcore:/opt/solr/server/solr/mycores:cached - /persistent/solrconfig:/drupalconfig:cached entrypoint : - docker-entrypoint.sh - solr-precreate - drupal - /drupalconfig # see https://hub.docker.com/_/mysql/ db : image : mysql:5.7 command : --max_allowed_packet=256M container_name : esmero-db restart : always environment : MYSQL_ROOT_PASSWORD : esmerodb networks : - host-net - esmero-net volumes : - /persistent/db:/var/lib/mysql:cached iiif : container_name : esmero-cantaloupe image : \"esmero/cantaloupe-s3:4.1.6\" restart : always ports : - \"8183:8182\" networks : - host-net - esmero-net volumes : - /persistent/iiifconfig:/etc/cantaloupe - /persistent/iiifcache:/var/cache/cantaloupe networks : host-net : driver : bridge esmero-net : driver : bridge internal : true Note: This file shows how the folders in Step 1 are being used, and how SSL is being automatically deployed and renewed (without any human interaction other than starting the docker-compose and watching the logs). Now copy and paste the following to create a local copy of this file: ngnix.conf **Be sure to replace all instances of yoursite.org with your own domain. # goes into /persistent/nginx_conf/conf.d/nginx.conf upstream cantaloupe { server esmero-cantaloupe:8182 ; } server { listen 443 ssl ; server_name yoursite.org ; ssl_certificate /etc/letsencrypt/live/yourstie.org/fullchain.pem ; ssl_certificate_key /etc/letsencrypt/live/yoursite.org/privkey.pem ; client_max_body_size 512M ; ## Match with PHP from FPM container root /var/www/html/web ; ## <-- Your only path reference. fastcgi_send_timeout 120s ; fastcgi_read_timeout 120s ; fastcgi_pass_request_headers on ; fastcgi_buffers 16 16k ; fastcgi_buffer_size 32k ; # Cantaloupe proxypass location /cantaloupe/ { proxy_set_header X-Forwarded-Proto $scheme ; proxy_set_header X-Forwarded-Host $host ; proxy_set_header X-Forwarded-Port $server_port ; proxy_set_header X-Forwarded-Path /cantaloupe/ ; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ; if ( $request_uri ~* \"/cantaloupe/(.*)\" ) { proxy_pass http://cantaloupe/ $1 ; } } location = /favicon.ico { log_not_found off ; access_log off ; } location = /robots.txt { allow all ; log_not_found off ; access_log off ; } # Very rarely should these ever be accessed outside of your lan location ~* \\. ( txt | log ) $ { deny all ; } location ~ \\. .*/.* \\. php$ { return 403 ; } location ~ ^/sites/.*/private/ { return 403 ; } # Allow \"Well-Known URIs\" as per RFC 5785 location ~* ^/.well-known/ { allow all ; } # Block access to \"hidden\" files and directories whose names begin with a # period. This includes directories used by version control systems such # as Subversion or Git to store control files. location ~ ( ^ | / ) \\. { return 403 ; } location / { try_files $uri /index.php? $query_string ; # For Drupal >= 7 } location @rewrite { rewrite ^/ ( .* ) $ /index.php?q = $1 ; } # Don't allow direct access to PHP files in the vendor directory. location ~ /vendor/.* \\. php$ { deny all ; return 404 ; } # Allow Modules to be updated via UI (still we believe composer is the way) rewrite ^/core/authorize.php/core/authorize.php ( .* ) $ /core/authorize.php $1 ; # In Drupal 8, we must also match new paths where the '.php' appears in # the middle, such as update.php/selection. The rule we use is strict, # and only allows this pattern with the update.php front controller. # This allows legacy path aliases in the form of # blog/index.php/legacy-path to continue to route to Drupal nodes. If # you do not have any paths like that, then you might prefer to use a # laxer rule, such as: # location ~ \\.php(/|$) { # The laxer rule will continue to work if Drupal uses this new URL # pattern with front controllers other than update.php in a future # release. location ~ '\\.php$|^/update.php' { fastcgi_split_path_info ^ ( .+? \\. php )( | /.* ) $ ; include fastcgi_params ; # Block httpoxy attacks. See https://httpoxy.org/. fastcgi_param HTTP_PROXY \"\" ; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name ; fastcgi_param PATH_INFO $fastcgi_path_info ; fastcgi_param PHP_VALUE \"upload_max_filesize=512M \\n post_max_size=512M\" ; proxy_read_timeout 900s ; fastcgi_intercept_errors on ; fastcgi_pass esmero-php:9000 ; } # Fighting with Styles? This little gem is amazing. location ~ ^/sites/.*/files/styles/ { # For Drupal >= 7 try_files $uri @rewrite ; } # Handle private files through Drupal. location ~ ^/system/files/ { # For Drupal >= 7 try_files $uri /index.php? $query_string ; } } Create the following folder: /persistent/nginx_conf/conf.d/ Place the ngnix.conf file inside the /conf.d/ folder. Create also this other folder: /persistent/nginx_conf/certbot_extra_domains/ Inside the /certbot_extra_domains/ folder, create a text file named the same way as your domain (which can/or not contain additional subdomains but needs to exist). cat /persistent/nginx_conf/certbot_extra_domains/yoursite.org drwxr-xr-x 2 root root 4 .0K Oct 5 22 :46 . drwxr-xr-x 4 root root 4 .0K Oct 5 22 :45 .. -rw-r--r-- 1 root root 48 Oct 5 22 :46 yoursite.org Optionally, create additional subdomains if needed. cat /persistent/nginx_conf/certbot_extra_domains/yoursite.org subdomain.yoursite.org anothersub.yoursite.org Make sure you have edited the docker-compose.yml and ngnix.conf files you created to match your own information. Also make sure to also adjust the paths if you do not want the /persistent approach described in Step 1. Run the following commands: docker -compose up -d docker ps You should see this: b5a04747ee06 staticfloat/nginx-certbot \"/bin/bash /scripts/\u2026\" 8 days ago Up 8 days 0 .0.0.0:80->80/tcp, 0 .0.0.0:443->443/tcp esmero-web 84afae094b57 esmero/php-7.3-fpm:latest \"docker-php-entrypoi\u2026\" 8 days ago Up 8 days 9000 /tcp esmero-php 13a9214acfd0 esmero/cantaloupe-s3:4.1.6 \"sh -c 'java -Dcanta\u2026\" 8 days ago Up 8 days 0 .0.0.0:8183->8182/tcp esmero-cantaloupe 044dd5bc7245 mysql:5.7 \"docker-entrypoint.s\u2026\" 8 days ago Up 8 days 3306 /tcp, 33060 /tcp esmero-db 31f4f0f45acc solr:7.5.0 \"docker-entrypoint.s\u2026\" 8 days ago Up 8 days 0 .0.0.0:8983->8983/tcp esmero-solr SSL has now been configured for your Archipelago instance. User contributed documentation: Adding SSL to Archipelago running docker by Zachary Spalding : https://youtu.be/rfH5TLzIRIQ Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"How to Set Up SSL for Docker/Archipelago"},{"location":"sslsetup/#how-to-setup-ssl-for-dockerarchipelago","text":"Work-In-Progress Note This documentation page is still under construction and content may change with future updates. Please use caution when implementing any instructions referenced herein, as there may be missing steps or corresponding configuration files. Thank you for your patience as we continue to update Archipelago's documentation. The steps found below describe one potential manual SSL configuration for Archipelago deployments. A git clone deployment option will be available for future releases.","title":"How to Setup SSL for Docker/Archipelago"},{"location":"sslsetup/#manual-configuration-steps-for-an-ec2-aws-server","text":"This process takes less than 10 minutes of reading YML files and editing a few files (described below) to get SSL running and setup with auto-renewal. First, configure Certbot, following the instructions found on https://certbot.eff.org. Inside a /persistent partition, establish the following folder structure. Note: you can keep the existing folder structure if you so choose. A benefit of the following structure is that it decouples the git clone of archipelago-deployment, which is made to be self sustainable and good for coding or smaller deployments. [ ec2-user@ip-17x-xx-x-xxx persistent ] $ ls -lah total 64K drwxr-xr-x 14 root root 4 .0K Oct 5 23 :11 . dr-xr-xr-x 19 root root 275 Dec 15 2019 .. drwxr-xr-x 8 999 999 4096 Oct 13 20 :07 db drwxr-xr-x 13 root root 4 .0K Oct 5 23 :03 drupal8 drwxr-xr-x 5 8183 8183 4 .0K Feb 23 2020 iiifcache drwxr-xr-x 2 root root 4 .0K Feb 23 2020 iiifconfig drwxr-xr-x 4 root root 4 .0K Oct 5 22 :45 nginx_conf drwxr-xr-x 3 root root 4 .0K Feb 26 2019 solrconfig drwxr-xr-x 3 8983 8983 4 .0K Feb 26 2019 solrcore To get to this point, create a git clone of archipelago deployment and then copy the content of the /persistent out of the repo folder into this structure. The original (or what is left) archipelago-deployment ends inside a drupal8 folder here. Copy and paste the following to create a local copy of this file: docker-compose.yml **Be sure to replace youremail@gmail.com with your email address. version : '3.5' services : web : container_name : esmero-web image : staticfloat/nginx-certbot restart : always environment : CERTBOT_EMAIL : \"youremail@gmail.com\" ports : - \"80:80\" - \"443:443\" volumes : - /persistent/nginx_conf/conf.d:/etc/nginx/user.conf.d:ro - /persistent/nginx_conf/certbot_extra_domains:/etc/nginx/certbot/extra_domains:ro - /persistent/drupal8:/var/www/html:cached depends_on : - solr - php tty : true networks : - host-net - esmero-net php : container_name : esmero-php restart : always image : \"esmero/php-7.3-fpm:latest\" tty : true networks : - host-net - esmero-net volumes : - ${PWD}:/var/www/html:cached solr : container_name : esmero-solr restart : always image : \"solr:7.5.0\" tty : true ports : - \"8983:8983\" networks : - host-net - esmero-net volumes : - /persistent/solrcore:/opt/solr/server/solr/mycores:cached - /persistent/solrconfig:/drupalconfig:cached entrypoint : - docker-entrypoint.sh - solr-precreate - drupal - /drupalconfig # see https://hub.docker.com/_/mysql/ db : image : mysql:5.7 command : --max_allowed_packet=256M container_name : esmero-db restart : always environment : MYSQL_ROOT_PASSWORD : esmerodb networks : - host-net - esmero-net volumes : - /persistent/db:/var/lib/mysql:cached iiif : container_name : esmero-cantaloupe image : \"esmero/cantaloupe-s3:4.1.6\" restart : always ports : - \"8183:8182\" networks : - host-net - esmero-net volumes : - /persistent/iiifconfig:/etc/cantaloupe - /persistent/iiifcache:/var/cache/cantaloupe networks : host-net : driver : bridge esmero-net : driver : bridge internal : true Note: This file shows how the folders in Step 1 are being used, and how SSL is being automatically deployed and renewed (without any human interaction other than starting the docker-compose and watching the logs). Now copy and paste the following to create a local copy of this file: ngnix.conf **Be sure to replace all instances of yoursite.org with your own domain. # goes into /persistent/nginx_conf/conf.d/nginx.conf upstream cantaloupe { server esmero-cantaloupe:8182 ; } server { listen 443 ssl ; server_name yoursite.org ; ssl_certificate /etc/letsencrypt/live/yourstie.org/fullchain.pem ; ssl_certificate_key /etc/letsencrypt/live/yoursite.org/privkey.pem ; client_max_body_size 512M ; ## Match with PHP from FPM container root /var/www/html/web ; ## <-- Your only path reference. fastcgi_send_timeout 120s ; fastcgi_read_timeout 120s ; fastcgi_pass_request_headers on ; fastcgi_buffers 16 16k ; fastcgi_buffer_size 32k ; # Cantaloupe proxypass location /cantaloupe/ { proxy_set_header X-Forwarded-Proto $scheme ; proxy_set_header X-Forwarded-Host $host ; proxy_set_header X-Forwarded-Port $server_port ; proxy_set_header X-Forwarded-Path /cantaloupe/ ; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ; if ( $request_uri ~* \"/cantaloupe/(.*)\" ) { proxy_pass http://cantaloupe/ $1 ; } } location = /favicon.ico { log_not_found off ; access_log off ; } location = /robots.txt { allow all ; log_not_found off ; access_log off ; } # Very rarely should these ever be accessed outside of your lan location ~* \\. ( txt | log ) $ { deny all ; } location ~ \\. .*/.* \\. php$ { return 403 ; } location ~ ^/sites/.*/private/ { return 403 ; } # Allow \"Well-Known URIs\" as per RFC 5785 location ~* ^/.well-known/ { allow all ; } # Block access to \"hidden\" files and directories whose names begin with a # period. This includes directories used by version control systems such # as Subversion or Git to store control files. location ~ ( ^ | / ) \\. { return 403 ; } location / { try_files $uri /index.php? $query_string ; # For Drupal >= 7 } location @rewrite { rewrite ^/ ( .* ) $ /index.php?q = $1 ; } # Don't allow direct access to PHP files in the vendor directory. location ~ /vendor/.* \\. php$ { deny all ; return 404 ; } # Allow Modules to be updated via UI (still we believe composer is the way) rewrite ^/core/authorize.php/core/authorize.php ( .* ) $ /core/authorize.php $1 ; # In Drupal 8, we must also match new paths where the '.php' appears in # the middle, such as update.php/selection. The rule we use is strict, # and only allows this pattern with the update.php front controller. # This allows legacy path aliases in the form of # blog/index.php/legacy-path to continue to route to Drupal nodes. If # you do not have any paths like that, then you might prefer to use a # laxer rule, such as: # location ~ \\.php(/|$) { # The laxer rule will continue to work if Drupal uses this new URL # pattern with front controllers other than update.php in a future # release. location ~ '\\.php$|^/update.php' { fastcgi_split_path_info ^ ( .+? \\. php )( | /.* ) $ ; include fastcgi_params ; # Block httpoxy attacks. See https://httpoxy.org/. fastcgi_param HTTP_PROXY \"\" ; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name ; fastcgi_param PATH_INFO $fastcgi_path_info ; fastcgi_param PHP_VALUE \"upload_max_filesize=512M \\n post_max_size=512M\" ; proxy_read_timeout 900s ; fastcgi_intercept_errors on ; fastcgi_pass esmero-php:9000 ; } # Fighting with Styles? This little gem is amazing. location ~ ^/sites/.*/files/styles/ { # For Drupal >= 7 try_files $uri @rewrite ; } # Handle private files through Drupal. location ~ ^/system/files/ { # For Drupal >= 7 try_files $uri /index.php? $query_string ; } } Create the following folder: /persistent/nginx_conf/conf.d/ Place the ngnix.conf file inside the /conf.d/ folder. Create also this other folder: /persistent/nginx_conf/certbot_extra_domains/ Inside the /certbot_extra_domains/ folder, create a text file named the same way as your domain (which can/or not contain additional subdomains but needs to exist). cat /persistent/nginx_conf/certbot_extra_domains/yoursite.org drwxr-xr-x 2 root root 4 .0K Oct 5 22 :46 . drwxr-xr-x 4 root root 4 .0K Oct 5 22 :45 .. -rw-r--r-- 1 root root 48 Oct 5 22 :46 yoursite.org Optionally, create additional subdomains if needed. cat /persistent/nginx_conf/certbot_extra_domains/yoursite.org subdomain.yoursite.org anothersub.yoursite.org Make sure you have edited the docker-compose.yml and ngnix.conf files you created to match your own information. Also make sure to also adjust the paths if you do not want the /persistent approach described in Step 1. Run the following commands: docker -compose up -d docker ps You should see this: b5a04747ee06 staticfloat/nginx-certbot \"/bin/bash /scripts/\u2026\" 8 days ago Up 8 days 0 .0.0.0:80->80/tcp, 0 .0.0.0:443->443/tcp esmero-web 84afae094b57 esmero/php-7.3-fpm:latest \"docker-php-entrypoi\u2026\" 8 days ago Up 8 days 9000 /tcp esmero-php 13a9214acfd0 esmero/cantaloupe-s3:4.1.6 \"sh -c 'java -Dcanta\u2026\" 8 days ago Up 8 days 0 .0.0.0:8183->8182/tcp esmero-cantaloupe 044dd5bc7245 mysql:5.7 \"docker-entrypoint.s\u2026\" 8 days ago Up 8 days 3306 /tcp, 33060 /tcp esmero-db 31f4f0f45acc solr:7.5.0 \"docker-entrypoint.s\u2026\" 8 days ago Up 8 days 0 .0.0.0:8983->8983/tcp esmero-solr SSL has now been configured for your Archipelago instance.","title":"Manual Configuration Steps for an EC2 AWS Server"},{"location":"sslsetup/#user-contributed-documentation","text":"Adding SSL to Archipelago running docker by Zachary Spalding : https://youtu.be/rfH5TLzIRIQ Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"User contributed documentation:"},{"location":"strawberryfield-formatters/","text":"Strawberryfield Formatters This documentation will give a brief overview of Archipelago's Strawberryfield Formatters and how they work using the default View mode Digital Object Full View as an example. At a glance When taking a look at your First Digital Object note that multiple formatters are working together to create this Display ( or View mode ). Since \" My First Digital Object \" is a Photograph the Display being used is Digital Object Full View which, by default, uses formatters to: ( Red ) Create the image viewer where users can zoom in, zoom out, fullscreen and rotate all the images associated with the ADO. ( Blue ) Display the Object Description and Type of Resource . ( Green ) Display the Raw JSON Metadata and IIIF Presentation Manifest. In Greater Detail When editing an ADO, at the top of the Webform page there is a tab titled Manage display which will take us to where all the Formatters live. Take note that the DISPLAY SETTINGS shown in the screenshot below are using the Default View mode. Once the page loads the Default View mode is automatically selected. However, because we are editing an object with the Media type Photograph , we need to edit the View mode Digital Object Full View since it is the Default View mode for this Media type . How to find and configure which View mode is Default per Media type The ADO Type to View mode Mapping page tells the ADOs which View mode to use by default per Media type. This page can be accessed at yoursite//admin/config/archipelago/viewmode_mapping Formatters Shipped with Archipelago Default Collection listing Digital Object Full View Digital Object with 3D Viewer Digital Object with A/V Player Digital Object with Book Reader Digital Object with Mirador Viewer Digital Object with Pannellum Panorama Digital Object with PDF Viewer Digital Object with Replay.web Webarchive Player Digital Object with Replay.web Webarchive with Navbars Digital Object with Video Player Digital Object with thumbnail and abstract Default View Mode Mappings by Media Type JSON (Media) Type View Mode Name 1. Video Digital Object with Video Player 2. 3DModel Digital Object with 3D Viewer 3. Photograph Digital Object Full View 4. Thesis Digital Object with PDF Viewer 5. Panorama Digital Object with Pannellum Panorama 6. Book Digital Object with Book Reader 7. Podcast Digital Object with A/V Player 8. Collection Collection Listing 9. Article Digital Object with PDF Viewer 10. Map Digital Object with Mirador Viewer 11. MusicRecording Digital Object with A/V Player 12. Sculpture Digital Object with 3D Viewer 13. VisualArtwork Digital Object with Video Player 14. Painting Digital Object with Mirador Viewer 15. WebPage Digital Object with Replay.web Webarchive Player 16. PanoramaTour Digital Object with Pannellum Panorama There are two sections in Manage display for Digital Object Full View : 1) Content and 2) Disabled . Moving a field into Content means this formatter will be used to the display the ADO in some way. The formatters moved to Disabled are inactive and are subsequently not being used for displaying the ADO. There are four fields named \ud83c\udf53Strawberry and each one is a copy of the field \ud83c\udf53Strawberry (Descriptive Metadata source) . Since the names of the fields do not imply their function, they have been named Strawberry in four different ways (Italiano, Deutsch, Din\u00e9 Bizaad, and English) in order to organize and help users visually remember which field is doing what for the Display . Recall My First Digital Object at beginning of this document where there were 3 sections highlighted in Red , Blue , and Green . In Red ( \ud83c\udf53Fragola ) there is the Strawberry Field Formatter for IIIF media which takes the image stored in S3 to display the photograph with the image viewer. In Blue ( \ud83c\udf53Erdbeere ) there is the Strawberry Field Formatter for Custom Metadata Templates which displays the raw JSON metadata using configurable Twig templates. In this example, the default Twig template uses the JSON key type to display the Type of Resource . In Green ( \ud83c\udf53Strawberry (Descriptive Metadata) ) there is the Strawberry Default Formatter which is used to display the Raw JSON Metadata. At the end of the day The decision for how your metadata is displayed is totally in your control. Under the WIDGET column, there is a quick description/overview of what the formatter is doing. And by clicking on the gear icon under the OPERATIONS column, all of the options for configuring the formatter are revealed. To use \ud83c\udf53Fragola as an example (the Formatter for IIIF media), we can choose which JSON Key is being used to fetch the IIIF Media URLs (found inside the raw JSON being played with Strawberry Default Formatter ), the maximum height and width of the viewer, etc. And then with \ud83c\udf53Erdbeere (the Formatter for Custom Metadata Templates) there is the option, among many others, to configure which Twig template the formatter will use for displaying your Metadata. More information about Managing Metadata Displays with Twig Templates can be found here . Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Strawberryfield Formatters"},{"location":"strawberryfield-formatters/#strawberryfield-formatters","text":"This documentation will give a brief overview of Archipelago's Strawberryfield Formatters and how they work using the default View mode Digital Object Full View as an example.","title":"Strawberryfield Formatters"},{"location":"strawberryfield-formatters/#at-a-glance","text":"When taking a look at your First Digital Object note that multiple formatters are working together to create this Display ( or View mode ). Since \" My First Digital Object \" is a Photograph the Display being used is Digital Object Full View which, by default, uses formatters to: ( Red ) Create the image viewer where users can zoom in, zoom out, fullscreen and rotate all the images associated with the ADO. ( Blue ) Display the Object Description and Type of Resource . ( Green ) Display the Raw JSON Metadata and IIIF Presentation Manifest.","title":"At a glance"},{"location":"strawberryfield-formatters/#in-greater-detail","text":"When editing an ADO, at the top of the Webform page there is a tab titled Manage display which will take us to where all the Formatters live. Take note that the DISPLAY SETTINGS shown in the screenshot below are using the Default View mode. Once the page loads the Default View mode is automatically selected. However, because we are editing an object with the Media type Photograph , we need to edit the View mode Digital Object Full View since it is the Default View mode for this Media type .","title":"In Greater Detail"},{"location":"strawberryfield-formatters/#how-to-find-and-configure-which-view-mode-is-default-per-media-type","text":"The ADO Type to View mode Mapping page tells the ADOs which View mode to use by default per Media type. This page can be accessed at yoursite//admin/config/archipelago/viewmode_mapping Formatters Shipped with Archipelago Default Collection listing Digital Object Full View Digital Object with 3D Viewer Digital Object with A/V Player Digital Object with Book Reader Digital Object with Mirador Viewer Digital Object with Pannellum Panorama Digital Object with PDF Viewer Digital Object with Replay.web Webarchive Player Digital Object with Replay.web Webarchive with Navbars Digital Object with Video Player Digital Object with thumbnail and abstract Default View Mode Mappings by Media Type JSON (Media) Type View Mode Name 1. Video Digital Object with Video Player 2. 3DModel Digital Object with 3D Viewer 3. Photograph Digital Object Full View 4. Thesis Digital Object with PDF Viewer 5. Panorama Digital Object with Pannellum Panorama 6. Book Digital Object with Book Reader 7. Podcast Digital Object with A/V Player 8. Collection Collection Listing 9. Article Digital Object with PDF Viewer 10. Map Digital Object with Mirador Viewer 11. MusicRecording Digital Object with A/V Player 12. Sculpture Digital Object with 3D Viewer 13. VisualArtwork Digital Object with Video Player 14. Painting Digital Object with Mirador Viewer 15. WebPage Digital Object with Replay.web Webarchive Player 16. PanoramaTour Digital Object with Pannellum Panorama There are two sections in Manage display for Digital Object Full View : 1) Content and 2) Disabled . Moving a field into Content means this formatter will be used to the display the ADO in some way. The formatters moved to Disabled are inactive and are subsequently not being used for displaying the ADO. There are four fields named \ud83c\udf53Strawberry and each one is a copy of the field \ud83c\udf53Strawberry (Descriptive Metadata source) . Since the names of the fields do not imply their function, they have been named Strawberry in four different ways (Italiano, Deutsch, Din\u00e9 Bizaad, and English) in order to organize and help users visually remember which field is doing what for the Display . Recall My First Digital Object at beginning of this document where there were 3 sections highlighted in Red , Blue , and Green . In Red ( \ud83c\udf53Fragola ) there is the Strawberry Field Formatter for IIIF media which takes the image stored in S3 to display the photograph with the image viewer. In Blue ( \ud83c\udf53Erdbeere ) there is the Strawberry Field Formatter for Custom Metadata Templates which displays the raw JSON metadata using configurable Twig templates. In this example, the default Twig template uses the JSON key type to display the Type of Resource . In Green ( \ud83c\udf53Strawberry (Descriptive Metadata) ) there is the Strawberry Default Formatter which is used to display the Raw JSON Metadata.","title":"How to find and configure which View mode is Default per Media type"},{"location":"strawberryfield-formatters/#at-the-end-of-the-day","text":"The decision for how your metadata is displayed is totally in your control. Under the WIDGET column, there is a quick description/overview of what the formatter is doing. And by clicking on the gear icon under the OPERATIONS column, all of the options for configuring the formatter are revealed. To use \ud83c\udf53Fragola as an example (the Formatter for IIIF media), we can choose which JSON Key is being used to fetch the IIIF Media URLs (found inside the raw JSON being played with Strawberry Default Formatter ), the maximum height and width of the viewer, etc. And then with \ud83c\udf53Erdbeere (the Formatter for Custom Metadata Templates) there is the option, among many others, to configure which Twig template the formatter will use for displaying your Metadata. More information about Managing Metadata Displays with Twig Templates can be found here . Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"At the end of the day"},{"location":"strawberryfields/","text":"Strawberryfields Forever What Strawberry fields does, why we built it, and what issues it addresses Archipelago integrates transparently into the Drupal 8 ecosystem using its Core Content Entity System (Nodes), Discovery (Search API) and in general all its Core Components plus a few well maintained external ones. By design (and because we think its imperative), Archipelago takes full charge of the metadata layer and associated media assets by implementing a highly configurable, smart Drupal field written in JSON named Strawberryfield that attaches to any content. All of JSON's internals, keys, paths, and values are dynamically exposed to the rest of the ecosystem. Strawberryfield even remembers its structure as data evolves by storing JSON paths of every little detail. Nothing Is Real Archipelago includes additional companion modules, Webform_strawberryfield and Format_strawberryfield that extend the core metadata capabilities of the main Strawberryfield module and allow the same flexibility to be exposed during ingest and viewing of digital objects. The in-development Strawberry Runners and AMI modules further extend Archipelago's capabilities. Additional information related to these modules will be made available following initial public releases. Ingesting Webform Strawberryfield (we had a better name) extends and integrates into the amazing Drupal Webform module to allow Archipelago users to build any possible metadata and media, ingest and edit, workflows directly via the UI using webforms. By not having a hardcoded ingest method, Archipelago can be used outside the GLAM community too, as a pure data repository in biological sciences, digital humanities, archives, or even as a mixed, multidisciplinary/cross-domain system. We also added WIKIDATA , LoC , Getty , and VIAF authority querying elements to aid in linking to external Linked Open Data sources. All these integrations are made to help local needs and community identities to survive the never-ending race for the next metadata schema. They are made to prototype, plan, and grow independently of how metadata will need to be exposed yesterday or tomorrow. And we plan to add more. Explore what other features webform_strawberryfield provides to help with ingesting, reading, and interacting with your metadata during that process. Exposing Format Strawberryfield (we had even a better name but...) deals with taking your JSON based metadata and casting , mashing, mixing, exposing, displaying, and transforming it to allow rich interaction for users and other systems with your digital objects. In its guts (or heart?), Archipelago does something quite simple but core to our concept of repository: it transforms in realtime the close to your needs open schema metadata that lives in strawberryfield as JSON into close to other one's fixed schema needs metadata ; any destination format, using a fast, cached templating system. A templating system that is core to Drupal, called Twig : Twig in Symfony Twig in Drupal This templating system is exposed to Archipelago users through the UI and stored side by side in the repository as content (we named them Metadata Display entities , but they not only serve display needs!) so users can fully control how metadata is transformed and published without touching their individual sources. Templates or recipes can be shared, exported, ingested, updated, and adapted in many ways. Fast changes are possible without having to wait for the next mayor release of Archipelago or your favorited Metadata Schema Specs Committee agreeing on the next or the last version. Of course, this module not only handles metadata but media assets too, extracting local or remote URIs and files from your metadata and rendering them as media viewers: books, 3D models, images, panoramas, A/V with IIIF in its soul. You can learn more about what format_strawberryfield can do and what many other possibilities are exposed through our templating system . Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Strawberryfields Forever"},{"location":"strawberryfields/#strawberryfields-forever","text":"","title":"Strawberryfields Forever"},{"location":"strawberryfields/#what-strawberry-fields-does-why-we-built-it-and-what-issues-it-addresses","text":"Archipelago integrates transparently into the Drupal 8 ecosystem using its Core Content Entity System (Nodes), Discovery (Search API) and in general all its Core Components plus a few well maintained external ones. By design (and because we think its imperative), Archipelago takes full charge of the metadata layer and associated media assets by implementing a highly configurable, smart Drupal field written in JSON named Strawberryfield that attaches to any content. All of JSON's internals, keys, paths, and values are dynamically exposed to the rest of the ecosystem. Strawberryfield even remembers its structure as data evolves by storing JSON paths of every little detail.","title":"What Strawberry fields does, why we built it, and what issues it addresses"},{"location":"strawberryfields/#nothing-is-real","text":"Archipelago includes additional companion modules, Webform_strawberryfield and Format_strawberryfield that extend the core metadata capabilities of the main Strawberryfield module and allow the same flexibility to be exposed during ingest and viewing of digital objects. The in-development Strawberry Runners and AMI modules further extend Archipelago's capabilities. Additional information related to these modules will be made available following initial public releases.","title":"Nothing Is Real"},{"location":"strawberryfields/#ingesting","text":"Webform Strawberryfield (we had a better name) extends and integrates into the amazing Drupal Webform module to allow Archipelago users to build any possible metadata and media, ingest and edit, workflows directly via the UI using webforms. By not having a hardcoded ingest method, Archipelago can be used outside the GLAM community too, as a pure data repository in biological sciences, digital humanities, archives, or even as a mixed, multidisciplinary/cross-domain system. We also added WIKIDATA , LoC , Getty , and VIAF authority querying elements to aid in linking to external Linked Open Data sources. All these integrations are made to help local needs and community identities to survive the never-ending race for the next metadata schema. They are made to prototype, plan, and grow independently of how metadata will need to be exposed yesterday or tomorrow. And we plan to add more. Explore what other features webform_strawberryfield provides to help with ingesting, reading, and interacting with your metadata during that process.","title":"Ingesting"},{"location":"strawberryfields/#exposing","text":"Format Strawberryfield (we had even a better name but...) deals with taking your JSON based metadata and casting , mashing, mixing, exposing, displaying, and transforming it to allow rich interaction for users and other systems with your digital objects. In its guts (or heart?), Archipelago does something quite simple but core to our concept of repository: it transforms in realtime the close to your needs open schema metadata that lives in strawberryfield as JSON into close to other one's fixed schema needs metadata ; any destination format, using a fast, cached templating system. A templating system that is core to Drupal, called Twig : Twig in Symfony Twig in Drupal This templating system is exposed to Archipelago users through the UI and stored side by side in the repository as content (we named them Metadata Display entities , but they not only serve display needs!) so users can fully control how metadata is transformed and published without touching their individual sources. Templates or recipes can be shared, exported, ingested, updated, and adapted in many ways. Fast changes are possible without having to wait for the next mayor release of Archipelago or your favorited Metadata Schema Specs Committee agreeing on the next or the last version. Of course, this module not only handles metadata but media assets too, extracting local or remote URIs and files from your metadata and rendering them as media viewers: books, 3D models, images, panoramas, A/V with IIIF in its soul. You can learn more about what format_strawberryfield can do and what many other possibilities are exposed through our templating system . Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Exposing"},{"location":"tbd/","text":"Documentation Update Needed This page serves as a placeholder for an area of documentation that is yet to be written. Please check back again soon. If you would like to contribute to this or another page/area of Archipelago's documentation: Please follow this set of guidelines to help you get started. Archipelago welcomes and appreciates any type of contribution, from use cases and needs, questions, documentation, devops and configuration and -- of course -- code, fixes, or new features. If you feel more comfortable, please contact us directly to discuss how you can contribute to Archipelago's documentation: Email: info@metro.org Post on Archipelago Commons Google Group Thank you for your patience as we continue to update Archipelago's documentation. Return to Archipelago Documentation .","title":"Documentation Update Needed"},{"location":"tbd/#documentation-update-needed","text":"This page serves as a placeholder for an area of documentation that is yet to be written. Please check back again soon. If you would like to contribute to this or another page/area of Archipelago's documentation: Please follow this set of guidelines to help you get started. Archipelago welcomes and appreciates any type of contribution, from use cases and needs, questions, documentation, devops and configuration and -- of course -- code, fixes, or new features. If you feel more comfortable, please contact us directly to discuss how you can contribute to Archipelago's documentation: Email: info@metro.org Post on Archipelago Commons Google Group Thank you for your patience as we continue to update Archipelago's documentation. Return to Archipelago Documentation .","title":"Documentation Update Needed"},{"location":"traditional-install/","text":"Traditional Installation Notes For those who prefer classic approaches to system installation and configuration (instead of Dockerized deployment), this page is reserved for notes, recommendations, and guides. Giancarlo Birello is maintaining and sharing the following documentation: Dev DBOpen: developer site of the DBOPen project Includes an Architecture overview and Step by Step instructions Please stay tuned for additional future updates. Thank you! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Traditional install"},{"location":"traditional-install/#traditional-installation-notes","text":"For those who prefer classic approaches to system installation and configuration (instead of Dockerized deployment), this page is reserved for notes, recommendations, and guides. Giancarlo Birello is maintaining and sharing the following documentation: Dev DBOpen: developer site of the DBOPen project Includes an Architecture overview and Step by Step instructions Please stay tuned for additional future updates. Thank you! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Traditional Installation Notes"},{"location":"ubuntu/","text":"Installing Archipelago Drupal 9 on Ubuntu 18.04 or 20.04 About running terminal commands This guide assumes you are comfortable enough running terminal (bash) commands on a Linux Computer. We made sure that you can copy and paste each of these commands from this guide directly into your terminal. You will notice sometimes commands span more than a single line of text. If that is the case, always make sure you copy and paste a single line at a time and press the Enter key afterwards. We suggest also you look at the output. If something fails (and we hope it does not) troubleshooting will be much easier if you can share that output when asking for help. Happy deploying! Prerequisites At least 10 Gbytes of free space (to get started) Some basic Unix/Terminal Skills 2-4 Gbytes of RAM (4 Recommended) Install Docker if you don't have it already by running: sudo apt install apt-transport-https ca-certificates curl software-properties-common curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable\" sudo apt update sudo apt-cache policy docker-ce sudo apt install docker-ce sudo systemctl status docker sudo usermod -aG docker ${ USER } Log out, log in again! sudo apt install docker-compose Git tools are included by default in Ubuntu Wait! Question: Do you have a previous version of Archipelago running? If so, let's give that hard working repository a break first. If not, Step 1 : Open a terminal (you have that already right?) and go to your previous download/git clone folder and run: docker-compose down docker-compose rm Can't remember where you downloaded it? Ok. We can deal with that! Let's stop the containers gracefully first, run: docker stop esmero-web docker stop esmero-solr docker stop esmero-db docker stop esmero-cantaloupe docker stop esmero-php docker stop esmero-minio Now we need to remove them, run: docker rm esmero-web docker rm esmero-solr docker rm esmero-db docker rm esmero-cantaloupe docker rm esmero-php docker rm esmero-minio Ok, now we are ready to start. Step 1: Deployment Prefer to watch a video to see what it's like to install? Go to our user contributed documentation [^1]! IMPORTANT If you run docker-compose as root user (using sudo ) some enviromental variables, like the current folder used inside the docker-compose.yml to mount the Volumens will not work and you will see a bunch of errors. There are two possible solutions. The best is to add your user to the docker group (so no sudo needed). Second option is to replace every {$PWD} inside your docker-compose.yml with either the full path to your current folder, or with a . and wrap that whole line in double quotes, basically making the paths for volumens relatives. Instead of: - ${PWD}:/var/www/html:cached use: - \".:/var/www/html:cached\" Now that you got it, let's deploy: git clone https://github.com/esmero/archipelago-deployment.git archipelago-deployment cd archipelago-deployment git checkout 1 .0.0-RC3 And now a hard choice. Which docker-compose/ensemble? Edge? Stable? Legacy? So many choices. For latest/modern stack PHP7.4/Solr8.8/MySQL8 we recommend: cp docker-compose-linux.yml docker-compose.yml docker-compose pull docker-compose up -d You have something running and do not want to update Databases/Solr indexes: Go legact. In doubt? Ask us please. We can help. If you want to stay more traditional and stick with older versions PHP7.3/Solr7.5/MySQL57 we recommend cp docker-compose-legacy.yml docker-compose.yml docker-compose pull docker-compose up -d Note: docker-compose.yml is git ignored in case you make local adjustments or changes to it. You need to make sure Docker can read/write to your local Drive a.k.a mounted volumens (specially if you decided not to run it as root , because we told you so!) This means in practice running: sudo chown -R 100 :100 persistent/iiifcache sudo chown -R 8983 :8983 persistent/solrcore And then docker exec -ti esmero-php bash -c \"chown -R www-data:www-data private\" Question: why this last command different: Answer: Just a variation. Long answer is the internal www-data user in that container (Alpine Linux) has uid:82, but on ubuntu the www-data user has a different one so we let docker assing the uid from inside instead. In practice you could also run directly sudo chown -R 82:82 private which would only apply to an Alpine use case, which can differ in the future! Does this make sense? No worries if not. Step 2: Set up your Minio S3 bucket Once all containers are up and running (you can do a docker ps to check), access http://localhost:9001 using your most loved Web Browser with the following credentials: user:minio pass:minio123 and create a bucket named \"archipelago\". To do so select Buckets from the left side menu and click the Create Bucket button at the top right. Write archipelago under Bucket Name and submit. Done! That is where we will persist all your files and also your file copies of each Digital Object. You can always go there and explore what Archipelago (well, really Strawberryfield does the hard work) has persisted so you can get comfortable with our architecture. Step 3: Deploy Drupal 9.2.9 and the awesome Archipelago Modules The following will run composer inside the esmero-php container to download all dependencies and Drupal Core too. docker exec -ti esmero-php bash -c \"composer install\" You will see a warning: Do not run Composer as root/super user! See https://getcomposer.org/root for details and the a long list of PHP packages, don't worry, all is good here, keep following the instructions! Once that command finishes run our setup script: docker exec -ti esmero-php bash -c 'scripts/archipelago/setup.sh' Explanation: That script will append some important configurations to your local web/sites/default/settings.php . Note: We say local because your whole Drupal web root (the one you cloned) is also mounted inside the esmero-php and esmero-web containers. So edits to, e.g PHP files, can be done without accessing the container directly from your local folder. If this is the first time you Deploy Drupal using the provided Configurations run: docker exec -ti -u www-data esmero-php bash -c \"cd web;../vendor/bin/drush -y si --verbose --existing-config --db-url=mysql://root:esmerodb@esmero-db/drupal9 --account-name=admin --account-pass=archipelago -r=/var/www/html/web --sites-subdir=default --notify=false;drush cr;chown -R www-data:www-data sites;\" This will give you an admin Drupal user with archipelago as password (!change this if running on a public instance!) and also set the right Docker Container owner for your Drupal installation files. Note: About Steps 2-3, you don't need to/nor should do this more than once. You can destroy/stop/update and recreated your Docker containers and start again, git pull and your Drupal and Data will persist once you passed Installation complete message. I repeat, all other container's data is persistet inside the persistent/ folder contained in this cloned git repository. Drupal and all its code is visible, editable and stable inside your web/ folder. Step 4: Create a \"demo \"and a \"jsonapi\" user using drush and assign your \"admin\" user the Administrator Role (new for Drupal 9). docker exec -ti esmero-php bash -c 'drush ucrt demo --password=\"demo\"; drush urol metadata_pro \"demo\"' docker exec -ti esmero-php bash -c 'drush ucrt jsonapi --password=\"jsonapi\"; drush urol metadata_api \"jsonapi\"' docker exec -ti esmero-php bash -c 'drush urol administrator \"admin\"' Step 5: Ingest some Metadata Displays to make playing much more interactive Archipelago is more fun without having to start writing Metadata Displays (in Twig) before you know what they actually are. Since you should now have a jsonapi user and jsonapi should be enabled, you can use that awesome functionality of D8 to get that done. We have 4 demo Metadata Display Entities that go well with the demo Webform we provided. To do that execute in your shell (copy and paste) docker exec -ti esmero-php bash -c 'scripts/archipelago/deploy.sh' You are done! Open your most loved Web Browser and point it to http://localhost:8001 Note: It can take some time to start the first time (Drupal needs some warming up). The Ubuntu deployment is WAY faster than the OSX deployment because of the way the bind mount volumens are handled by the driver. Our experience is that Archipelago basically reacts instantly! Need help? Blue Screen? Missed a step? Need a hug? If you see any issues or errors or need help with a step, please let us know (ASAP!). You can either open an issue in this repository or use the Google Group . We are here to help. If you like this, let us know! User contributed documentation (A Video!)[^1]: Installing Archipelago on AWS Ubuntu by Zach Spalding : https://youtu.be/RBy7UMxSmyQ [^1]: You may find this user contributed tutorial video, which was created for an earlier Archipelago release, to be helpful. Please note that there are significant differences between the executed steps and that you need to follow the current release instructions in order to have a successful deployment. Caring & Coding + Fixing + Testing Diego Pino Giancarlo Birello Allison Lund Albert Min License GPLv3","title":"Installing Archipelago on Ubuntu 18.04 or 20.04"},{"location":"ubuntu/#installing-archipelago-drupal-9-on-ubuntu-1804-or-2004","text":"","title":"Installing Archipelago Drupal 9 on Ubuntu 18.04 or 20.04"},{"location":"ubuntu/#about-running-terminal-commands","text":"This guide assumes you are comfortable enough running terminal (bash) commands on a Linux Computer. We made sure that you can copy and paste each of these commands from this guide directly into your terminal. You will notice sometimes commands span more than a single line of text. If that is the case, always make sure you copy and paste a single line at a time and press the Enter key afterwards. We suggest also you look at the output. If something fails (and we hope it does not) troubleshooting will be much easier if you can share that output when asking for help. Happy deploying!","title":"About running terminal commands"},{"location":"ubuntu/#prerequisites","text":"At least 10 Gbytes of free space (to get started) Some basic Unix/Terminal Skills 2-4 Gbytes of RAM (4 Recommended) Install Docker if you don't have it already by running: sudo apt install apt-transport-https ca-certificates curl software-properties-common curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable\" sudo apt update sudo apt-cache policy docker-ce sudo apt install docker-ce sudo systemctl status docker sudo usermod -aG docker ${ USER } Log out, log in again! sudo apt install docker-compose Git tools are included by default in Ubuntu","title":"Prerequisites"},{"location":"ubuntu/#wait-question-do-you-have-a-previous-version-of-archipelago-running","text":"If so, let's give that hard working repository a break first. If not, Step 1 : Open a terminal (you have that already right?) and go to your previous download/git clone folder and run: docker-compose down docker-compose rm Can't remember where you downloaded it? Ok. We can deal with that! Let's stop the containers gracefully first, run: docker stop esmero-web docker stop esmero-solr docker stop esmero-db docker stop esmero-cantaloupe docker stop esmero-php docker stop esmero-minio Now we need to remove them, run: docker rm esmero-web docker rm esmero-solr docker rm esmero-db docker rm esmero-cantaloupe docker rm esmero-php docker rm esmero-minio Ok, now we are ready to start.","title":"Wait! Question: Do you have a previous version of Archipelago running?"},{"location":"ubuntu/#step-1-deployment","text":"","title":"Step 1: Deployment"},{"location":"ubuntu/#prefer-to-watch-a-video-to-see-what-its-like-to-install-go-to-our-user-contributed-documentation1","text":"","title":"Prefer to watch a video to see what it's like to install? Go to our user contributed documentation[^1]!"},{"location":"ubuntu/#important","text":"If you run docker-compose as root user (using sudo ) some enviromental variables, like the current folder used inside the docker-compose.yml to mount the Volumens will not work and you will see a bunch of errors. There are two possible solutions. The best is to add your user to the docker group (so no sudo needed). Second option is to replace every {$PWD} inside your docker-compose.yml with either the full path to your current folder, or with a . and wrap that whole line in double quotes, basically making the paths for volumens relatives. Instead of: - ${PWD}:/var/www/html:cached use: - \".:/var/www/html:cached\" Now that you got it, let's deploy: git clone https://github.com/esmero/archipelago-deployment.git archipelago-deployment cd archipelago-deployment git checkout 1 .0.0-RC3 And now a hard choice. Which docker-compose/ensemble? Edge? Stable? Legacy? So many choices. For latest/modern stack PHP7.4/Solr8.8/MySQL8 we recommend: cp docker-compose-linux.yml docker-compose.yml docker-compose pull docker-compose up -d You have something running and do not want to update Databases/Solr indexes: Go legact. In doubt? Ask us please. We can help. If you want to stay more traditional and stick with older versions PHP7.3/Solr7.5/MySQL57 we recommend cp docker-compose-legacy.yml docker-compose.yml docker-compose pull docker-compose up -d Note: docker-compose.yml is git ignored in case you make local adjustments or changes to it. You need to make sure Docker can read/write to your local Drive a.k.a mounted volumens (specially if you decided not to run it as root , because we told you so!) This means in practice running: sudo chown -R 100 :100 persistent/iiifcache sudo chown -R 8983 :8983 persistent/solrcore And then docker exec -ti esmero-php bash -c \"chown -R www-data:www-data private\" Question: why this last command different: Answer: Just a variation. Long answer is the internal www-data user in that container (Alpine Linux) has uid:82, but on ubuntu the www-data user has a different one so we let docker assing the uid from inside instead. In practice you could also run directly sudo chown -R 82:82 private which would only apply to an Alpine use case, which can differ in the future! Does this make sense? No worries if not.","title":"IMPORTANT"},{"location":"ubuntu/#step-2-set-up-your-minio-s3-bucket","text":"Once all containers are up and running (you can do a docker ps to check), access http://localhost:9001 using your most loved Web Browser with the following credentials: user:minio pass:minio123 and create a bucket named \"archipelago\". To do so select Buckets from the left side menu and click the Create Bucket button at the top right. Write archipelago under Bucket Name and submit. Done! That is where we will persist all your files and also your file copies of each Digital Object. You can always go there and explore what Archipelago (well, really Strawberryfield does the hard work) has persisted so you can get comfortable with our architecture.","title":"Step 2: Set up your Minio S3 bucket"},{"location":"ubuntu/#step-3-deploy-drupal-929-and-the-awesome-archipelago-modules","text":"The following will run composer inside the esmero-php container to download all dependencies and Drupal Core too. docker exec -ti esmero-php bash -c \"composer install\" You will see a warning: Do not run Composer as root/super user! See https://getcomposer.org/root for details and the a long list of PHP packages, don't worry, all is good here, keep following the instructions! Once that command finishes run our setup script: docker exec -ti esmero-php bash -c 'scripts/archipelago/setup.sh' Explanation: That script will append some important configurations to your local web/sites/default/settings.php . Note: We say local because your whole Drupal web root (the one you cloned) is also mounted inside the esmero-php and esmero-web containers. So edits to, e.g PHP files, can be done without accessing the container directly from your local folder. If this is the first time you Deploy Drupal using the provided Configurations run: docker exec -ti -u www-data esmero-php bash -c \"cd web;../vendor/bin/drush -y si --verbose --existing-config --db-url=mysql://root:esmerodb@esmero-db/drupal9 --account-name=admin --account-pass=archipelago -r=/var/www/html/web --sites-subdir=default --notify=false;drush cr;chown -R www-data:www-data sites;\" This will give you an admin Drupal user with archipelago as password (!change this if running on a public instance!) and also set the right Docker Container owner for your Drupal installation files. Note: About Steps 2-3, you don't need to/nor should do this more than once. You can destroy/stop/update and recreated your Docker containers and start again, git pull and your Drupal and Data will persist once you passed Installation complete message. I repeat, all other container's data is persistet inside the persistent/ folder contained in this cloned git repository. Drupal and all its code is visible, editable and stable inside your web/ folder.","title":"Step 3: Deploy Drupal 9.2.9 and the awesome Archipelago Modules"},{"location":"ubuntu/#step-4-create-a-demo-and-a-jsonapi-user-using-drush-and-assign-your-admin-user-the-administrator-role-new-for-drupal-9","text":"docker exec -ti esmero-php bash -c 'drush ucrt demo --password=\"demo\"; drush urol metadata_pro \"demo\"' docker exec -ti esmero-php bash -c 'drush ucrt jsonapi --password=\"jsonapi\"; drush urol metadata_api \"jsonapi\"' docker exec -ti esmero-php bash -c 'drush urol administrator \"admin\"'","title":"Step 4: Create a \"demo \"and a \"jsonapi\" user using drush and assign your \"admin\" user the Administrator Role (new for Drupal 9)."},{"location":"ubuntu/#step-5-ingest-some-metadata-displays-to-make-playing-much-more-interactive","text":"Archipelago is more fun without having to start writing Metadata Displays (in Twig) before you know what they actually are. Since you should now have a jsonapi user and jsonapi should be enabled, you can use that awesome functionality of D8 to get that done. We have 4 demo Metadata Display Entities that go well with the demo Webform we provided. To do that execute in your shell (copy and paste) docker exec -ti esmero-php bash -c 'scripts/archipelago/deploy.sh' You are done! Open your most loved Web Browser and point it to http://localhost:8001 Note: It can take some time to start the first time (Drupal needs some warming up). The Ubuntu deployment is WAY faster than the OSX deployment because of the way the bind mount volumens are handled by the driver. Our experience is that Archipelago basically reacts instantly!","title":"Step 5: Ingest some Metadata Displays to make playing much more interactive"},{"location":"ubuntu/#need-help-blue-screen-missed-a-step-need-a-hug","text":"If you see any issues or errors or need help with a step, please let us know (ASAP!). You can either open an issue in this repository or use the Google Group . We are here to help. If you like this, let us know!","title":"Need help? Blue Screen? Missed a step? Need a hug?"},{"location":"ubuntu/#user-contributed-documentation-a-video1","text":"Installing Archipelago on AWS Ubuntu by Zach Spalding : https://youtu.be/RBy7UMxSmyQ [^1]: You may find this user contributed tutorial video, which was created for an earlier Archipelago release, to be helpful. Please note that there are significant differences between the executed steps and that you need to follow the current release instructions in order to have a successful deployment.","title":"User contributed documentation (A Video!)[^1]:"},{"location":"ubuntu/#caring-coding-fixing-testing","text":"Diego Pino Giancarlo Birello Allison Lund Albert Min","title":"Caring &amp; Coding + Fixing + Testing"},{"location":"ubuntu/#license","text":"GPLv3","title":"License"},{"location":"upgradeFromD8ToD9/","text":"Archipelago-deployment: upgrading Drupal 8 to Drupal 9 (1.0.0-RC2 to 1.0.0-RC3) What is this documentation for? If you already have a well set up and well loved Archipelago (1.0.0-RC2) running Drupal 8 (D8), this documentation will allow you to update to 1.0.0-RC3 on Drupal 9 (D9) without major issues. D8 is no longer supported as of the end of November 2021. D9 has been around for a little while, and even if every module is not supported yet, what you need and want for Archipelago has long been ready for D9. However, Archipelago is still D8 compatible if it's necessary for you to stay back a little longer. Requirements An archipelago-deployment local instance 1.0.0-RC2 (working, tested) deployed using provided instructions via Docker and running Drupal 8. Basic knowledge and instincts (+ courage) on how to run Terminal Commands, composer and drush . Patience. You can't skip steps here. For Shell Commands documented here please copy line by line\u2014not the whole block. Backing up and preparing for the upgrade Backups are always going to be your best friends. Archipelago's code, database, and settings are mostly self-contained in your current archipelago-deployment repo folder, and backing up is simple because of that. Step 1: On a terminal, cd into your running archipelago-deployment folder and and shut down your docker-compose ensemble by running the following: docker-compose down Step 2: Verify all containers are actually down. The following command should return an empty listing. If anything is still running, wait a little longer and run the following command again. docker ps Step 3: Now let's tar.gz the whole ensemble with data and configs. As an example we will save this into your $HOME folder. As a good practice we append the current date (YEAR-MONTH-DAY) to the filename. Here we assume today is December 1st of 2021. cd .. sudo tar -czvpf $HOME /archipelago-deployment-backup-20211201.tar.gz archipelago-deployment cd archipelago-deployment The process may take a few minutes. Now let's verify all is there and the tar.gz is not corrupt. tar -tvvf $HOME /archipelago-deployment-backup-20211201.tar.gz You will see a listing of files, and at the end you will see something like this: Archive Format: POSIX pax interchange format, Compression: gzip . If corrupt (do you have enough space? did your ssh connection drop?) you will see the following: tar: Unrecognized archive format Step 4: Restart your docker-compose ensemble and wait a little while for all to start. docker-compose up -d Step 5: Export/backup all of your live Archipelago configurations (this allows you to compare/come back in case you lose something custom during the upgrade). docker exec esmero-php mkdir config/backup docker exec esmero-php drush cex --destination = /var/www/html/config/backup Good. Now it's safe to begin the upgrade. Upgrading to 1.0.0-RC3 Step 1: First we are going to disable modules that are not part of 1.0.0-RC3 or are not yet compatible with D9. Run the following command: docker exec esmero-php drush pm-uninstall module_missing_message_fixer markdown webprofiler key_value webform_views From inside your archipelago-deployment repo folder we are going to open up the file permissions for some of your most protected Drupal files. sudo chmod 777 web/sites/default sudo chmod 666 web/sites/default/*settings.php sudo chmod 666 web/sites/default/*services.yml Step 2: Time to fetch the 1.0.0-RC3 branch and update our docker-compose and composer dependencies. We are also going to stop the current docker ensemble to update all containers to newer versions: docker-compose down git checkout 1 .0.0-RC3 Then copy the appropriate docker-compose file for your architecture: macOS/x86-64 cp docker-compose-osx.yml docker-compose.yml Linux/x86-64/AMD64 cp docker-compose-linux.yml docker-compose.yml macOS/Linux/ARM64 cp docker-compose-arm64.yml docker-compose.yml Finally, pull the images, and bring up the ensemble: docker compose pull docker compose up -d Give all a little time to start. The latest min.io adds a new console, and your Solr core and Database need to be upgraded. Please be patient. To ensure all is well, run (more than once if necessary) the following: docker ps You should see something like this: CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 867fd2a42134 nginx \"/docker-entrypoint.\u2026\" 32 seconds ago Up 27 seconds 0 .0.0.0:8001->80/tcp, :::8001->80/tcp esmero-web 8663e84a9b48 solr:8.8.2 \"docker-entrypoint.s\u2026\" 33 seconds ago Up 30 seconds 0 .0.0.0:8983->8983/tcp, :::8983->8983/tcp esmero-solr 9b580fa0088f minio/minio:latest \"/usr/bin/docker-ent\u2026\" 33 seconds ago Up 28 seconds 0 .0.0.0:9000-9001->9000-9001/tcp, :::9000-9001->9000-9001/tcp esmero-minio 50e2f41c7b60 esmero/esmero-nlp:1.0 \"/usr/local/bin/entr\u2026\" 33 seconds ago Up 30 seconds 0 .0.0.0:6400->6400/tcp, :::6400->6400/tcp esmero-nlp 300810fd6f03 esmero/cantaloupe-s3:4.1.9RC \"sh -c 'java -Dcanta\u2026\" 33 seconds ago Up 30 seconds 0 .0.0.0:8183->8182/tcp, :::8183->8182/tcp esmero-cantaloupe 248e4638ba2a mysql:8.0.22 \"docker-entrypoint.s\u2026\" 33 seconds ago Up 28 seconds 3306 /tcp, 33060 /tcp esmero-db 141ace919344 esmero/php-7.4-fpm:1.0.0-RC2-multiarch \"docker-php-entrypoi\u2026\" 33 seconds ago Up 28 seconds 9000 /tcp esmero-php Important here is the STATUS column. It needs to be a number that goes up in time every time you run docker ps again (and again). Step 3: Now we are going to tell composer to actually fetch the new code and dependencies using the 1.0.0-RC3 provided composer.lock and update the whole Drupal/PHP/JS environment. docker exec -ti esmero-php bash -c \"composer install\" This will fail (sorry!) for a few packages but no worries, they need to be patched and composer is not that smart so simply run it again: docker exec -ti esmero-php bash -c \"composer install\" Well done! If you see no issues and all ends in a Green colored message all is good! Jump to Step 4 What if all is not OK, and I see red and a lot of dependency explanations? If you have manually installed packages via composer in the past that are NO longer Drupal 9 compatible you may see errors. In that case you need to check each package website's (normally https://www.drupal.org/project/the_module_name) and check if there is a Drupal 9 compatible version. If so run: docker exec -ti esmero-php bash -c \"composer require 'drupal/the_module_name:^VERSION_NUMBER_THAT_WORKS_ON_DRUPAL9_' --update-with-dependencies --no-update\" and run **Step 3 ** again ( and again until all is cleared ) If not, try to find a replacement module that does something similar, but in any case you may end having to remove before proceding. Give us a ping/slack/google group/open a github ISSUE if you find yourself uncertain about this. docker exec -ti esmero-php bash -c \"composer remove drupal/the_module_name --no-update\" docker exec -ti esmero-php bash -c \" drush pm-uninstall the_module_name\" Step 4: We will now ask Drupal to update some internal configs and databases. The following commands are part of the from ZERO deployment. They will bring you up to date with RC3 settings and D9 particularities. docker exec -ti esmero-php bash -c 'scripts/archipelago/setup.sh' docker exec -ti esmero-php bash -c 'drush urol administrator \"admin\"' docker exec -ti esmero-php bash -c \"drush updatedb\" Step 5: Previously D8 installations had a \"module/profile\" driven installation. Those are no longer used or even exist as part of core, but a profile can't be changed once installed so you have to do the following to avoid Drupal complaining about our new and simpler way of doing things (a small roll back): docker exec -ti esmero-php bash -c \"sed -i 's/minimal: 1000/standard: 1000/g' config/sync/core.extension.yml\" docker exec -ti esmero-php bash -c \"sed -i 's/profile: minimal/profile: standard/g' config/sync/core.extension.yml\" Step 6: Now you can sync your new Archipelago 1.0.0-RC3 and bring all the new configs and settings in. For this you have two options (no worries, remember you made a backup!): A Partial Sync, which will bring new configs and update existing ones but will not remove ones that only exist in your custom setup, e.g. new Webforms or View Modes. docker exec esmero-php drush cim -y --partial A Complete Sync, which will bring new configs and update existing ones but will also remove all the ones that are not part of RC3. It's a like clean factory reset. docker exec esmero-php drush cim -y If all goes well here and you see no errors it's time to reindex Solr because there are new Fields. Run the following: docker exec esmero-php drush search-api-reindex docker exec esmero-php drush search-api-index You might see some warnings related to modules dealing with previously non-existent data\u2014no worries, just ignore those. If you made it this far you are done with code/devops (are we ever ready?), and that means you should be able to (hopefully) stay in the Drupal 9 realm for a few years! Step 7: Update (or not) your Metadata Display Entities and Menu items. Recommended: If you want to add new templates and menu items 1.0.0-RC3 provides, run this: docker exec -ti esmero-php bash -c 'scripts/archipelago/deploy.sh' Once that is done, you can choose to update all Metadata Displays (Twig templates) we ship with new 1.0.0-RC3 versions (heavily fixed IIIF manifest, Markdown to HTML for Metadata, better Object descriptions). But before you do this, we really recommend that you first make sure to manually (copy/paste) back up any Twig templates you have modified. If unsure, do not run the command that comes after this warning! You can always manually copy the new templates from the d8content/metadatadisplays folder which contains text versions (again, copy/paste) of each shipped template you can pick and use when you feel ready. If you are sure (like really?) you want to overwrite the ones you modified (sure, just checking?), then you can run this: docker exec -ti esmero-php bash -c 'scripts/archipelago/update_deployed.sh' Done! (For realz now) Please log into your Archipelago and test/check all is working! Enjoy 1.0.0-RC3 and Drupal 9. Thanks! Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback, or open an ISSUE in this Archipelago Deployment Repository . Return to Archipelago Deployment .","title":"Upgrading Drupal 8 to Drupal 9"},{"location":"upgradeFromD8ToD9/#archipelago-deployment-upgrading-drupal-8-to-drupal-9-100-rc2-to-100-rc3","text":"","title":"Archipelago-deployment: upgrading Drupal 8 to Drupal 9 (1.0.0-RC2 to 1.0.0-RC3)"},{"location":"upgradeFromD8ToD9/#what-is-this-documentation-for","text":"If you already have a well set up and well loved Archipelago (1.0.0-RC2) running Drupal 8 (D8), this documentation will allow you to update to 1.0.0-RC3 on Drupal 9 (D9) without major issues. D8 is no longer supported as of the end of November 2021. D9 has been around for a little while, and even if every module is not supported yet, what you need and want for Archipelago has long been ready for D9. However, Archipelago is still D8 compatible if it's necessary for you to stay back a little longer.","title":"What is this documentation for?"},{"location":"upgradeFromD8ToD9/#requirements","text":"An archipelago-deployment local instance 1.0.0-RC2 (working, tested) deployed using provided instructions via Docker and running Drupal 8. Basic knowledge and instincts (+ courage) on how to run Terminal Commands, composer and drush . Patience. You can't skip steps here. For Shell Commands documented here please copy line by line\u2014not the whole block.","title":"Requirements"},{"location":"upgradeFromD8ToD9/#backing-up-and-preparing-for-the-upgrade","text":"Backups are always going to be your best friends. Archipelago's code, database, and settings are mostly self-contained in your current archipelago-deployment repo folder, and backing up is simple because of that.","title":"Backing up and preparing for the upgrade"},{"location":"upgradeFromD8ToD9/#step-1","text":"On a terminal, cd into your running archipelago-deployment folder and and shut down your docker-compose ensemble by running the following: docker-compose down","title":"Step 1:"},{"location":"upgradeFromD8ToD9/#step-2","text":"Verify all containers are actually down. The following command should return an empty listing. If anything is still running, wait a little longer and run the following command again. docker ps","title":"Step 2:"},{"location":"upgradeFromD8ToD9/#step-3","text":"Now let's tar.gz the whole ensemble with data and configs. As an example we will save this into your $HOME folder. As a good practice we append the current date (YEAR-MONTH-DAY) to the filename. Here we assume today is December 1st of 2021. cd .. sudo tar -czvpf $HOME /archipelago-deployment-backup-20211201.tar.gz archipelago-deployment cd archipelago-deployment The process may take a few minutes. Now let's verify all is there and the tar.gz is not corrupt. tar -tvvf $HOME /archipelago-deployment-backup-20211201.tar.gz You will see a listing of files, and at the end you will see something like this: Archive Format: POSIX pax interchange format, Compression: gzip . If corrupt (do you have enough space? did your ssh connection drop?) you will see the following: tar: Unrecognized archive format","title":"Step 3:"},{"location":"upgradeFromD8ToD9/#step-4","text":"Restart your docker-compose ensemble and wait a little while for all to start. docker-compose up -d","title":"Step 4:"},{"location":"upgradeFromD8ToD9/#step-5","text":"Export/backup all of your live Archipelago configurations (this allows you to compare/come back in case you lose something custom during the upgrade). docker exec esmero-php mkdir config/backup docker exec esmero-php drush cex --destination = /var/www/html/config/backup Good. Now it's safe to begin the upgrade.","title":"Step 5:"},{"location":"upgradeFromD8ToD9/#upgrading-to-100-rc3","text":"","title":"Upgrading to 1.0.0-RC3"},{"location":"upgradeFromD8ToD9/#step-1_1","text":"First we are going to disable modules that are not part of 1.0.0-RC3 or are not yet compatible with D9. Run the following command: docker exec esmero-php drush pm-uninstall module_missing_message_fixer markdown webprofiler key_value webform_views From inside your archipelago-deployment repo folder we are going to open up the file permissions for some of your most protected Drupal files. sudo chmod 777 web/sites/default sudo chmod 666 web/sites/default/*settings.php sudo chmod 666 web/sites/default/*services.yml","title":"Step 1:"},{"location":"upgradeFromD8ToD9/#step-2_1","text":"Time to fetch the 1.0.0-RC3 branch and update our docker-compose and composer dependencies. We are also going to stop the current docker ensemble to update all containers to newer versions: docker-compose down git checkout 1 .0.0-RC3 Then copy the appropriate docker-compose file for your architecture: macOS/x86-64 cp docker-compose-osx.yml docker-compose.yml Linux/x86-64/AMD64 cp docker-compose-linux.yml docker-compose.yml macOS/Linux/ARM64 cp docker-compose-arm64.yml docker-compose.yml Finally, pull the images, and bring up the ensemble: docker compose pull docker compose up -d Give all a little time to start. The latest min.io adds a new console, and your Solr core and Database need to be upgraded. Please be patient. To ensure all is well, run (more than once if necessary) the following: docker ps You should see something like this: CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 867fd2a42134 nginx \"/docker-entrypoint.\u2026\" 32 seconds ago Up 27 seconds 0 .0.0.0:8001->80/tcp, :::8001->80/tcp esmero-web 8663e84a9b48 solr:8.8.2 \"docker-entrypoint.s\u2026\" 33 seconds ago Up 30 seconds 0 .0.0.0:8983->8983/tcp, :::8983->8983/tcp esmero-solr 9b580fa0088f minio/minio:latest \"/usr/bin/docker-ent\u2026\" 33 seconds ago Up 28 seconds 0 .0.0.0:9000-9001->9000-9001/tcp, :::9000-9001->9000-9001/tcp esmero-minio 50e2f41c7b60 esmero/esmero-nlp:1.0 \"/usr/local/bin/entr\u2026\" 33 seconds ago Up 30 seconds 0 .0.0.0:6400->6400/tcp, :::6400->6400/tcp esmero-nlp 300810fd6f03 esmero/cantaloupe-s3:4.1.9RC \"sh -c 'java -Dcanta\u2026\" 33 seconds ago Up 30 seconds 0 .0.0.0:8183->8182/tcp, :::8183->8182/tcp esmero-cantaloupe 248e4638ba2a mysql:8.0.22 \"docker-entrypoint.s\u2026\" 33 seconds ago Up 28 seconds 3306 /tcp, 33060 /tcp esmero-db 141ace919344 esmero/php-7.4-fpm:1.0.0-RC2-multiarch \"docker-php-entrypoi\u2026\" 33 seconds ago Up 28 seconds 9000 /tcp esmero-php Important here is the STATUS column. It needs to be a number that goes up in time every time you run docker ps again (and again).","title":"Step 2:"},{"location":"upgradeFromD8ToD9/#step-3_1","text":"Now we are going to tell composer to actually fetch the new code and dependencies using the 1.0.0-RC3 provided composer.lock and update the whole Drupal/PHP/JS environment. docker exec -ti esmero-php bash -c \"composer install\" This will fail (sorry!) for a few packages but no worries, they need to be patched and composer is not that smart so simply run it again: docker exec -ti esmero-php bash -c \"composer install\" Well done! If you see no issues and all ends in a Green colored message all is good! Jump to Step 4","title":"Step 3:"},{"location":"upgradeFromD8ToD9/#what-if-all-is-not-ok-and-i-see-red-and-a-lot-of-dependency-explanations","text":"If you have manually installed packages via composer in the past that are NO longer Drupal 9 compatible you may see errors. In that case you need to check each package website's (normally https://www.drupal.org/project/the_module_name) and check if there is a Drupal 9 compatible version. If so run: docker exec -ti esmero-php bash -c \"composer require 'drupal/the_module_name:^VERSION_NUMBER_THAT_WORKS_ON_DRUPAL9_' --update-with-dependencies --no-update\" and run **Step 3 ** again ( and again until all is cleared ) If not, try to find a replacement module that does something similar, but in any case you may end having to remove before proceding. Give us a ping/slack/google group/open a github ISSUE if you find yourself uncertain about this. docker exec -ti esmero-php bash -c \"composer remove drupal/the_module_name --no-update\" docker exec -ti esmero-php bash -c \" drush pm-uninstall the_module_name\"","title":"What if all is not OK, and I see red and a lot of dependency explanations?"},{"location":"upgradeFromD8ToD9/#step-4_1","text":"We will now ask Drupal to update some internal configs and databases. The following commands are part of the from ZERO deployment. They will bring you up to date with RC3 settings and D9 particularities. docker exec -ti esmero-php bash -c 'scripts/archipelago/setup.sh' docker exec -ti esmero-php bash -c 'drush urol administrator \"admin\"' docker exec -ti esmero-php bash -c \"drush updatedb\"","title":"Step 4:"},{"location":"upgradeFromD8ToD9/#step-5_1","text":"Previously D8 installations had a \"module/profile\" driven installation. Those are no longer used or even exist as part of core, but a profile can't be changed once installed so you have to do the following to avoid Drupal complaining about our new and simpler way of doing things (a small roll back): docker exec -ti esmero-php bash -c \"sed -i 's/minimal: 1000/standard: 1000/g' config/sync/core.extension.yml\" docker exec -ti esmero-php bash -c \"sed -i 's/profile: minimal/profile: standard/g' config/sync/core.extension.yml\"","title":"Step 5:"},{"location":"upgradeFromD8ToD9/#step-6","text":"Now you can sync your new Archipelago 1.0.0-RC3 and bring all the new configs and settings in. For this you have two options (no worries, remember you made a backup!):","title":"Step 6:"},{"location":"upgradeFromD8ToD9/#a-partial-sync-which-will-bring-new-configs-and-update-existing-ones-but-will-not-remove-ones-that-only-exist-in-your-custom-setup-eg-new-webforms-or-view-modes","text":"docker exec esmero-php drush cim -y --partial","title":"A Partial Sync, which will bring new configs and update existing ones but will not remove ones that only exist in your custom setup, e.g. new Webforms or View Modes."},{"location":"upgradeFromD8ToD9/#a-complete-sync-which-will-bring-new-configs-and-update-existing-ones-but-will-also-remove-all-the-ones-that-are-not-part-of-rc3-its-a-like-clean-factory-reset","text":"docker exec esmero-php drush cim -y If all goes well here and you see no errors it's time to reindex Solr because there are new Fields. Run the following: docker exec esmero-php drush search-api-reindex docker exec esmero-php drush search-api-index You might see some warnings related to modules dealing with previously non-existent data\u2014no worries, just ignore those. If you made it this far you are done with code/devops (are we ever ready?), and that means you should be able to (hopefully) stay in the Drupal 9 realm for a few years!","title":"A Complete Sync, which will bring new configs and update existing ones but will also remove all the ones that are not part of RC3. It's a like clean factory reset."},{"location":"upgradeFromD8ToD9/#step-7-update-or-not-your-metadata-display-entities-and-menu-items","text":"Recommended: If you want to add new templates and menu items 1.0.0-RC3 provides, run this: docker exec -ti esmero-php bash -c 'scripts/archipelago/deploy.sh' Once that is done, you can choose to update all Metadata Displays (Twig templates) we ship with new 1.0.0-RC3 versions (heavily fixed IIIF manifest, Markdown to HTML for Metadata, better Object descriptions). But before you do this, we really recommend that you first make sure to manually (copy/paste) back up any Twig templates you have modified. If unsure, do not run the command that comes after this warning! You can always manually copy the new templates from the d8content/metadatadisplays folder which contains text versions (again, copy/paste) of each shipped template you can pick and use when you feel ready. If you are sure (like really?) you want to overwrite the ones you modified (sure, just checking?), then you can run this: docker exec -ti esmero-php bash -c 'scripts/archipelago/update_deployed.sh' Done! (For realz now) Please log into your Archipelago and test/check all is working! Enjoy 1.0.0-RC3 and Drupal 9. Thanks! Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback, or open an ISSUE in this Archipelago Deployment Repository . Return to Archipelago Deployment .","title":"Step 7: Update (or not) your Metadata Display Entities and Menu items."},{"location":"upgradeLiveFromD8ToD9/","text":"Archipelago-deployment-live: upgrading Drupal 8 to Drupal 9 (1.0.0-RC2 to 1.0.0-RC3) What is this documentation for? If you already have a well setup and well loved Archipelago (1.0.0-RC2) running Drupal 8 (D8), this documentation will allow you to update to 1.0.0-RC3 on Drupal 9 (D9) without major issues. D8 will no longer be supported by the end of November 2021. D9 has been around for a little while, and even if every module is not supported yet, what you need and want for Archipelago has long been ready for D9. However, Archipelago is still D8 compatible if it's necessary for you to stay back a little longer. Requirements An archipelago-deployment-live instance 1.0.0-RC2 (working, tested) deployed using provided instructions via Docker and running Drupal 8. Basic knowledge and instincts (+ courage) on how to run Terminal Commands, composer and drush . Patience. You can't skip steps here. For Shell Commands documented here please copy line by line\u2014not the whole block. Backing up and preparing for the upgrade Backups are always going to be your best friends. Archipelago's code, database and settings are mostly self-contained in your current archipelago-deployment-live repo folder, and backing up is simple because of that. Step 1: Shutdown your docker-compose ensemble. Move to your archipelago-deployment-live folder and run this: cd deploy/ec2-docker docker-compose down Step 2: Verify all containers are actually down. The following command should return an empty listing. If anything is still running, wait a little longer and run the following comman again. docker ps Step 3: Now let's tar.gz the whole ensemble with data and configs. As an example we will save this into your $HOME folder. As a good practice we append the current date (YEAR-MONTH-DAY) to the filename. Here we assume today is December 1st of 2021. sudo tar -czvpf $HOME /archipelago-deployment-live-backup-20211201.tar.gz ../../../archipelago-deployment-live The process may take a few minutes. Now let's verify all is there and the tar.gz is not corrupt. tar -tvvf $HOME /archipelago-deployment-live-backup-20211201.tar.gz You will see a listing of files. If corrupt (do you have enough space? did your ssh connection drop?) you will see the following: tar: Unrecognized archive format Step 4: Restart your docker-compose ensemble and wait a little while for all to start. docker-compose up -d Step 5: Export/backup all of your live Archipelago configurations (this allows you to compare/come back in case you lose something custom during the upgrade). docker exec esmero-php mkdir config/backup docker exec esmero-php drush cex --destination = /var/www/html/config/backup Good. Now it's safe to begin the upgrade. Upgrading to 1.0.0-RC3 Step 1: First we are going to disable modules that are not part of 1.0.0-RC3 or are not yet compatible with D9. Run the following command: docker exec esmero-php drush pm-uninstall module_missing_message_fixer markdown webprofiler key_value webform_views From inside your archipelago-deployment-live repo folder we are going to open up the file permissions for some of your most protected Drupal files. cd ../../ sudo chmod 777 drupal/web/sites/default sudo chmod 666 drupal/web/sites/default/*settings.php sudo chmod 666 drupal/web/sites/default/*services.yml Step 2: Time to fetch the 1.0.0-RC3 branch and update our docker-compose and composer dependencies. We are also going to stop the current docker ensemble to update all containers to newer versions: cd deploy/ec2-docker docker-compose down git checkout 1 .0.0-RC3 Then copy the appropriate docker-compose file for your architecture: macOS/x86-64 cp docker-compose-osx.yml docker-compose.yml Linux/x86-64/AMD64 cp docker-compose-linux.yml docker-compose.yml macOS/Linux/ARM64 cp docker-compose-arm64.yml docker-compose.yml Finally, pull the images, and bring up the ensemble: docker compose pull docker compose up -d Give all a little time to start. The latest min.io adds a new console, and your Solr core and Database need to be upgraded. Please be patient. To ensure all is well, run (more than once if necessary) the following: docker ps You should see something like this: CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 867fd2a42134 nginx \"/docker-entrypoint.\u2026\" 32 seconds ago Up 27 seconds 0 .0.0.0:8001->80/tcp, :::8001->80/tcp esmero-web 8663e84a9b48 solr:8.8.2 \"docker-entrypoint.s\u2026\" 33 seconds ago Up 30 seconds 0 .0.0.0:8983->8983/tcp, :::8983->8983/tcp esmero-solr 9b580fa0088f minio/minio:latest \"/usr/bin/docker-ent\u2026\" 33 seconds ago Up 28 seconds 0 .0.0.0:9000-9001->9000-9001/tcp, :::9000-9001->9000-9001/tcp esmero-minio 50e2f41c7b60 esmero/esmero-nlp:1.0 \"/usr/local/bin/entr\u2026\" 33 seconds ago Up 30 seconds 0 .0.0.0:6400->6400/tcp, :::6400->6400/tcp esmero-nlp 300810fd6f03 esmero/cantaloupe-s3:4.1.9RC \"sh -c 'java -Dcanta\u2026\" 33 seconds ago Up 30 seconds 0 .0.0.0:8183->8182/tcp, :::8183->8182/tcp esmero-cantaloupe 248e4638ba2a mysql:8.0.22 \"docker-entrypoint.s\u2026\" 33 seconds ago Up 28 seconds 3306 /tcp, 33060 /tcp esmero-db 141ace919344 esmero/php-7.4-fpm:1.0.0-RC2-multiarch \"docker-php-entrypoi\u2026\" 33 seconds ago Up 28 seconds 9000 /tcp esmero-php Important here is the STATUS column. It needs to be a number that goes up in time every time you run docker ps again (and again). Step 3: Now we are going to tell composer to actually fetch the new code and dependencies using the 1.0.0-RC3 provided composer.lock and update the whole Drupal/PHP/JS environment. docker exec -ti esmero-php bash -c \"composer install\" This will fail (sorry!) for a few packages but no worries, they need to be patched and composer is not that smart. So simply run it again: docker exec -ti esmero-php bash -c \"composer install\" Well done! If you see no issues and all ends in a Green colored message all is good! Jump to Step 4 What if all is not OK, and I see red and a lot of dependency explanations? If you have manually installed packages via composer in the past that are NO longer Drupal 9 compatible you may see errors. In that case you need to check each package website's (normally https://www.drupal.org/project/the_module_name) and check if there is a Drupal 9 compatible version. If so run: docker exec -ti esmero-php bash -c \"composer require 'drupal/the_module_name:^VERSION_NUMBER_THAT_WORKS_ON_DRUPAL9_' --update-with-dependencies --no-update\" and run **Step 3 ** again ( and again until all is cleared ) If not: try to find a replacement module that does something simular, but in any case you may end having to remove before proceding. Give us a ping/slack/google group/open a github ISSUE if you find yourself uncertain about this. docker exec -ti esmero-php bash -c \"composer remove drupal/the_module_name --no-update\" docker exec -ti esmero-php bash -c \" drush pm-uninstall the_module_name\" Step 4: We will now ask Drupal to update some internal configs and databases. They will bring you up to date with RC3 settings and D9 particularities. docker exec -ti esmero-php bash -c 'scripts/archipelago/setup.sh' docker exec -ti esmero-php bash -c 'drush urol administrator \"admin\"' docker exec -ti esmero-php bash -c \"drush updatedb\" Step 5: Previously D8 installations had a \"module/profile\" driven installation. Those are no longer used or even exist as part of core, but a profile can't be changed once installed so you have to do the following to avoid Drupal complaining about our new and simpler way of doing things (a small roll back): docker exec -ti esmero-php bash -c \"sed -i 's/minimal: 1000/standard: 1000/g' config/sync/core.extension.yml\" docker exec -ti esmero-php bash -c \"sed -i 's/profile: minimal/profile: standard/g' config/sync/core.extension.yml\" Step 6: Now you can Sync your new Archipelago 1.0.0-RC3 and bring all the new configs and settings in. For this you have two options (no worries, remember you made a backup!): A Partial Sync, which will bring new configs and update existing ones but will not remove ones that only exist in your custom setup, e.g. new Webforms or View Modes. docker exec esmero-php drush cim -y --partial A Complete Sync, which will bring new configs and update existing ones but will also remove all the ones that are not part of RC3. It's a like clean factory reset. docker exec esmero-php drush cim -y If all goes well here and you see no errors it's time to reindex Solr because there are new Fields. Run the following: docker exec esmero-php drush search-api-reindex docker exec esmero-php drush search-api-index You might see some warnings related to modules dealing with previously non-existent data\u2014no worries, just ignore those. If you made it this far you are done with code/devops (are we ever ready?), and that means you should be able to (hopefully) stay in the Drupal 9 realm for a few years! Step 7: Update (or not) your Metadata Display Entities and Menu items. Recommended: If you want to add new templates and menu items 1.0.0-RC3 provides, run this: docker exec -ti esmero-php bash -c 'scripts/archipelago/deploy.sh' Once that is done, you can choose to update all Metadata Displays (Twig templates) we ship with new 1.0.0-RC3 versions (heavily fixed IIIF manifest, Markdown to HTML for Metadata, better Object descriptions). But before you do this, we really recommend that you first make sure to manually (copy/paste) backup any Twig templates you have modified. If unusure, do not run the command that comes after this warning! You can always manually copy the new templates from the d8content/metadatadisplays folder which contains text versions (again, copy/paste) of each shipped template you can pick and use when you feel ready. If you are sure (like really?) you want to overwrite the ones you modified (sure, just checking?), then you can run this: docker exec -ti esmero-php bash -c 'scripts/archipelago/update_deployed.sh' Done! (For realz now) Please log into your Archipelago and test/check all is working! Enjoy 1.0.0-RC3 and Drupal 9. Thanks! Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback, or open an ISSUE in this Archipelago Deployment Live Repository . Return to Archipelago Live Deployment .","title":"Upgrading Drupal 8 to Drupal 9"},{"location":"upgradeLiveFromD8ToD9/#archipelago-deployment-live-upgrading-drupal-8-to-drupal-9-100-rc2-to-100-rc3","text":"","title":"Archipelago-deployment-live: upgrading Drupal 8 to Drupal 9 (1.0.0-RC2 to 1.0.0-RC3)"},{"location":"upgradeLiveFromD8ToD9/#what-is-this-documentation-for","text":"If you already have a well setup and well loved Archipelago (1.0.0-RC2) running Drupal 8 (D8), this documentation will allow you to update to 1.0.0-RC3 on Drupal 9 (D9) without major issues. D8 will no longer be supported by the end of November 2021. D9 has been around for a little while, and even if every module is not supported yet, what you need and want for Archipelago has long been ready for D9. However, Archipelago is still D8 compatible if it's necessary for you to stay back a little longer.","title":"What is this documentation for?"},{"location":"upgradeLiveFromD8ToD9/#requirements","text":"An archipelago-deployment-live instance 1.0.0-RC2 (working, tested) deployed using provided instructions via Docker and running Drupal 8. Basic knowledge and instincts (+ courage) on how to run Terminal Commands, composer and drush . Patience. You can't skip steps here. For Shell Commands documented here please copy line by line\u2014not the whole block.","title":"Requirements"},{"location":"upgradeLiveFromD8ToD9/#backing-up-and-preparing-for-the-upgrade","text":"Backups are always going to be your best friends. Archipelago's code, database and settings are mostly self-contained in your current archipelago-deployment-live repo folder, and backing up is simple because of that.","title":"Backing up and preparing for the upgrade"},{"location":"upgradeLiveFromD8ToD9/#step-1","text":"Shutdown your docker-compose ensemble. Move to your archipelago-deployment-live folder and run this: cd deploy/ec2-docker docker-compose down","title":"Step 1:"},{"location":"upgradeLiveFromD8ToD9/#step-2","text":"Verify all containers are actually down. The following command should return an empty listing. If anything is still running, wait a little longer and run the following comman again. docker ps","title":"Step 2:"},{"location":"upgradeLiveFromD8ToD9/#step-3","text":"Now let's tar.gz the whole ensemble with data and configs. As an example we will save this into your $HOME folder. As a good practice we append the current date (YEAR-MONTH-DAY) to the filename. Here we assume today is December 1st of 2021. sudo tar -czvpf $HOME /archipelago-deployment-live-backup-20211201.tar.gz ../../../archipelago-deployment-live The process may take a few minutes. Now let's verify all is there and the tar.gz is not corrupt. tar -tvvf $HOME /archipelago-deployment-live-backup-20211201.tar.gz You will see a listing of files. If corrupt (do you have enough space? did your ssh connection drop?) you will see the following: tar: Unrecognized archive format","title":"Step 3:"},{"location":"upgradeLiveFromD8ToD9/#step-4","text":"Restart your docker-compose ensemble and wait a little while for all to start. docker-compose up -d","title":"Step 4:"},{"location":"upgradeLiveFromD8ToD9/#step-5","text":"Export/backup all of your live Archipelago configurations (this allows you to compare/come back in case you lose something custom during the upgrade). docker exec esmero-php mkdir config/backup docker exec esmero-php drush cex --destination = /var/www/html/config/backup Good. Now it's safe to begin the upgrade.","title":"Step 5:"},{"location":"upgradeLiveFromD8ToD9/#upgrading-to-100-rc3","text":"","title":"Upgrading to 1.0.0-RC3"},{"location":"upgradeLiveFromD8ToD9/#step-1_1","text":"First we are going to disable modules that are not part of 1.0.0-RC3 or are not yet compatible with D9. Run the following command: docker exec esmero-php drush pm-uninstall module_missing_message_fixer markdown webprofiler key_value webform_views From inside your archipelago-deployment-live repo folder we are going to open up the file permissions for some of your most protected Drupal files. cd ../../ sudo chmod 777 drupal/web/sites/default sudo chmod 666 drupal/web/sites/default/*settings.php sudo chmod 666 drupal/web/sites/default/*services.yml","title":"Step 1:"},{"location":"upgradeLiveFromD8ToD9/#step-2_1","text":"Time to fetch the 1.0.0-RC3 branch and update our docker-compose and composer dependencies. We are also going to stop the current docker ensemble to update all containers to newer versions: cd deploy/ec2-docker docker-compose down git checkout 1 .0.0-RC3 Then copy the appropriate docker-compose file for your architecture: macOS/x86-64 cp docker-compose-osx.yml docker-compose.yml Linux/x86-64/AMD64 cp docker-compose-linux.yml docker-compose.yml macOS/Linux/ARM64 cp docker-compose-arm64.yml docker-compose.yml Finally, pull the images, and bring up the ensemble: docker compose pull docker compose up -d Give all a little time to start. The latest min.io adds a new console, and your Solr core and Database need to be upgraded. Please be patient. To ensure all is well, run (more than once if necessary) the following: docker ps You should see something like this: CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 867fd2a42134 nginx \"/docker-entrypoint.\u2026\" 32 seconds ago Up 27 seconds 0 .0.0.0:8001->80/tcp, :::8001->80/tcp esmero-web 8663e84a9b48 solr:8.8.2 \"docker-entrypoint.s\u2026\" 33 seconds ago Up 30 seconds 0 .0.0.0:8983->8983/tcp, :::8983->8983/tcp esmero-solr 9b580fa0088f minio/minio:latest \"/usr/bin/docker-ent\u2026\" 33 seconds ago Up 28 seconds 0 .0.0.0:9000-9001->9000-9001/tcp, :::9000-9001->9000-9001/tcp esmero-minio 50e2f41c7b60 esmero/esmero-nlp:1.0 \"/usr/local/bin/entr\u2026\" 33 seconds ago Up 30 seconds 0 .0.0.0:6400->6400/tcp, :::6400->6400/tcp esmero-nlp 300810fd6f03 esmero/cantaloupe-s3:4.1.9RC \"sh -c 'java -Dcanta\u2026\" 33 seconds ago Up 30 seconds 0 .0.0.0:8183->8182/tcp, :::8183->8182/tcp esmero-cantaloupe 248e4638ba2a mysql:8.0.22 \"docker-entrypoint.s\u2026\" 33 seconds ago Up 28 seconds 3306 /tcp, 33060 /tcp esmero-db 141ace919344 esmero/php-7.4-fpm:1.0.0-RC2-multiarch \"docker-php-entrypoi\u2026\" 33 seconds ago Up 28 seconds 9000 /tcp esmero-php Important here is the STATUS column. It needs to be a number that goes up in time every time you run docker ps again (and again).","title":"Step 2:"},{"location":"upgradeLiveFromD8ToD9/#step-3_1","text":"Now we are going to tell composer to actually fetch the new code and dependencies using the 1.0.0-RC3 provided composer.lock and update the whole Drupal/PHP/JS environment. docker exec -ti esmero-php bash -c \"composer install\" This will fail (sorry!) for a few packages but no worries, they need to be patched and composer is not that smart. So simply run it again: docker exec -ti esmero-php bash -c \"composer install\" Well done! If you see no issues and all ends in a Green colored message all is good! Jump to Step 4","title":"Step 3:"},{"location":"upgradeLiveFromD8ToD9/#what-if-all-is-not-ok-and-i-see-red-and-a-lot-of-dependency-explanations","text":"If you have manually installed packages via composer in the past that are NO longer Drupal 9 compatible you may see errors. In that case you need to check each package website's (normally https://www.drupal.org/project/the_module_name) and check if there is a Drupal 9 compatible version. If so run: docker exec -ti esmero-php bash -c \"composer require 'drupal/the_module_name:^VERSION_NUMBER_THAT_WORKS_ON_DRUPAL9_' --update-with-dependencies --no-update\" and run **Step 3 ** again ( and again until all is cleared ) If not: try to find a replacement module that does something simular, but in any case you may end having to remove before proceding. Give us a ping/slack/google group/open a github ISSUE if you find yourself uncertain about this. docker exec -ti esmero-php bash -c \"composer remove drupal/the_module_name --no-update\" docker exec -ti esmero-php bash -c \" drush pm-uninstall the_module_name\"","title":"What if all is not OK, and I see red and a lot of dependency explanations?"},{"location":"upgradeLiveFromD8ToD9/#step-4_1","text":"We will now ask Drupal to update some internal configs and databases. They will bring you up to date with RC3 settings and D9 particularities. docker exec -ti esmero-php bash -c 'scripts/archipelago/setup.sh' docker exec -ti esmero-php bash -c 'drush urol administrator \"admin\"' docker exec -ti esmero-php bash -c \"drush updatedb\"","title":"Step 4:"},{"location":"upgradeLiveFromD8ToD9/#step-5_1","text":"Previously D8 installations had a \"module/profile\" driven installation. Those are no longer used or even exist as part of core, but a profile can't be changed once installed so you have to do the following to avoid Drupal complaining about our new and simpler way of doing things (a small roll back): docker exec -ti esmero-php bash -c \"sed -i 's/minimal: 1000/standard: 1000/g' config/sync/core.extension.yml\" docker exec -ti esmero-php bash -c \"sed -i 's/profile: minimal/profile: standard/g' config/sync/core.extension.yml\"","title":"Step 5:"},{"location":"upgradeLiveFromD8ToD9/#step-6","text":"Now you can Sync your new Archipelago 1.0.0-RC3 and bring all the new configs and settings in. For this you have two options (no worries, remember you made a backup!):","title":"Step 6:"},{"location":"upgradeLiveFromD8ToD9/#a-partial-sync-which-will-bring-new-configs-and-update-existing-ones-but-will-not-remove-ones-that-only-exist-in-your-custom-setup-eg-new-webforms-or-view-modes","text":"docker exec esmero-php drush cim -y --partial","title":"A Partial Sync, which will bring new configs and update existing ones but will not remove ones that only exist in your custom setup, e.g. new Webforms or View Modes."},{"location":"upgradeLiveFromD8ToD9/#a-complete-sync-which-will-bring-new-configs-and-update-existing-ones-but-will-also-remove-all-the-ones-that-are-not-part-of-rc3-its-a-like-clean-factory-reset","text":"docker exec esmero-php drush cim -y If all goes well here and you see no errors it's time to reindex Solr because there are new Fields. Run the following: docker exec esmero-php drush search-api-reindex docker exec esmero-php drush search-api-index You might see some warnings related to modules dealing with previously non-existent data\u2014no worries, just ignore those. If you made it this far you are done with code/devops (are we ever ready?), and that means you should be able to (hopefully) stay in the Drupal 9 realm for a few years!","title":"A Complete Sync, which will bring new configs and update existing ones but will also remove all the ones that are not part of RC3. It's a like clean factory reset."},{"location":"upgradeLiveFromD8ToD9/#step-7-update-or-not-your-metadata-display-entities-and-menu-items","text":"Recommended: If you want to add new templates and menu items 1.0.0-RC3 provides, run this: docker exec -ti esmero-php bash -c 'scripts/archipelago/deploy.sh' Once that is done, you can choose to update all Metadata Displays (Twig templates) we ship with new 1.0.0-RC3 versions (heavily fixed IIIF manifest, Markdown to HTML for Metadata, better Object descriptions). But before you do this, we really recommend that you first make sure to manually (copy/paste) backup any Twig templates you have modified. If unusure, do not run the command that comes after this warning! You can always manually copy the new templates from the d8content/metadatadisplays folder which contains text versions (again, copy/paste) of each shipped template you can pick and use when you feel ready. If you are sure (like really?) you want to overwrite the ones you modified (sure, just checking?), then you can run this: docker exec -ti esmero-php bash -c 'scripts/archipelago/update_deployed.sh' Done! (For realz now) Please log into your Archipelago and test/check all is working! Enjoy 1.0.0-RC3 and Drupal 9. Thanks! Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback, or open an ISSUE in this Archipelago Deployment Live Repository . Return to Archipelago Live Deployment .","title":"Step 7: Update (or not) your Metadata Display Entities and Menu items."},{"location":"webforms/","text":"Webforms in Archipelago The Webform Strawberryfield module provides Drupal Webform ( == awesome piece of code) integrations for StrawberryField so you can really have control over your Metadata ingests. These custom elements provide Drupal Webform integrations for Archipelago\u2019s StrawberryField so you can have fine grained and detailed control over your Metadata ingests and edits. Instructions and Guides How to Create a Webform as an Input Method for Archipelago Digital Objects (ADO) Customizing Webforms: Modifying allowable file extensions Archipelago Custom Webform Elements Examples Use these webforms or their elements to create a custom webform for your own repository/project needs Archipelago Default Deployment Webforms Descriptive Metadata Corresponding Schema.org Type Options Digital Object Collection Corresponding Schema.org Type Options Community Created Webforms Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Webforms"},{"location":"webforms/#webforms-in-archipelago","text":"The Webform Strawberryfield module provides Drupal Webform ( == awesome piece of code) integrations for StrawberryField so you can really have control over your Metadata ingests. These custom elements provide Drupal Webform integrations for Archipelago\u2019s StrawberryField so you can have fine grained and detailed control over your Metadata ingests and edits.","title":"Webforms in Archipelago"},{"location":"webforms/#instructions-and-guides","text":"How to Create a Webform as an Input Method for Archipelago Digital Objects (ADO) Customizing Webforms: Modifying allowable file extensions Archipelago Custom Webform Elements","title":"Instructions and Guides"},{"location":"webforms/#examples","text":"Use these webforms or their elements to create a custom webform for your own repository/project needs Archipelago Default Deployment Webforms Descriptive Metadata Corresponding Schema.org Type Options Digital Object Collection Corresponding Schema.org Type Options Community Created Webforms Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Examples"},{"location":"webformsasinput/","text":"Webforms as input method for Archipelago Digital Objects (ADO) Drupal 8/9 provides a lot of out-of-the-box functionality to setup the way Content Entities (Nodes or in our case ADOs) are exposed to users with the proper credentials. That functionality lives under the \"Display Modes\" and can be accessed at yoursite/admin/structure/display-modes . In a few quick words, The Display Mode Concept covers: formatting your Content Entities and their associated Fields so when a user lands on a Content Page, they are displayed in a certain, hopefully pleasing, way and also how users with proper Credentials can fill inputs/edit values for each field a Content Entity provides. First, formatting output (basically building the front facing page for each content entity) is done by a View Mode . Second, defining how/what input method you are going to use to create or edit Content entities, is handled by a Form Mode . Both Modes, are, in Drupal Lingo, Configuration Entities, they provide things you can configure, you can name them and reuse them and those configurations can all be exported and reimported using YAML files. Also both Modes the following in common: Drupal always provides a \"default\" one that can not be deleted. You can create new ones. You can apply permissions to them. All Modes work on \"fields\", means the tiny little input/output pieces that are either part of a Content Entity or attached to them (the title, the Body, and in our case a Strawberryfield (SBF), They Provide Config/setting options for each Field. They are always associated to Content Types/Bundles. Means all Nodes of the same Content type will share the same modes. The main difference, other than their purpose (Output v/s Input) is that, on View Modes, the settings you apply to each field are associated to \"Formatters\" and on Form Modes, the settings you apply to each field are connected to \"Widgets\". So, resuming, this is what lives under the Concept of a \"Display Mode\": View Mode Each field attached to a Content Entity can have a Formatter applied and most of them have configuration options. Formatters do one thing right: they take the raw, stored value and make it \"visible\" inside Drupal. Which formatters are available will depend on the \"type\" of field the Content Entity has. E.g A Node title/Label will have a Title formatter with the option of just displaying a text or a text with a link to the entity. More Complex and fun Fields, like the ones of type SBF will provide a large list of possible Formatters , like IIIF driven viewers, Video formatters, Metadata Display (Twig template driven) ones, etc. This is because a SBF type of field has much more than just a text value, it contains a full graph of metadata and properties, inclusive links to Files and provenance metadata. Form Mode Each field attached to a Content Entity can have a Widget applied and most of them have configuration options. Widgets do one thing right: they expose some type of Form/UI interaction that allows a user to input data into the Entity, under that specific field. And of course they make sure that what you input is validated and saved (if good) correctly. Which Widgets are available will depend on the \"type\" of field the Content Entity has. Example: A Node Title will have a single Text Input with some options, like the size of the Textfield used to feed it. More Complex and fun fields, like the ones of type SBF (strawberryfield), will provide a larger list of possible Widgets, ranging from raw JSON input (which you could select if your data was already in the right format) to the reason we are reading this: Webform driven Widgets . These Widgets include: ones the webform_strawberryfield Drupal module provides ones that use an existing Webform (which are also Entitites!) which either 1) you created or 2) we provided as a setting If you chose a widget other than the raw JSON, the widget will take the raw JSON to build, massage and enrich the data so that it can be presented in a visual format by the SBF. This is because a SBF type of field has much more than just a text value. It contains a full graph of metadata and properties, inclusive links to Files and provenance metadata, which for example allows us to use an Upload field directly in the attached/configured webform. - Form modes also have an additional benefit. Each one can have fine grained permissions. That way you can have many different Form Modes, but allow only certain ones to be visible, or usable by users of a given Drupal Role. I think i get this...but how can i use this knowledge now? Good question! So, to enable, configure, and customize these Display Modes you have to navigate to your Content Type Configuration page in your running Archipelago. This is found at /admin/structure/types . Note: the way things are named in Drupal can be confusing to even the most deeply committed Drupal user, so bear in mind some terms will change. Feel free to read and re-read. You can see that for every existent Content Type, there is a drop down menu with options: Manage Display: will lead you to configuration page where you can setup each View Mode and its settings for a given Content Type Manage Form Display: will lead you to configuration page where you can setup each View Mode and its settings for a given Content Type Manage Display On the top you will see all your View Modes Listed, with the Default one selected and expanded. The Table that follows has one row per Field attached/part of this Content Type. Some of the fields are part of the Content Type itself, in this case Digital Object (bundled) and some other ones are common to every Content Entity derived from a Node. The \"Field\" column contains each field name (not their type, reason why you don't see Strawberry Field there!) but we can tell you right now that there is one, named \"Descriptive Metadata\", that is of SBF type. Wait! Which are the fields in my Content Type? How do we know that the field named \"Descriptive Metadata\" is a Strawberryfield? Well, we set-up the Digital Object Content Type for you that way, but also you can know what we know by pressing on \"Manage fields\" Tab on the top (don't forget to come back to \"Manage display\", afterwards!) Also Surprise: You Content Entity has really really just 2 fields! And that, friends, is one of the secret ingredients of Archipelago. All goes into a Single Field. But wait: i see more fields in my Manage Display table. Why? Well. Some of them are base fields, part of what a Drupal Node is: base field means you can not remove them, they are part of the Definition itself. One obvious one is the Title . But there are also some fields very particular to Archipelago: You can see there are also ones named \"Formatter Object Metadata\", \"Media\" and one named \"Static Media\"!. Where does come from? Those are also Strawberryfields. It sounds confusing but it is really simple. They are really not \"fields\" in the sense of having different data than \"Descriptive Metadata\". Those are In Memory, realtime, copies of the \"Descriptive Metadata\" SBF field and are there to overcome one limitation of Drupal 8: Each Field can have a single \"Formatter\" setup per field. But we want to re-usue the JSON data to show a Viewer, Show Metadata as HTML directly on the ADO/NODE landing page, and we want also to, for example, format sometimes images as Thumbnails and not using a IIIF viewer only. This CopyFields (Legal term) have also a nice Performance advantage. Drupal needs to fetch only once the data from the real Field, \"Descriptive Metadata\", from the database. And then just makes the data available in real time to its copies. That makes all fast, very very fast! And of course flexible. As you dig more into Archipelago you will see the benefits of this approach. Finally, if you need to, you can make more CopyFields. But the reality is, there is a single, only one, SBF in each Digital Object and its named \"Descriptive Metadata\". You can also simply not care about the type and trust the UI. It will just show Formatters that are right for each type and expose Configuration options (and a little abstract of the current ones) under the Widget Column. Operations Columns allows you to setup each Widget. Widget term here is a bit confusing. These are not really Widget in terms of Data Input, but in terms of \"Configuration\" Input. But D8/9 is evolving and its getting better. Those settings apply always only to the current View Mode. You can play with this, experiment and change some settings to get more comfortable. We humbly propose you that you complete this info with the official Drupal 8 Documentation and also apply custom settings to your own, custom View Mode so you don't end changing base, expected functionality while you are still learning. Manage Form Display On the top you will see all your Form Modes Listed, with the Default one selected and expanded. The Table that follows has one row per Field attached/partof this Content Type. The list of fields here is shorter, the SBF CopyFields are not present because all data goes really only into real fields. Also some other, display only ones (means you can not modify them) will not appear here. Again, Some of the fields are part of the Content Type itself, in this case Digital Object (bundled) and some other ones are common to every Content Entity derived from a Node. \"Field\" column contains each field name and the Widget Column allows you to select what type of Input you are going to use to feed it on Ingest/edit. On the right you will see again a little gear, that allows you to configure the settings for a particular Widget. Those settings apply always only to the current Form Mode. So. The one we want to understand is the one attached to the \"Descriptive Metadata\" field. Currently one named \"Strawberryfield webform based input with inline rendering\". There are other two. But let's start with this. Press on the Gear to the right on the same row. AS you can see there are not too many options. But, the main, first Text input is an Autocomplete field that will resolve against your existing Webforms. So, guess what. If you want to use your own Webform to feed a SBF, what do you do? You type the name, let the autocomplete work, select the right Webform, maybe your own custom one, and the you press \"Update\". Once that is done you need to \"Save\" your Form Mode (hint, button at the bottom of the page). We wish life was that easy (and it will once we are done with refining Drupal's UI) but for now there are some extra things you need to do to make sure the Webform, your custom one, can speak JSON. The default one you get named also \"Descriptive Metadata (descriptive_metadata)\", same as the field, is already setup to be used. Means if you create a new Webform by Copying that one, you can start using it inmediately. But if you created one from scratch (Different tutorial) you need to setup some settings. Setting up a Webform to talk Strawberryfield Navigate to your Webform Managment form at /admin/structure/webform If you already created a Webform (different tutorial on how to do that) you will see your own named one in that list. I created for the purpose of this documentation one named \"Diego Test\" (Hi, i'm Diego..) and on the most right Column, \"Operations\" you will haven an Drop Down Menu. On your own Webform row, press on \"Settings\". First time, this can be a little bit intimitading. We recommend going baby steps since the Webform Module is a very powerful one but also exposes you to a lot (and sometimes too many) options. Even more, if you are new to Webforms, we recomment you to copy the \"Descriptive Metadata\" Webform we provided first, and make small changes to it (starting by naming it your own way!) so you can see how that affects your workflow and experience, and how that interacts with the created metadata. The Webform Module provides testing and building capabilities, so you have a Playground there before actually ingesting ADOs. Copying it will also make all the needed settings for SBF interaction to be moved over, so your work will be much easier. But we know you did not do that (where is the fun there right?). So lets setup one from scratch. General Settings Gist here is (look at the screenshot and copy the settings): GENERAL Settings: Check \"Disable saving of submissions\" option. You won't need this form to generate a Native Webform Submission entry. AJAX Settings: Check \"use ajax\" option. We want people to have the experience of staying in a single page while the create a new ADO via a Multi Step Webform Workflow. Confirmation Settings Gist here is (again, look at the screenshot and copy the settings): Select \"Inline Confirmation\". You don't want Webform to send your user to another page while they are still ingesting their ADOs. Handler The glue, the piece of resistance. The handler is the one that knows how to talk to a SBF. In simple words, the handler (any handler) provides functionality that does something with a Webform Submission. The one that you want to select here, is the \"Strawberryfield harvester\" handler. Add it, name it whatever you like (or copy what you see in the screenshot) and make sure you select, if running using our deployment strategy, \"S3 File System\" as the option for \"Permanent Destination for uploaded files\". The wording is tricky there, its not really Permanent, since that is handled by Archipelago, but more to Temporary, while working in ingesting an Object, destination for the Webform. Its not really wrong neither. Its permanent for the Webform, but we have better plans for the files and metadata! Save your settings. And you are ready to roll. That webform can now be used as a Setting for any of the StrawberryField Widgets that use Webforms. Finally (the real finally). Archipelago encourages at least one Field/JSON key to be present always. One with \"type\" as key value. So make sure that your Custom Webform has that one. There are two ways of doing that: You can copy how it is setup from the provided Webform's Elements, from the main Descriptive Metadata Webform and then add one \"select\" element to yours using the same \"type\" \"key\".Important in Archipelago is always the key value since that is what builds the JSON for your metadata. The Description can be any, but for UI consistency you could want to keep it the same across all your webforms. Or, advanced, you can use the import/export capabilities (Webforms are just YAML files!) and export/copy your custom one as text, add the following element before or after some existing elements there type : '#type' : select '#title' : 'Media Type' '#options' : schema_org_creative_works '#required' : true '#label_attributes' : class : - custom-form-input-heading And then reimport. Having a \"type\" value will make your life easier. You don't need it, but everything works smoother that way. Since you have a single Content Type named Digital Object, having a Webform field that has as key \"type\", which leads to a \"type\" JSON key, allows you to discern the Nature of your Digital Object, book or Podcast, Image or 3D and do smart, nice things with them. Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"How to Create a Webform as an Input Method for Archipelago Digital Objects (ADO)"},{"location":"webformsasinput/#webforms-as-input-method-for-archipelago-digital-objects-ado","text":"Drupal 8/9 provides a lot of out-of-the-box functionality to setup the way Content Entities (Nodes or in our case ADOs) are exposed to users with the proper credentials. That functionality lives under the \"Display Modes\" and can be accessed at yoursite/admin/structure/display-modes . In a few quick words, The Display Mode Concept covers: formatting your Content Entities and their associated Fields so when a user lands on a Content Page, they are displayed in a certain, hopefully pleasing, way and also how users with proper Credentials can fill inputs/edit values for each field a Content Entity provides. First, formatting output (basically building the front facing page for each content entity) is done by a View Mode . Second, defining how/what input method you are going to use to create or edit Content entities, is handled by a Form Mode . Both Modes, are, in Drupal Lingo, Configuration Entities, they provide things you can configure, you can name them and reuse them and those configurations can all be exported and reimported using YAML files. Also both Modes the following in common: Drupal always provides a \"default\" one that can not be deleted. You can create new ones. You can apply permissions to them. All Modes work on \"fields\", means the tiny little input/output pieces that are either part of a Content Entity or attached to them (the title, the Body, and in our case a Strawberryfield (SBF), They Provide Config/setting options for each Field. They are always associated to Content Types/Bundles. Means all Nodes of the same Content type will share the same modes. The main difference, other than their purpose (Output v/s Input) is that, on View Modes, the settings you apply to each field are associated to \"Formatters\" and on Form Modes, the settings you apply to each field are connected to \"Widgets\". So, resuming, this is what lives under the Concept of a \"Display Mode\":","title":"Webforms as input method for Archipelago Digital Objects (ADO)"},{"location":"webformsasinput/#view-mode","text":"Each field attached to a Content Entity can have a Formatter applied and most of them have configuration options. Formatters do one thing right: they take the raw, stored value and make it \"visible\" inside Drupal. Which formatters are available will depend on the \"type\" of field the Content Entity has. E.g A Node title/Label will have a Title formatter with the option of just displaying a text or a text with a link to the entity. More Complex and fun Fields, like the ones of type SBF will provide a large list of possible Formatters , like IIIF driven viewers, Video formatters, Metadata Display (Twig template driven) ones, etc. This is because a SBF type of field has much more than just a text value, it contains a full graph of metadata and properties, inclusive links to Files and provenance metadata.","title":"View Mode"},{"location":"webformsasinput/#form-mode","text":"Each field attached to a Content Entity can have a Widget applied and most of them have configuration options. Widgets do one thing right: they expose some type of Form/UI interaction that allows a user to input data into the Entity, under that specific field. And of course they make sure that what you input is validated and saved (if good) correctly. Which Widgets are available will depend on the \"type\" of field the Content Entity has. Example: A Node Title will have a single Text Input with some options, like the size of the Textfield used to feed it. More Complex and fun fields, like the ones of type SBF (strawberryfield), will provide a larger list of possible Widgets, ranging from raw JSON input (which you could select if your data was already in the right format) to the reason we are reading this: Webform driven Widgets . These Widgets include: ones the webform_strawberryfield Drupal module provides ones that use an existing Webform (which are also Entitites!) which either 1) you created or 2) we provided as a setting If you chose a widget other than the raw JSON, the widget will take the raw JSON to build, massage and enrich the data so that it can be presented in a visual format by the SBF. This is because a SBF type of field has much more than just a text value. It contains a full graph of metadata and properties, inclusive links to Files and provenance metadata, which for example allows us to use an Upload field directly in the attached/configured webform. - Form modes also have an additional benefit. Each one can have fine grained permissions. That way you can have many different Form Modes, but allow only certain ones to be visible, or usable by users of a given Drupal Role.","title":"Form Mode"},{"location":"webformsasinput/#i-think-i-get-thisbut-how-can-i-use-this-knowledge-now","text":"Good question! So, to enable, configure, and customize these Display Modes you have to navigate to your Content Type Configuration page in your running Archipelago. This is found at /admin/structure/types . Note: the way things are named in Drupal can be confusing to even the most deeply committed Drupal user, so bear in mind some terms will change. Feel free to read and re-read. You can see that for every existent Content Type, there is a drop down menu with options: Manage Display: will lead you to configuration page where you can setup each View Mode and its settings for a given Content Type Manage Form Display: will lead you to configuration page where you can setup each View Mode and its settings for a given Content Type","title":"I think i get this...but how can i use this knowledge now?"},{"location":"webformsasinput/#manage-display","text":"On the top you will see all your View Modes Listed, with the Default one selected and expanded. The Table that follows has one row per Field attached/part of this Content Type. Some of the fields are part of the Content Type itself, in this case Digital Object (bundled) and some other ones are common to every Content Entity derived from a Node. The \"Field\" column contains each field name (not their type, reason why you don't see Strawberry Field there!) but we can tell you right now that there is one, named \"Descriptive Metadata\", that is of SBF type. Wait! Which are the fields in my Content Type? How do we know that the field named \"Descriptive Metadata\" is a Strawberryfield? Well, we set-up the Digital Object Content Type for you that way, but also you can know what we know by pressing on \"Manage fields\" Tab on the top (don't forget to come back to \"Manage display\", afterwards!) Also Surprise: You Content Entity has really really just 2 fields! And that, friends, is one of the secret ingredients of Archipelago. All goes into a Single Field. But wait: i see more fields in my Manage Display table. Why? Well. Some of them are base fields, part of what a Drupal Node is: base field means you can not remove them, they are part of the Definition itself. One obvious one is the Title . But there are also some fields very particular to Archipelago: You can see there are also ones named \"Formatter Object Metadata\", \"Media\" and one named \"Static Media\"!. Where does come from? Those are also Strawberryfields. It sounds confusing but it is really simple. They are really not \"fields\" in the sense of having different data than \"Descriptive Metadata\". Those are In Memory, realtime, copies of the \"Descriptive Metadata\" SBF field and are there to overcome one limitation of Drupal 8: Each Field can have a single \"Formatter\" setup per field. But we want to re-usue the JSON data to show a Viewer, Show Metadata as HTML directly on the ADO/NODE landing page, and we want also to, for example, format sometimes images as Thumbnails and not using a IIIF viewer only. This CopyFields (Legal term) have also a nice Performance advantage. Drupal needs to fetch only once the data from the real Field, \"Descriptive Metadata\", from the database. And then just makes the data available in real time to its copies. That makes all fast, very very fast! And of course flexible. As you dig more into Archipelago you will see the benefits of this approach. Finally, if you need to, you can make more CopyFields. But the reality is, there is a single, only one, SBF in each Digital Object and its named \"Descriptive Metadata\". You can also simply not care about the type and trust the UI. It will just show Formatters that are right for each type and expose Configuration options (and a little abstract of the current ones) under the Widget Column. Operations Columns allows you to setup each Widget. Widget term here is a bit confusing. These are not really Widget in terms of Data Input, but in terms of \"Configuration\" Input. But D8/9 is evolving and its getting better. Those settings apply always only to the current View Mode. You can play with this, experiment and change some settings to get more comfortable. We humbly propose you that you complete this info with the official Drupal 8 Documentation and also apply custom settings to your own, custom View Mode so you don't end changing base, expected functionality while you are still learning.","title":"Manage Display"},{"location":"webformsasinput/#manage-form-display","text":"On the top you will see all your Form Modes Listed, with the Default one selected and expanded. The Table that follows has one row per Field attached/partof this Content Type. The list of fields here is shorter, the SBF CopyFields are not present because all data goes really only into real fields. Also some other, display only ones (means you can not modify them) will not appear here. Again, Some of the fields are part of the Content Type itself, in this case Digital Object (bundled) and some other ones are common to every Content Entity derived from a Node. \"Field\" column contains each field name and the Widget Column allows you to select what type of Input you are going to use to feed it on Ingest/edit. On the right you will see again a little gear, that allows you to configure the settings for a particular Widget. Those settings apply always only to the current Form Mode. So. The one we want to understand is the one attached to the \"Descriptive Metadata\" field. Currently one named \"Strawberryfield webform based input with inline rendering\". There are other two. But let's start with this. Press on the Gear to the right on the same row. AS you can see there are not too many options. But, the main, first Text input is an Autocomplete field that will resolve against your existing Webforms. So, guess what. If you want to use your own Webform to feed a SBF, what do you do? You type the name, let the autocomplete work, select the right Webform, maybe your own custom one, and the you press \"Update\". Once that is done you need to \"Save\" your Form Mode (hint, button at the bottom of the page). We wish life was that easy (and it will once we are done with refining Drupal's UI) but for now there are some extra things you need to do to make sure the Webform, your custom one, can speak JSON. The default one you get named also \"Descriptive Metadata (descriptive_metadata)\", same as the field, is already setup to be used. Means if you create a new Webform by Copying that one, you can start using it inmediately. But if you created one from scratch (Different tutorial) you need to setup some settings.","title":"Manage Form Display"},{"location":"webformsasinput/#setting-up-a-webform-to-talk-strawberryfield","text":"Navigate to your Webform Managment form at /admin/structure/webform If you already created a Webform (different tutorial on how to do that) you will see your own named one in that list. I created for the purpose of this documentation one named \"Diego Test\" (Hi, i'm Diego..) and on the most right Column, \"Operations\" you will haven an Drop Down Menu. On your own Webform row, press on \"Settings\". First time, this can be a little bit intimitading. We recommend going baby steps since the Webform Module is a very powerful one but also exposes you to a lot (and sometimes too many) options. Even more, if you are new to Webforms, we recomment you to copy the \"Descriptive Metadata\" Webform we provided first, and make small changes to it (starting by naming it your own way!) so you can see how that affects your workflow and experience, and how that interacts with the created metadata. The Webform Module provides testing and building capabilities, so you have a Playground there before actually ingesting ADOs. Copying it will also make all the needed settings for SBF interaction to be moved over, so your work will be much easier. But we know you did not do that (where is the fun there right?). So lets setup one from scratch.","title":"Setting up a Webform to talk Strawberryfield"},{"location":"webformsasinput/#general-settings","text":"Gist here is (look at the screenshot and copy the settings): GENERAL Settings: Check \"Disable saving of submissions\" option. You won't need this form to generate a Native Webform Submission entry. AJAX Settings: Check \"use ajax\" option. We want people to have the experience of staying in a single page while the create a new ADO via a Multi Step Webform Workflow.","title":"General Settings"},{"location":"webformsasinput/#confirmation-settings","text":"Gist here is (again, look at the screenshot and copy the settings): Select \"Inline Confirmation\". You don't want Webform to send your user to another page while they are still ingesting their ADOs.","title":"Confirmation Settings"},{"location":"webformsasinput/#handler","text":"The glue, the piece of resistance. The handler is the one that knows how to talk to a SBF. In simple words, the handler (any handler) provides functionality that does something with a Webform Submission. The one that you want to select here, is the \"Strawberryfield harvester\" handler. Add it, name it whatever you like (or copy what you see in the screenshot) and make sure you select, if running using our deployment strategy, \"S3 File System\" as the option for \"Permanent Destination for uploaded files\". The wording is tricky there, its not really Permanent, since that is handled by Archipelago, but more to Temporary, while working in ingesting an Object, destination for the Webform. Its not really wrong neither. Its permanent for the Webform, but we have better plans for the files and metadata! Save your settings. And you are ready to roll. That webform can now be used as a Setting for any of the StrawberryField Widgets that use Webforms. Finally (the real finally). Archipelago encourages at least one Field/JSON key to be present always. One with \"type\" as key value. So make sure that your Custom Webform has that one. There are two ways of doing that: You can copy how it is setup from the provided Webform's Elements, from the main Descriptive Metadata Webform and then add one \"select\" element to yours using the same \"type\" \"key\".Important in Archipelago is always the key value since that is what builds the JSON for your metadata. The Description can be any, but for UI consistency you could want to keep it the same across all your webforms. Or, advanced, you can use the import/export capabilities (Webforms are just YAML files!) and export/copy your custom one as text, add the following element before or after some existing elements there type : '#type' : select '#title' : 'Media Type' '#options' : schema_org_creative_works '#required' : true '#label_attributes' : class : - custom-form-input-heading And then reimport. Having a \"type\" value will make your life easier. You don't need it, but everything works smoother that way. Since you have a single Content Type named Digital Object, having a Webform field that has as key \"type\", which leads to a \"type\" JSON key, allows you to discern the Nature of your Digital Object, book or Podcast, Image or 3D and do smart, nice things with them. Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Handler"},{"location":"workingtwigs/","text":"Working with Twig in Archipelago The following information can also be found in this Presentation from the \"Twig Templates and Archipelago\" Spring 2021 Workshop: Twig Templates and Archipelago Prequisites (with food analogy) Know your Data/Metadata. What do I have? What do I have in my Fridge? Do I have Tofu? Do I have Peppermint ? One Bunch? Know your final desired output Document: MODS, HTML, GEOJSON, etc. What are you going to cook ? Do you have a picture of the Curry ? Have you ever had Curry ? Know your Twig Basics How to cut and dice , steam and saut\u00e9 Do not be afraid You can\u2019t get burned here and Ingredients do not expire! Ask for help. Slack/Google Groups/Postcards Seeing others cook helps and also motivates. Others may share some spices. Use and Share your findings! Eat what you cook. Share with friends and family. Note about the Examples: All examples shown below are using the following JSON snipped from Laddie the dog running in the garden, Bronx, N.Y., undated [c. 1910-1918?] . Click to view image of the JSON snippet. Click to view this snippet as JSON. { \"type\" : \"Photograph\" , \"label\" : \"Laddie the dog running in the garden, Bronx, N.Y., undated [c. 1910-1918?]\" , \"owner\" : \"New-York Historical Society, 170 Central Park West, New York, NY 10024, 212-873-3400.\" , \"rights\" : \"This digital image may be used for educational or scholarly purposes without restriction. Commercial and other uses of the item are prohibited without prior written permission from the New-York Historical Society. For more information, please visit the New-York Historical Society's Rights and Reproductions Department web page at http:\\/\\/www.nyhistory.org\\/about\\/rights-reproductions\" , \"language\" : [ \"English\" ], \"documents\" : [], \"publisher\" : \"\" , \"ismemberof\" : \"111\" , \"creator_lod\" : [ { \"name_uri\" : \"\" , \"role_uri\" : \"http:\\/\\/id.loc.gov\\/vocabulary\\/relators\\/pht\" , \"agent_type\" : \"personal\" , \"name_label\" : \"Stonebridge, George Ehler\" , \"role_label\" : \"Photographer\" } ], \"description\" : \"George Ehler Stonebridge (d. 1941) was an amateur photographer who lived and worked in the Bronx, New York.\" , \"subject_loc\" : [ { \"uri\" : \"http:\\/\\/id.loc.gov\\/authorities\\/subjects\\/sh85038796\" , \"label\" : \"Dogs\" } ], \"date_created\" : \"1910-01-01\" } First: Know Your Data Understanding the basic structure of your JSON data. Single JSON Value. For \"type\": \"Photograph\" \"type\" = JSON Key or Property \"Photograph\" = Single JSON Value (string) Multiple JSON Values (Array of Enumeration of Strings ) - For \"language\": [\"English\",\"Spanish\"] - \"language\" = JSON Key or Property - \"[\"English\",\"Spanish\"]\" = Multiple JSON Values (Array of Enumeration of Strings ) Multiple JSON Values (Array of Enumeration of Objects ) For \"subject_loc\":[{\"uri\":\"http://..\",\"label\":\"Dogs\"},{\"uri\":\"http://..\",\"label\":\"Pets\"}] \"subject_loc\" = JSON Key or Property [{\"uri\":\"http://..\",\"label\":\"Dogs\"},{\"uri\":\"http://..\",\"label\":\"Pets\"}] = Object with two JSON Keys. Each one with a single Value Multiple JSON Values (Array of Enumeration of Objects ) Getting Started with the Twig Language in Archipelago Data is known as Context in Twig Lingo. All your JSON Strawberryfield Metadata is accessible inside a Variable named data in your twig template. You can access the values by using data DOT Property (attribute) Name . In the Laddie the Dog example shown above (originally) : data.type will contain \"Photograph\" data.language will contain [ \"English\" ] data.language[0] will contain \"English\" 0 means first entry in an Array or Enumeration data.subject_loc will contain [{ \"uri\":\"http://..\",\"label\": \"Dog\" }] data.subject_loc.uri will contain \"http://..\" data.subject_loc.label will contain \"Dog\" Please note: you also have access to other info in your context node : such as node.id is the Drupal ID of your Current ADO; Also is_front , language , is_admin , logged_in and more! Twig Statements and Printing https://twig.symfony.com/doc/3.x/templates.html Simple examples using Printing Statements Single JSON Value Example: Twig template: Hello I am a {{ data.type }} and very happy to meet you Rendered output: Hello I am a Photograph and very happy to meet you Multiple JSON Values Example: Twig template: Hello I was classified as \" {{ data.subject_loc [ 0 ] .label }} \" and very happy to meet you Rendered Output: Hello I was classified as \"Dogs\" and very happy to meet you Twig Statements and Executing https://twig.symfony.com/doc/3.x/tags/if.html Rendered Output based upon different Twig conditionals , operators , tests , assignments , and filters Example 1: Twig template: {% if data.subject_loc is defined %} Hey I have a Subject Key {% else %} Ups no Subject Key {% endif %} Rendered Output: Hey I have a Subject Key Conditionals, Operator, and Test usage: If/else are conditionals is is an operator defined is a test Example 2: Twig template: {% for key , subject in data.subject_loc %} * Subject {{ subject.label }} found at position {{ key }} {% endfor %} Rendered Output: * Subject Dogs found at position 0 Loop usage: for is a loop Inside the loop you have access to key , subject Example 3: Twig template: {% for subject in data.subject_loc %} {% set label_lowercase = subject.label | lower %} My lower case Subject is {{ label_lowercase }} {% endfor %} Rendered Output: My lower case Subject is dogs Assignment, Filter, and Loop uage: set is an assignment | is a pipe, used after a value to apply a filter . lower is a filter Inside the loop you have have access to subject and label_lowercase Example 4: Twig template: {% for subject in data.subject_loc %} {% set label_lowercase = subject.label | lower %} My lower case Subject is {{ label_lowercase }} {% endfor %} {# This won\u2019t display because it was assigned inside The For Loop #} {{ label_lowercase }} Rendered Output: My lower case Subject is dogs Full Examples for Common Uses Cases: Use case #1: I have multiple LoD Subjects and want to display them in my page as a clickable ordered list but I\u2019m a safe/careful person. Twig Example for Use Case #1: {% if data.subject_loc is iterable and data.subject_loc is not empty %} <h2>My Subjects</h2> <ul> {% for subject in data.subject_loc %} <li> <a href=\" {{ subject.uri }} \" title=\" {{ subject.label | capitalize }} \" target=\"_blank\"> {{ subject.label }} </a> </li> {% endfor %} </ul> {% endif %} Use case #2: I have sometimes a publication date. I want to show it in beautiful human readable language. Twig Example for Use Case #2: {% if data.date_published is not empty %} <h2>Date {{ data.label }} was published:</h2> <p> {{ data.date_published | date ( \"F jS \\\\o\\\\f Y \\\\a\\\\t g:ia\" ) }} </p> {% endif %} Note about date in this Use Case #2 Twig Example: date() is a function It uses a \u201cDate Format Pattern\u201d as argument. Use Case #3 (Full Curry): {# May 4th 2021 @dpino: I have sometimes a user provided creation date. I want to show it in beautiful human readable language but fallback to automatic date if absent. I also want in the last case to show it was either \u201ccreated\u201d or \u201cupdated\u201d. #} \"as:generator\" : { \"type\" : \"Update\" , \"actor\" : { \"url\" : \"https:\\/\\/archipelago.nyc\\/form\\/descriptive-metadata\" , \"name\" : \"descriptive_metadata\" , \"type\" : \"Service\" }, \"endTime\" : \"2021-03-17T13:24:01-04:00\" , \"summary\" : \"Generator\" , \"@context\" : \"https:\\/\\/www.w3.org\\/ns\\/activitystreams\" } Twig Example for Use Case #3: {% if data.date_created is not empty %} <h2>Date {{ data.label }} was created:</h2> <p> {{ data.date_created | date ( \"F jS \\\\o\\\\f Y \\\\a\\\\t g:ia\" ) }} </p> {% else %} <h2>Date {{ data.label }} was {{ attribute ( data , 'as:generator' ) .type | lower }} d in this repository:</h2> <p> {{ attribute ( data , 'as:generator' ) .endTime | date ( \"F jS \\\\o\\\\f Y \\\\a\\\\t g:ia\" ) }} </p> {% endif %} A Recommended Workflow You want to create a New Metadata Display (HTML) or a new (XML) Schema based format? Get yourself an example document (Frame) . If HTML copy the source. If XML copy the full XML. (cmd+c) Create a new Metadata Display Entity . Copy the content (text) of your Frame into the Edit window. (cmd+v) Select an existing (as complete as possible) ADO to use as preview, press Preview. Put your nice glasses on. What do you see? What data in your Frame do you have in your ADO (data)? Start nimble. Selected the data.label info, check where your Frame uses a Title or a Label . Remove that text (cmd+x) and replace with a {{ data.label }} . Press Preview. Do you see your title? Keep doing 6 , over and over. Leave complex values for the end. (e.g data.subject_loc ) Document your changes. {# I added this because .. #} Save. Once the Template is in place you can use it in a Formatter , as Endpoint , in your Search Results or just keep it around until you and the world are ready! And now it's your turn! We hope you found the information presented here to be helpful in getting started working with Twigs in Archipelago. Click here to return to the main Twigs in Archipelago documentation . Happy Twigging! Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Working With Twig in Archipelago (getting started with custom Twig templates)"},{"location":"workingtwigs/#working-with-twig-in-archipelago","text":"The following information can also be found in this Presentation from the \"Twig Templates and Archipelago\" Spring 2021 Workshop: Twig Templates and Archipelago","title":"Working with Twig in Archipelago"},{"location":"workingtwigs/#prequisites-with-food-analogy","text":"Know your Data/Metadata. What do I have? What do I have in my Fridge? Do I have Tofu? Do I have Peppermint ? One Bunch? Know your final desired output Document: MODS, HTML, GEOJSON, etc. What are you going to cook ? Do you have a picture of the Curry ? Have you ever had Curry ? Know your Twig Basics How to cut and dice , steam and saut\u00e9 Do not be afraid You can\u2019t get burned here and Ingredients do not expire! Ask for help. Slack/Google Groups/Postcards Seeing others cook helps and also motivates. Others may share some spices. Use and Share your findings! Eat what you cook. Share with friends and family.","title":"Prequisites (with food analogy)"},{"location":"workingtwigs/#note-about-the-examples","text":"All examples shown below are using the following JSON snipped from Laddie the dog running in the garden, Bronx, N.Y., undated [c. 1910-1918?] . Click to view image of the JSON snippet. Click to view this snippet as JSON. { \"type\" : \"Photograph\" , \"label\" : \"Laddie the dog running in the garden, Bronx, N.Y., undated [c. 1910-1918?]\" , \"owner\" : \"New-York Historical Society, 170 Central Park West, New York, NY 10024, 212-873-3400.\" , \"rights\" : \"This digital image may be used for educational or scholarly purposes without restriction. Commercial and other uses of the item are prohibited without prior written permission from the New-York Historical Society. For more information, please visit the New-York Historical Society's Rights and Reproductions Department web page at http:\\/\\/www.nyhistory.org\\/about\\/rights-reproductions\" , \"language\" : [ \"English\" ], \"documents\" : [], \"publisher\" : \"\" , \"ismemberof\" : \"111\" , \"creator_lod\" : [ { \"name_uri\" : \"\" , \"role_uri\" : \"http:\\/\\/id.loc.gov\\/vocabulary\\/relators\\/pht\" , \"agent_type\" : \"personal\" , \"name_label\" : \"Stonebridge, George Ehler\" , \"role_label\" : \"Photographer\" } ], \"description\" : \"George Ehler Stonebridge (d. 1941) was an amateur photographer who lived and worked in the Bronx, New York.\" , \"subject_loc\" : [ { \"uri\" : \"http:\\/\\/id.loc.gov\\/authorities\\/subjects\\/sh85038796\" , \"label\" : \"Dogs\" } ], \"date_created\" : \"1910-01-01\" }","title":"Note about the Examples:"},{"location":"workingtwigs/#first-know-your-data","text":"Understanding the basic structure of your JSON data. Single JSON Value. For \"type\": \"Photograph\" \"type\" = JSON Key or Property \"Photograph\" = Single JSON Value (string) Multiple JSON Values (Array of Enumeration of Strings ) - For \"language\": [\"English\",\"Spanish\"] - \"language\" = JSON Key or Property - \"[\"English\",\"Spanish\"]\" = Multiple JSON Values (Array of Enumeration of Strings ) Multiple JSON Values (Array of Enumeration of Objects ) For \"subject_loc\":[{\"uri\":\"http://..\",\"label\":\"Dogs\"},{\"uri\":\"http://..\",\"label\":\"Pets\"}] \"subject_loc\" = JSON Key or Property [{\"uri\":\"http://..\",\"label\":\"Dogs\"},{\"uri\":\"http://..\",\"label\":\"Pets\"}] = Object with two JSON Keys. Each one with a single Value Multiple JSON Values (Array of Enumeration of Objects )","title":"First: Know Your Data"},{"location":"workingtwigs/#getting-started-with-the-twig-language-in-archipelago","text":"Data is known as Context in Twig Lingo. All your JSON Strawberryfield Metadata is accessible inside a Variable named data in your twig template. You can access the values by using data DOT Property (attribute) Name . In the Laddie the Dog example shown above (originally) : data.type will contain \"Photograph\" data.language will contain [ \"English\" ] data.language[0] will contain \"English\" 0 means first entry in an Array or Enumeration data.subject_loc will contain [{ \"uri\":\"http://..\",\"label\": \"Dog\" }] data.subject_loc.uri will contain \"http://..\" data.subject_loc.label will contain \"Dog\" Please note: you also have access to other info in your context node : such as node.id is the Drupal ID of your Current ADO; Also is_front , language , is_admin , logged_in and more!","title":"Getting Started with the Twig Language in Archipelago"},{"location":"workingtwigs/#twig-statements-and-printing","text":"https://twig.symfony.com/doc/3.x/templates.html Simple examples using Printing Statements Single JSON Value Example: Twig template: Hello I am a {{ data.type }} and very happy to meet you Rendered output: Hello I am a Photograph and very happy to meet you Multiple JSON Values Example: Twig template: Hello I was classified as \" {{ data.subject_loc [ 0 ] .label }} \" and very happy to meet you Rendered Output: Hello I was classified as \"Dogs\" and very happy to meet you","title":"Twig Statements and Printing"},{"location":"workingtwigs/#twig-statements-and-executing","text":"https://twig.symfony.com/doc/3.x/tags/if.html Rendered Output based upon different Twig conditionals , operators , tests , assignments , and filters Example 1: Twig template: {% if data.subject_loc is defined %} Hey I have a Subject Key {% else %} Ups no Subject Key {% endif %} Rendered Output: Hey I have a Subject Key Conditionals, Operator, and Test usage: If/else are conditionals is is an operator defined is a test Example 2: Twig template: {% for key , subject in data.subject_loc %} * Subject {{ subject.label }} found at position {{ key }} {% endfor %} Rendered Output: * Subject Dogs found at position 0 Loop usage: for is a loop Inside the loop you have access to key , subject Example 3: Twig template: {% for subject in data.subject_loc %} {% set label_lowercase = subject.label | lower %} My lower case Subject is {{ label_lowercase }} {% endfor %} Rendered Output: My lower case Subject is dogs Assignment, Filter, and Loop uage: set is an assignment | is a pipe, used after a value to apply a filter . lower is a filter Inside the loop you have have access to subject and label_lowercase Example 4: Twig template: {% for subject in data.subject_loc %} {% set label_lowercase = subject.label | lower %} My lower case Subject is {{ label_lowercase }} {% endfor %} {# This won\u2019t display because it was assigned inside The For Loop #} {{ label_lowercase }} Rendered Output: My lower case Subject is dogs","title":"Twig Statements and Executing"},{"location":"workingtwigs/#full-examples-for-common-uses-cases","text":"Use case #1: I have multiple LoD Subjects and want to display them in my page as a clickable ordered list but I\u2019m a safe/careful person. Twig Example for Use Case #1: {% if data.subject_loc is iterable and data.subject_loc is not empty %} <h2>My Subjects</h2> <ul> {% for subject in data.subject_loc %} <li> <a href=\" {{ subject.uri }} \" title=\" {{ subject.label | capitalize }} \" target=\"_blank\"> {{ subject.label }} </a> </li> {% endfor %} </ul> {% endif %} Use case #2: I have sometimes a publication date. I want to show it in beautiful human readable language. Twig Example for Use Case #2: {% if data.date_published is not empty %} <h2>Date {{ data.label }} was published:</h2> <p> {{ data.date_published | date ( \"F jS \\\\o\\\\f Y \\\\a\\\\t g:ia\" ) }} </p> {% endif %} Note about date in this Use Case #2 Twig Example: date() is a function It uses a \u201cDate Format Pattern\u201d as argument. Use Case #3 (Full Curry): {# May 4th 2021 @dpino: I have sometimes a user provided creation date. I want to show it in beautiful human readable language but fallback to automatic date if absent. I also want in the last case to show it was either \u201ccreated\u201d or \u201cupdated\u201d. #} \"as:generator\" : { \"type\" : \"Update\" , \"actor\" : { \"url\" : \"https:\\/\\/archipelago.nyc\\/form\\/descriptive-metadata\" , \"name\" : \"descriptive_metadata\" , \"type\" : \"Service\" }, \"endTime\" : \"2021-03-17T13:24:01-04:00\" , \"summary\" : \"Generator\" , \"@context\" : \"https:\\/\\/www.w3.org\\/ns\\/activitystreams\" } Twig Example for Use Case #3: {% if data.date_created is not empty %} <h2>Date {{ data.label }} was created:</h2> <p> {{ data.date_created | date ( \"F jS \\\\o\\\\f Y \\\\a\\\\t g:ia\" ) }} </p> {% else %} <h2>Date {{ data.label }} was {{ attribute ( data , 'as:generator' ) .type | lower }} d in this repository:</h2> <p> {{ attribute ( data , 'as:generator' ) .endTime | date ( \"F jS \\\\o\\\\f Y \\\\a\\\\t g:ia\" ) }} </p> {% endif %}","title":"Full Examples for Common Uses Cases:"},{"location":"workingtwigs/#a-recommended-workflow","text":"You want to create a New Metadata Display (HTML) or a new (XML) Schema based format? Get yourself an example document (Frame) . If HTML copy the source. If XML copy the full XML. (cmd+c) Create a new Metadata Display Entity . Copy the content (text) of your Frame into the Edit window. (cmd+v) Select an existing (as complete as possible) ADO to use as preview, press Preview. Put your nice glasses on. What do you see? What data in your Frame do you have in your ADO (data)? Start nimble. Selected the data.label info, check where your Frame uses a Title or a Label . Remove that text (cmd+x) and replace with a {{ data.label }} . Press Preview. Do you see your title? Keep doing 6 , over and over. Leave complex values for the end. (e.g data.subject_loc ) Document your changes. {# I added this because .. #} Save. Once the Template is in place you can use it in a Formatter , as Endpoint , in your Search Results or just keep it around until you and the world are ready!","title":"A Recommended Workflow"},{"location":"workingtwigs/#and-now-its-your-turn","text":"We hope you found the information presented here to be helpful in getting started working with Twigs in Archipelago. Click here to return to the main Twigs in Archipelago documentation . Happy Twigging! Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"And now it's your turn!"},{"location":"xdebug/","text":"Debugging PHP in Archipelago This document describes how to enable Xdebug for local PHP development using the PHPStorm IDE and a docker container running the Archipelago esmero-php:development image. It involves interacting with the esmero/archipelago-docker-images repo and the esmero/archipelago-deployment repo. Part 1: Docker Run the following commands from your /archipelago-deployment directory: docker-compose down \\ docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d This version of docker-compose up uses an override file to modify our services. docker-compose.dev.yml we now have an extra PHP container called esmero-php-debug . To stop the containers in the future, run docker-compose -f docker-compose.yml -f docker-compose.dev.yml down . (To make these commands easier to remember, consider making bash aliases in your .bashrc file.) (If you are running your development on a Linux system, you may need to make a modification to your xdebug configuration file on the esmero-php-dev container. See appendix at the bottom of this page.) So we have reloaded the containers and now you are ready for Part 2. Part 2: PHPStorm In PHPStorm, open your archipelago-deployment project. Go to Preferences > Languages & Frameworks > PHP > Debug or Settings > PHP > Servers . In this window there is an Xdebug section. Use these settings: Debug port: 9003 . (do NOT use the default, 9000) Can accept external connections: yes, select checkbox (optional) Break at first line in PHP scripts: uncheck. If you leave this selected, you will have to manually step through a breakpoint from Drupal's main index.php file on every request, which is quite annoying. However, leaving this box checked can be useful for making sure the connection is working at first, before you have set any internal breakpoints. Your settings should look like this. Hit APPLY and OK. Go to Preferences > Languages & Frameworks > PHP > Servers . We will create a new server here. Use these settings: Name: docker-debug-server Host: localhost Port: 8001 Use path mappings: yes, select the checkbox Under project files, select the top-level archipelago-deployment directory in the File/Directory column. In the Absolute path on the server add /var/www/html Hit APPLY and OK and close the window. Go to Run > Edit Configurations . Hit the + Button to create a new PHP Remote Debug. Name whatever you want, I called mine Archipelago . Use these settings: Filter debug connection by IDE Key: yes, select the checkbox Server: select docker-debug-server from dropdown (we created this in step 3) IDE Key: archipelago (this matches the key set in our container) Note: If you try to validate your connection, it will fail. But that's ok. Validate your connection. With Run > Edit Configurations still open, you can hit the link that says \"Validate\". Use these settings in the following validation window: Path to create validation script <your local path>/archipelago-deployment/web Url to validation script: http://localhost:8001 Hit VALIDATE. You should get a series of green check marks. If you get a warning about missing php.ini file, that is OK, our file has a different name in the container ( xdebug.ini ) and is still being read correctly. Set up Browser Integration We have had success using the XDebug Helper extension in Chrome. Once you have the extension installed, right-click on the bug icon in the top right of your chrome browser window and select \"Options\" to configure the IDE key. Under \"IDE\", select \"Other\", and in the text box, enter \"archipelago\" Actually Debugging! Hit the button (top right bar of PHPStorm) that looks like a telephone, for Start Listening for PHP Debug Connections . Now, you can use Run > Debug and select the Archipelago named configuration that we created in the previous steps. The debugging console will appear. It will say it is waiting for incoming connection from 'archipelago' . Right now the debugging session is not enabled. Browse to localhost:8001 . Click on the gray XDebug Helper icon at the top right of your window and select the green \"Debug\" button. This will tell chrome to set the xdebug session key when you reload the page. Now set a breakpoint in your code, and refresh the page. If you have breakpoints set, either manually, or from leaving \"Break at first line in PHP scripts\" checked, you should have output now in the debugger. If you are done actively debugging, it is best to click the green XDebug Helper icon and select \"Disable\". This will greatly improve speed and performance for your app in development. When you need to debug, just turn on debugging using the XDebug Helper button again. If you would like to see the output of your xdebug logs, run the following script: docker exec -ti esmero-php bash -c 'tail -f /tmp/xdebug.log > /proc/1/fd/2' Then, you can use the typical docker logs command on the esmero-php container, and you will see the xdebug output: docker logs esmero-php -f Xdebug makes accessing variables in Drupal kind of great. Many possibilities, including debugging for Twig templates. Happy debugging! Appendix: XDebug on a linux host If you are developing on a linux machine, you may need to make a change to the xdebug configuration file. Create a new file in the /archipelago-deployment/xdebug folder called xdebug.ini and enter the following text: zend_extension=xdebug [xdebug] xdebug.mode=develop,debug xdebug.discover_client_host = 1 xdebug.start_with_request=yes Make a bind mount to this file in your docker-compose.dev.yml file: php-debug: ... volumes: - ${PWD}:/var/www/html:cached # Bind mount custom xdebug configuration file... - ${PWD}/xdebug/xdebug.ini:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini Restart your docker containers using the method described at the top of this page. Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Debugging PHP in Archipelago"},{"location":"xdebug/#debugging-php-in-archipelago","text":"This document describes how to enable Xdebug for local PHP development using the PHPStorm IDE and a docker container running the Archipelago esmero-php:development image. It involves interacting with the esmero/archipelago-docker-images repo and the esmero/archipelago-deployment repo.","title":"Debugging PHP in Archipelago"},{"location":"xdebug/#part-1-docker","text":"Run the following commands from your /archipelago-deployment directory: docker-compose down \\ docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d This version of docker-compose up uses an override file to modify our services. docker-compose.dev.yml we now have an extra PHP container called esmero-php-debug . To stop the containers in the future, run docker-compose -f docker-compose.yml -f docker-compose.dev.yml down . (To make these commands easier to remember, consider making bash aliases in your .bashrc file.) (If you are running your development on a Linux system, you may need to make a modification to your xdebug configuration file on the esmero-php-dev container. See appendix at the bottom of this page.) So we have reloaded the containers and now you are ready for Part 2.","title":"Part 1: Docker"},{"location":"xdebug/#part-2-phpstorm","text":"In PHPStorm, open your archipelago-deployment project. Go to Preferences > Languages & Frameworks > PHP > Debug or Settings > PHP > Servers . In this window there is an Xdebug section. Use these settings: Debug port: 9003 . (do NOT use the default, 9000) Can accept external connections: yes, select checkbox (optional) Break at first line in PHP scripts: uncheck. If you leave this selected, you will have to manually step through a breakpoint from Drupal's main index.php file on every request, which is quite annoying. However, leaving this box checked can be useful for making sure the connection is working at first, before you have set any internal breakpoints. Your settings should look like this. Hit APPLY and OK. Go to Preferences > Languages & Frameworks > PHP > Servers . We will create a new server here. Use these settings: Name: docker-debug-server Host: localhost Port: 8001 Use path mappings: yes, select the checkbox Under project files, select the top-level archipelago-deployment directory in the File/Directory column. In the Absolute path on the server add /var/www/html Hit APPLY and OK and close the window. Go to Run > Edit Configurations . Hit the + Button to create a new PHP Remote Debug. Name whatever you want, I called mine Archipelago . Use these settings: Filter debug connection by IDE Key: yes, select the checkbox Server: select docker-debug-server from dropdown (we created this in step 3) IDE Key: archipelago (this matches the key set in our container) Note: If you try to validate your connection, it will fail. But that's ok. Validate your connection. With Run > Edit Configurations still open, you can hit the link that says \"Validate\". Use these settings in the following validation window: Path to create validation script <your local path>/archipelago-deployment/web Url to validation script: http://localhost:8001 Hit VALIDATE. You should get a series of green check marks. If you get a warning about missing php.ini file, that is OK, our file has a different name in the container ( xdebug.ini ) and is still being read correctly.","title":"Part 2: PHPStorm"},{"location":"xdebug/#set-up-browser-integration","text":"We have had success using the XDebug Helper extension in Chrome. Once you have the extension installed, right-click on the bug icon in the top right of your chrome browser window and select \"Options\" to configure the IDE key. Under \"IDE\", select \"Other\", and in the text box, enter \"archipelago\"","title":"Set up Browser Integration"},{"location":"xdebug/#actually-debugging","text":"Hit the button (top right bar of PHPStorm) that looks like a telephone, for Start Listening for PHP Debug Connections . Now, you can use Run > Debug and select the Archipelago named configuration that we created in the previous steps. The debugging console will appear. It will say it is waiting for incoming connection from 'archipelago' . Right now the debugging session is not enabled. Browse to localhost:8001 . Click on the gray XDebug Helper icon at the top right of your window and select the green \"Debug\" button. This will tell chrome to set the xdebug session key when you reload the page. Now set a breakpoint in your code, and refresh the page. If you have breakpoints set, either manually, or from leaving \"Break at first line in PHP scripts\" checked, you should have output now in the debugger. If you are done actively debugging, it is best to click the green XDebug Helper icon and select \"Disable\". This will greatly improve speed and performance for your app in development. When you need to debug, just turn on debugging using the XDebug Helper button again. If you would like to see the output of your xdebug logs, run the following script: docker exec -ti esmero-php bash -c 'tail -f /tmp/xdebug.log > /proc/1/fd/2' Then, you can use the typical docker logs command on the esmero-php container, and you will see the xdebug output: docker logs esmero-php -f Xdebug makes accessing variables in Drupal kind of great. Many possibilities, including debugging for Twig templates. Happy debugging!","title":"Actually Debugging!"},{"location":"xdebug/#appendix-xdebug-on-a-linux-host","text":"If you are developing on a linux machine, you may need to make a change to the xdebug configuration file. Create a new file in the /archipelago-deployment/xdebug folder called xdebug.ini and enter the following text: zend_extension=xdebug [xdebug] xdebug.mode=develop,debug xdebug.discover_client_host = 1 xdebug.start_with_request=yes Make a bind mount to this file in your docker-compose.dev.yml file: php-debug: ... volumes: - ${PWD}:/var/www/html:cached # Bind mount custom xdebug configuration file... - ${PWD}/xdebug/xdebug.ini:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini Restart your docker containers using the method described at the top of this page. Thank you for reading! Please contact us on our Archipelago Commons Google Group with any questions or feedback. Return to the Archipelago Documentation main page .","title":"Appendix: XDebug on a linux host"},{"location":"tags.html","text":"Contents grouped by tag AMI Ingesting New Digital Objects and Collections using Spreadsheets or Google Sheets Archipelago Multi Importer Ingesting New Digital Objects and Collections using Spreadsheets or Google Sheets archipelago-deployment Moving from archipelago-deployment to archipelago-deployment-live Installing Archipelago on Ubuntu 18.04 or 20.04 Archipelago-deployment Archipelago-deployment: upgrading Drupal 8 to Drupal 9 (1.0.0-RC2 to 1.0.0-RC3) archipelago-deployment-live archipelago-deployment-live Moving from archipelago-deployment to archipelago-deployment-live Archipelago-deployment-live Archipelago-deployment-live: upgrading Drupal 8 to Drupal 9 (1.0.0-RC2 to 1.0.0-RC3) Drupal 8 Archipelago-deployment: upgrading Drupal 8 to Drupal 9 (1.0.0-RC2 to 1.0.0-RC3) Archipelago-deployment-live: upgrading Drupal 8 to Drupal 9 (1.0.0-RC2 to 1.0.0-RC3) Drupal 9 Installing Archipelago on Ubuntu 18.04 or 20.04 Archipelago-deployment: upgrading Drupal 8 to Drupal 9 (1.0.0-RC2 to 1.0.0-RC3) Archipelago-deployment-live: upgrading Drupal 8 to Drupal 9 (1.0.0-RC2 to 1.0.0-RC3) Github Managing, sheltering, pruning, and nurturing your own custom Archipelago Linux Installing Archipelago on Ubuntu 18.04 or 20.04 Ubuntu 18.04 Installing Archipelago on Ubuntu 18.04 or 20.04 Ubuntu 20.04 Installing Archipelago on Ubuntu 18.04 or 20.04","title":"Tags"},{"location":"tags.html#contents-grouped-by-tag","text":"","title":"Contents grouped by tag"},{"location":"tags.html#ami","text":"Ingesting New Digital Objects and Collections using Spreadsheets or Google Sheets","title":"AMI"},{"location":"tags.html#archipelago-multi-importer","text":"Ingesting New Digital Objects and Collections using Spreadsheets or Google Sheets","title":"Archipelago Multi Importer"},{"location":"tags.html#archipelago-deployment","text":"Moving from archipelago-deployment to archipelago-deployment-live Installing Archipelago on Ubuntu 18.04 or 20.04","title":"archipelago-deployment"},{"location":"tags.html#archipelago-deployment_1","text":"Archipelago-deployment: upgrading Drupal 8 to Drupal 9 (1.0.0-RC2 to 1.0.0-RC3)","title":"Archipelago-deployment"},{"location":"tags.html#archipelago-deployment-live","text":"archipelago-deployment-live Moving from archipelago-deployment to archipelago-deployment-live","title":"archipelago-deployment-live"},{"location":"tags.html#archipelago-deployment-live_1","text":"Archipelago-deployment-live: upgrading Drupal 8 to Drupal 9 (1.0.0-RC2 to 1.0.0-RC3)","title":"Archipelago-deployment-live"},{"location":"tags.html#drupal-8","text":"Archipelago-deployment: upgrading Drupal 8 to Drupal 9 (1.0.0-RC2 to 1.0.0-RC3) Archipelago-deployment-live: upgrading Drupal 8 to Drupal 9 (1.0.0-RC2 to 1.0.0-RC3)","title":"Drupal 8"},{"location":"tags.html#drupal-9","text":"Installing Archipelago on Ubuntu 18.04 or 20.04 Archipelago-deployment: upgrading Drupal 8 to Drupal 9 (1.0.0-RC2 to 1.0.0-RC3) Archipelago-deployment-live: upgrading Drupal 8 to Drupal 9 (1.0.0-RC2 to 1.0.0-RC3)","title":"Drupal 9"},{"location":"tags.html#github","text":"Managing, sheltering, pruning, and nurturing your own custom Archipelago","title":"Github"},{"location":"tags.html#linux","text":"Installing Archipelago on Ubuntu 18.04 or 20.04","title":"Linux"},{"location":"tags.html#ubuntu-1804","text":"Installing Archipelago on Ubuntu 18.04 or 20.04","title":"Ubuntu 18.04"},{"location":"tags.html#ubuntu-2004","text":"Installing Archipelago on Ubuntu 18.04 or 20.04","title":"Ubuntu 20.04"}]}